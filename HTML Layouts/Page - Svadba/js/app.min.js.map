{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/ssr-window/ssr-window.esm.js","webpack:///./node_modules/dom7/dom7.esm.js","webpack:///./node_modules/swiper/esm/utils/dom.js","webpack:///./node_modules/swiper/esm/utils/get-support.js","webpack:///./node_modules/swiper/esm/utils/get-device.js","webpack:///./node_modules/swiper/esm/utils/get-browser.js","webpack:///./node_modules/swiper/esm/utils/utils.js","webpack:///./node_modules/swiper/esm/modules/resize/resize.js","webpack:///./node_modules/swiper/esm/modules/observer/observer.js","webpack:///./node_modules/swiper/esm/components/core/events/onResize.js","webpack:///./node_modules/swiper/esm/components/core/events/index.js","webpack:///./node_modules/swiper/esm/components/core/check-overflow/index.js","webpack:///./node_modules/swiper/esm/components/core/defaults.js","webpack:///./node_modules/swiper/esm/components/core/core-class.js","webpack:///./node_modules/swiper/esm/components/core/modular.js","webpack:///./node_modules/swiper/esm/components/core/events-emitter.js","webpack:///./node_modules/swiper/esm/components/core/update/index.js","webpack:///./node_modules/swiper/esm/components/core/update/updateSize.js","webpack:///./node_modules/swiper/esm/components/core/update/updateSlides.js","webpack:///./node_modules/swiper/esm/components/core/update/updateAutoHeight.js","webpack:///./node_modules/swiper/esm/components/core/update/updateSlidesOffset.js","webpack:///./node_modules/swiper/esm/components/core/update/updateSlidesProgress.js","webpack:///./node_modules/swiper/esm/components/core/update/updateProgress.js","webpack:///./node_modules/swiper/esm/components/core/update/updateSlidesClasses.js","webpack:///./node_modules/swiper/esm/components/core/update/updateActiveIndex.js","webpack:///./node_modules/swiper/esm/components/core/update/updateClickedSlide.js","webpack:///./node_modules/swiper/esm/components/core/translate/index.js","webpack:///./node_modules/swiper/esm/components/core/translate/getTranslate.js","webpack:///./node_modules/swiper/esm/components/core/translate/setTranslate.js","webpack:///./node_modules/swiper/esm/components/core/translate/minTranslate.js","webpack:///./node_modules/swiper/esm/components/core/translate/maxTranslate.js","webpack:///./node_modules/swiper/esm/components/core/translate/translateTo.js","webpack:///./node_modules/swiper/esm/components/core/transition/index.js","webpack:///./node_modules/swiper/esm/components/core/transition/setTransition.js","webpack:///./node_modules/swiper/esm/components/core/transition/transitionStart.js","webpack:///./node_modules/swiper/esm/components/core/transition/transitionEnd.js","webpack:///./node_modules/swiper/esm/components/core/slide/index.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideTo.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideToLoop.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideNext.js","webpack:///./node_modules/swiper/esm/components/core/slide/slidePrev.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideReset.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideToClosest.js","webpack:///./node_modules/swiper/esm/components/core/slide/slideToClickedSlide.js","webpack:///./node_modules/swiper/esm/components/core/loop/index.js","webpack:///./node_modules/swiper/esm/components/core/loop/loopCreate.js","webpack:///./node_modules/swiper/esm/components/core/loop/loopFix.js","webpack:///./node_modules/swiper/esm/components/core/loop/loopDestroy.js","webpack:///./node_modules/swiper/esm/components/core/grab-cursor/index.js","webpack:///./node_modules/swiper/esm/components/core/grab-cursor/setGrabCursor.js","webpack:///./node_modules/swiper/esm/components/core/grab-cursor/unsetGrabCursor.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/index.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/appendSlide.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/prependSlide.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/addSlide.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/removeSlide.js","webpack:///./node_modules/swiper/esm/components/core/manipulation/removeAllSlides.js","webpack:///./node_modules/swiper/esm/components/core/events/onTouchStart.js","webpack:///./node_modules/swiper/esm/components/core/events/onTouchMove.js","webpack:///./node_modules/swiper/esm/components/core/events/onTouchEnd.js","webpack:///./node_modules/swiper/esm/components/core/events/onScroll.js","webpack:///./node_modules/swiper/esm/components/core/events/onClick.js","webpack:///./node_modules/swiper/esm/components/core/breakpoints/index.js","webpack:///./node_modules/swiper/esm/components/core/breakpoints/setBreakpoint.js","webpack:///./node_modules/swiper/esm/components/core/breakpoints/getBreakpoint.js","webpack:///./node_modules/swiper/esm/components/core/classes/index.js","webpack:///./node_modules/swiper/esm/components/core/classes/addClasses.js","webpack:///./node_modules/swiper/esm/components/core/classes/removeClasses.js","webpack:///./node_modules/swiper/esm/components/core/images/index.js","webpack:///./node_modules/swiper/esm/components/core/images/loadImage.js","webpack:///./node_modules/swiper/esm/components/core/images/preloadImages.js","webpack:///./node_modules/swiper/esm/components/navigation/navigation.js","webpack:///./node_modules/swiper/esm/components/effect-coverflow/effect-coverflow.js","webpack:///./node_modules/micromodal/dist/micromodal.es.js","webpack:///./app/js/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isObject","obj","constructor","extend","target","src","keys","forEach","length","ssrDocument","body","addEventListener","removeEventListener","activeElement","blur","nodeName","querySelector","querySelectorAll","getElementById","createEvent","initEvent","createElement","children","childNodes","style","setAttribute","getElementsByTagName","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","search","getDocument","doc","document","ssrWindow","navigator","userAgent","history","replaceState","pushState","go","back","CustomEvent","this","getComputedStyle","getPropertyValue","Image","Date","screen","setTimeout","clearTimeout","matchMedia","requestAnimationFrame","callback","cancelAnimationFrame","id","getWindow","win","window","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","toString","e","_isNativeReflectConstruct","a","push","apply","instance","Function","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","indexOf","TypeError","has","set","Wrapper","writable","configurable","Dom7","_Array","subClass","superClass","items","proto","_this","concat","self","ReferenceError","_assertThisInitialized","Array","arrayFlat","arr","res","el","isArray","arrayFilter","filter","$","selector","context","html","trim","toCreate","tempParent","innerHTML","qsa","nodeType","uniqueArray","arrayUnique","noTrigger","split","shortcut","_len","_key","on","trigger","Methods","addClass","classes","classNames","map","_el$classList","classList","add","removeClass","_len2","_key2","_el$classList2","remove","hasClass","_len4","_key4","className","contains","toggleClass","_len3","_key3","toggle","attr","attrs","getAttribute","attrName","removeAttr","removeAttribute","transform","transition","duration","transitionDuration","_len5","_key5","eventType","targetSelector","listener","capture","handleLiveEvent","eventData","dom7EventData","unshift","is","_parents","parents","k","handleEvent","j","events","_event","dom7LiveListeners","proxyListener","event","dom7Listeners","off","_len6","_key6","handlers","handler","dom7proxy","splice","_len9","_key9","evt","detail","bubbles","cancelable","data","dataIndex","dispatchEvent","transitionEnd","dom","fireCallBack","outerWidth","includeMargins","_styles","styles","offsetWidth","parseFloat","outerHeight","_styles2","offsetHeight","offset","box","getBoundingClientRect","clientTop","clientLeft","scrollTop","scrollY","scrollLeft","scrollX","top","left","css","props","_prop","each","index","text","textContent","compareWith","matches","webkitMatchesSelector","msMatchesSelector","child","previousSibling","eq","returnIndex","append","newChild","tempDiv","firstChild","appendChild","prepend","insertBefore","next","nextElementSibling","nextAll","nextEls","_next","prev","previousElementSibling","prevAll","prevEls","_prev","parent","parentNode","_parent","closest","find","foundElements","found","removeChild","methodName","browser","nextTick","delay","now","getTranslate","axis","matrix","curTransform","transformMatrix","curStyle","currentStyle","WebKitCSSMatrix","webkitTransform","replace","join","MozTransform","OTransform","MsTransform","msTransform","m41","m42","slice","to","noExtend","nextSource","keysArray","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","__swiper__","bindModuleMethods","subKey","getSupport","touch","DocumentTouch","pointerEvents","PointerEvent","maxTouchPoints","observer","passiveListener","supportsPassive","opts","gestures","getDevice","overrides","_temp","support","platform","ua","device","screenWidth","screenHeight","android","windows","ios","width","height","match","ipad","ipod","iphone","macos","os","getBrowser","isEdge","isSafari","toLowerCase","isWebView","test","swiper","resize","createObserver","destroyed","initialized","ResizeObserver","entries","newWidth","newHeight","_ref","contentBoxSize","contentRect","inlineSize","blockSize","resizeHandler","observe","removeObserver","unobserve","emit","orientationChangeHandler","init","params","resizeObserver","destroy","_extends","assign","source","Observer","attach","options","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","attributes","childList","characterData","observers","observeParents","containerParents","$el","observeSlideChildren","$wrapperEl","disconnect","onResize","allowSlideNext","allowSlidePrev","breakpoints","setBreakpoint","snapGrid","updateSize","updateSlides","updateSlidesClasses","slidesPerView","isEnd","isBeginning","centeredSlides","slideTo","slides","activeIndex","autoplay","running","paused","run","watchOverflow","checkOverflow","dummyEventAttached","dummyEventListener","direction","touchEventsTarget","initialSlide","speed","cssMode","updateOnWindowResize","nested","preventInteractionOnTransition","url","edgeSwipeDetection","edgeSwipeThreshold","freeMode","freeModeMomentum","freeModeMomentumRatio","freeModeMomentumBounce","freeModeMomentumBounceRatio","freeModeMomentumVelocityRatio","freeModeSticky","freeModeMinimumVelocity","autoHeight","setWrapperSize","virtualTranslate","effect","breakpointsBase","spaceBetween","slidesPerColumn","slidesPerColumnFill","slidesPerGroup","slidesPerGroupSkip","centeredSlidesBounds","slidesOffsetBefore","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","roundLengths","touchRatio","touchAngle","simulateTouch","shortSwipes","longSwipes","longSwipesRatio","longSwipesMs","followFinger","allowTouchMove","threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","resistance","resistanceRatio","watchSlidesProgress","watchSlidesVisibility","grabCursor","preventClicks","preventClicksPropagation","slideToClickedSlide","preloadImages","updateOnImagesReady","loop","loopAdditionalSlides","loopedSlides","loopFillGroupWithBlank","loopPreventsSlide","swipeHandler","noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideBlankClass","slideActiveClass","slideDuplicateActiveClass","slideVisibleClass","slideDuplicateClass","slideNextClass","slideDuplicateNextClass","slidePrevClass","slideDuplicatePrevClass","wrapperClass","runCallbacksOnInit","_emitClasses","_defineProperties","descriptor","prototypes","modular","useParams","instanceParams","moduleName","useModules","modulesParams","moduleParams","moduleEventName","eventsEmitter","priority","method","eventsListeners","once","onceHandler","__emitterProxy","onAny","eventsAnyListeners","offAny","eventHandler","update","clientWidth","clientHeight","isHorizontal","isVertical","parseInt","Number","isNaN","size","getDirectionLabel","getDirectionPropertyValue","node","label","swiperSize","rtl","rtlTranslate","wrongRTL","previousSlidesLength","isVirtual","virtual","enabled","slidesLength","slidesGrid","slidesSizesGrid","offsetBefore","offsetAfter","slidesNumberEvenToRows","previousSnapGridLength","previousSlidesGridLength","slidePosition","prevSlideSize","virtualSize","marginLeft","marginTop","marginRight","marginBottom","Math","floor","ceil","max","allSlidesSize","maxSnap","_allSlidesSize","allSlidesOffset","slidesPerRow","numFullColumns","slideSize","currentTransform","currentWebKitTransform","paddingLeft","paddingRight","_slide$","slide","row","column","newSlideOrderIndex","groupIndex","slideIndexInGroup","columnsInGroup","min","order","slideStyles","boxSizing","swiperSlideSize","abs","_$wrapperEl$css","_$wrapperEl$css2","newSlidesGrid","_i","slidesGridItem","_i2","_slidesGridItem","slideEl","slideIndex","_slides$filter$css","slideSizeValue","snap","snapIndex","updateSlidesOffset","updateAutoHeight","activeSlides","setTransition","visibleSlides","swiperSlideOffset","offsetLeft","offsetTop","updateSlidesProgress","translate","offsetCenter","visibleSlidesIndexes","slideBefore","slideAfter","slideProgress","minTranslate","progress","updateProgress","multiplier","translatesDiff","maxTranslate","wasBeginning","wasEnd","realIndex","activeSlide","nextSlide","prevSlide","emitSlidesClasses","updateActiveIndex","newActiveIndex","previousIndex","previousRealIndex","previousSnapIndex","skip","updateClickedSlide","slideFound","clickedSlide","clickedIndex","currentTranslate","setTranslate","byController","wrapperEl","x","y","previousTranslate","translateTo","runCallbacks","translateBounds","internal","animating","newTranslate","isH","scrollTo","_wrapperEl$scrollTo","behavior","onTranslateToWrapperTransitionEnd","transitionStart","dir","Error","indexAsNumber","isFinite","normalizedTranslate","normalizedGird","normalizedGridNext","scrollWidth","onSlideToWrapperTransitionEnd","slideToLoop","newIndex","slideNext","increment","loopFix","_clientLeft","slidePrev","normalize","val","prevIndex","normalizedSnapGrid","prevSnap","slideReset","slideToClosest","currentSnap","slidesPerViewDynamic","slideToIndex","loopCreate","blankSlidesNum","blankNode","prependSlides","appendSlides","cloneNode","diff","loopDestroy","setGrabCursor","moving","isLocked","cursor","unsetGrabCursor","manipulation","appendSlide","prependSlide","addSlide","activeIndexBuffer","baseLength","slidesBuffer","currentSlide","removeSlide","slidesIndexes","indexToRemove","removeAllSlides","attachEvents","touchEvents","onTouchStart","touchEventsData","touches","originalEvent","$targetEl","isTouchEvent","type","which","button","isTouched","isMoved","shadowRoot","path","allowClick","currentX","targetTouches","pageX","currentY","pageY","startX","startY","iOSEdgeSwipeDetection","iOSEdgeSwipeThreshold","innerWidth","preventDefault","allowTouchCallbacks","isScrolling","startMoving","touchStartTime","swipeDirection","allowThresholdMove","formElements","shouldPreventDefault","isContentEditable","onTouchMove","targetTouch","changedTouches","preventedByNestedSwiper","diffX","diffY","sqrt","pow","atan2","PI","stopPropagation","startTranslate","allowMomentumBounce","disableParentSwiper","velocities","position","time","onTouchEnd","currentPos","touchEndTime","timeDiff","lastClickTime","lastMoveEvent","pop","velocityEvent","distance","velocity","momentumDuration","momentumDistance","newPosition","afterBouncePosition","moveDistance","doBounce","bounceAmount","needsLoopFix","currentSlideSize","stopIndex","groupSize","_increment","ratio","navigation","nextEl","prevEl","onScroll","onClick","stopImmediatePropagation","start","move","end","passive","cancel","detachEvents","breakpoint","breakpointOnlyParams","breakpointParams","_swiper$loopedSlides","getBreakpoint","currentBreakpoint","param","paramValue","originalParams","wasMultiRow","isMultiRow","emitContainerClasses","directionChanged","needsReLoop","changeDirection","base","containerEl","currentWidth","currentHeight","innerHeight","points","point","minRatio","substr","sort","b","_points$i","wasLocked","lastSlidePosition","addClasses","prefix","resultClasses","suffixes","item","removeClasses","images","loadImage","imageEl","srcset","sizes","checkForComplete","onReady","complete","image","onload","onerror","imagesLoaded","imagesToLoad","currentSrc","extendedDefaults","Swiper","swipers","newParams","moduleParamName","desktop","swiperParams","defaults","passedParams","eventName","touchEventsTouch","touchEventsDesktop","clickTimeout","Constructor","staticProps","_proto","setProgress","current","getSlideClasses","updates","spv","breakLoop","translateValue","newDirection","needUpdate","currentDirection","mount","mounted","deleteInstance","cleanStyles","extendDefaults","newDefaults","installModule","use","protoProps","prototypeGroup","protoMethod","Navigation","toggleEl","disabled","disabledClass","tagName","$nextEl","$prevEl","_swiper$navigation","lockClass","onPrevClick","onNextClick","_swiper$navigation2","hideOnClick","hiddenClass","toEdge","fromEdge","click","isHidden","_swiper$navigation3","targetEl","pagination","clickable","Coverflow","swiperWidth","swiperHeight","coverflowEffect","center","rotate","depth","$slideEl","offsetMultiplier","modifier","rotateY","rotateX","translateZ","stretch","translateY","translateX","scale","slideTransform","zIndex","round","slideShadows","$shadowBeforeEl","$shadowAfterEl","opacity","beforeInit","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","iter","iterator","from","_iterableToArray","minLen","_unsupportedIterableToArray","_nonIterableSpread","arr2","FOCUSABLE_ELEMENTS","Modal","activeModal","MicroModal","targetModal","_ref$triggers","triggers","_ref$onShow","onShow","_ref$onClose","onClose","_ref$openTrigger","openTrigger","_ref$closeTrigger","closeTrigger","_ref$openClass","openClass","_ref$disableScroll","disableScroll","_ref$disableFocus","disableFocus","_ref$awaitCloseAnimat","awaitCloseAnimation","_ref$awaitOpenAnimati","awaitOpenAnimation","_ref$debugMode","debugMode","_classCallCheck","modal","config","registerTriggers","onKeydown","Boolean","showModal","_this2","scrollBehaviour","addEventListeners","setFocusToFirstNode","removeEventListeners","focus","closeModal","overflow","hasAttribute","keyCode","retainFocus","nodes","focusableNodes","nodesWhichAreNotCloseTargets","_this3","getFocusableNodes","focusedItemIndex","offsetParent","shiftKey","triggerAttr","triggerMap","validateArgs","show","validateModalPresence","close","closeModalById","console","warn","validateTriggerPresence","EffectCoverflow","Micromodal","sliderMediaPhoto","528","sliderMediaVideo","tabs","945","680","targetTab","lastTab","dataset","tabTarget","lastToggle"],"mappings":"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","file":"app.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * SSR Window 3.0.0\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2020, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: November 9, 2020\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target, src) {\n    if (target === void 0) { target = {}; }\n    if (src === void 0) { src = {}; }\n    Object.keys(src).forEach(function (key) {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nvar ssrDocument = {\n    body: {},\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    activeElement: {\n        blur: function () { },\n        nodeName: '',\n    },\n    querySelector: function () {\n        return null;\n    },\n    querySelectorAll: function () {\n        return [];\n    },\n    getElementById: function () {\n        return null;\n    },\n    createEvent: function () {\n        return {\n            initEvent: function () { },\n        };\n    },\n    createElement: function () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute: function () { },\n            getElementsByTagName: function () {\n                return [];\n            },\n        };\n    },\n    createElementNS: function () {\n        return {};\n    },\n    importNode: function () {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nfunction getDocument() {\n    var doc = typeof document !== 'undefined' ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\n\nvar ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState: function () { },\n        pushState: function () { },\n        go: function () { },\n        back: function () { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    getComputedStyle: function () {\n        return {\n            getPropertyValue: function () {\n                return '';\n            },\n        };\n    },\n    Image: function () { },\n    Date: function () { },\n    screen: {},\n    setTimeout: function () { },\n    clearTimeout: function () { },\n    matchMedia: function () {\n        return {};\n    },\n    requestAnimationFrame: function (callback) {\n        if (typeof setTimeout === 'undefined') {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame: function (id) {\n        if (typeof setTimeout === 'undefined') {\n            return;\n        }\n        clearTimeout(id);\n    },\n};\nfunction getWindow() {\n    var win = typeof window !== 'undefined' ? window : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\nexport { extend, getDocument, getWindow, ssrDocument, ssrWindow };\n","/**\n * Dom7 3.0.0\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2020, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: November 9, 2020\n */\nimport { getWindow, getDocument } from 'ssr-window';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  var proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get: function get() {\n      return proto;\n    },\n    set: function set(value) {\n      proto.__proto__ = value;\n    }\n  });\n}\n\nvar Dom7 = /*#__PURE__*/function (_Array) {\n  _inheritsLoose(Dom7, _Array);\n\n  function Dom7(items) {\n    var _this;\n\n    _this = _Array.call.apply(_Array, [this].concat(items)) || this;\n    makeReactive(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  return Dom7;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n\nfunction arrayFlat(arr) {\n  if (arr === void 0) {\n    arr = [];\n  }\n\n  var res = [];\n  arr.forEach(function (el) {\n    if (Array.isArray(el)) {\n      res.push.apply(res, arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  var uniqueArray = [];\n\n  for (var i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n\n  return uniqueArray;\n}\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, function (match, group) {\n    return group.toUpperCase();\n  });\n}\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n\n  var a = [];\n  var res = context.querySelectorAll(selector);\n\n  for (var i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n\n  return a;\n}\n\nfunction $(selector, context) {\n  var window = getWindow();\n  var document = getDocument();\n  var arr = [];\n\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n\n  if (!selector) {\n    return new Dom7(arr);\n  }\n\n  if (typeof selector === 'string') {\n    var html = selector.trim();\n\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      var toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      var tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n\n      for (var i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n\n  return new Dom7(arrayUnique(arr));\n}\n\n$.fn = Dom7.prototype;\n\nfunction addClass() {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n\n  var classNames = arrayFlat(classes.map(function (c) {\n    return c.split(' ');\n  }));\n  this.forEach(function (el) {\n    var _el$classList;\n\n    (_el$classList = el.classList).add.apply(_el$classList, classNames);\n  });\n  return this;\n}\n\nfunction removeClass() {\n  for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    classes[_key2] = arguments[_key2];\n  }\n\n  var classNames = arrayFlat(classes.map(function (c) {\n    return c.split(' ');\n  }));\n  this.forEach(function (el) {\n    var _el$classList2;\n\n    (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);\n  });\n  return this;\n}\n\nfunction toggleClass() {\n  for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    classes[_key3] = arguments[_key3];\n  }\n\n  var classNames = arrayFlat(classes.map(function (c) {\n    return c.split(' ');\n  }));\n  this.forEach(function (el) {\n    classNames.forEach(function (className) {\n      el.classList.toggle(className);\n    });\n  });\n}\n\nfunction hasClass() {\n  for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    classes[_key4] = arguments[_key4];\n  }\n\n  var classNames = arrayFlat(classes.map(function (c) {\n    return c.split(' ');\n  }));\n  return arrayFilter(this, function (el) {\n    return classNames.filter(function (className) {\n      return el.classList.contains(className);\n    }).length > 0;\n  }).length > 0;\n}\n\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n\n  for (var i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (var attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction removeAttr(attr) {\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n\n  return this;\n}\n\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (var i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (var propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction data(key, value) {\n  var el;\n\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n\n    var dataKey = el.getAttribute(\"data-\" + key);\n\n    if (dataKey) {\n      return dataKey;\n    }\n\n    return undefined;\n  } // Set value\n\n\n  for (var i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n\n  return this;\n}\n\nfunction removeData(key) {\n  for (var i = 0; i < this.length; i += 1) {\n    var el = this[i];\n\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\n\nfunction dataset() {\n  var el = this[0];\n  if (!el) return undefined;\n  var dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (var dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (var i = 0; i < el.attributes.length; i += 1) {\n      var _attr = el.attributes[i];\n\n      if (_attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;\n      }\n    }\n  }\n\n  for (var key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n\n  return dataset;\n}\n\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    var el = this[0];\n    if (!el) return undefined;\n\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      var values = [];\n\n      for (var i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n\n      return values;\n    }\n\n    return el.value;\n  } // set value\n\n\n  for (var _i = 0; _i < this.length; _i += 1) {\n    var _el = this[_i];\n\n    if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === 'select') {\n      for (var j = 0; j < _el.options.length; j += 1) {\n        _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;\n      }\n    } else {\n      _el.value = value;\n    }\n  }\n\n  return this;\n}\n\nfunction value(value) {\n  return this.val(value);\n}\n\nfunction transform(transform) {\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n\n  return this;\n}\n\nfunction transition(duration) {\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? duration + \"ms\" : duration;\n  }\n\n  return this;\n}\n\nfunction on() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  var eventType = args[0],\n      targetSelector = args[1],\n      listener = args[2],\n      capture = args[3];\n\n  if (typeof args[1] === 'function') {\n    eventType = args[0];\n    listener = args[1];\n    capture = args[2];\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    var target = e.target;\n    if (!target) return;\n    var eventData = e.target.dom7EventData || [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n      var _parents = $(target).parents(); // eslint-disable-line\n\n\n      for (var k = 0; k < _parents.length; k += 1) {\n        if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);\n      }\n    }\n  }\n\n  function handleEvent(e) {\n    var eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    listener.apply(this, eventData);\n  }\n\n  var events = eventType.split(' ');\n  var j;\n\n  for (var i = 0; i < this.length; i += 1) {\n    var el = this[i];\n\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        var event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener: listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        var _event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];\n\n        el.dom7LiveListeners[_event].push({\n          listener: listener,\n          proxyListener: handleLiveEvent\n        });\n\n        el.addEventListener(_event, handleLiveEvent, capture);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction off() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n\n  var eventType = args[0],\n      targetSelector = args[1],\n      listener = args[2],\n      capture = args[3];\n\n  if (typeof args[1] === 'function') {\n    eventType = args[0];\n    listener = args[1];\n    capture = args[2];\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n  var events = eventType.split(' ');\n\n  for (var i = 0; i < events.length; i += 1) {\n    var event = events[i];\n\n    for (var j = 0; j < this.length; j += 1) {\n      var el = this[j];\n      var handlers = void 0;\n\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n\n      if (handlers && handlers.length) {\n        for (var k = handlers.length - 1; k >= 0; k -= 1) {\n          var handler = handlers[k];\n\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction once() {\n  var dom = this;\n\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n\n  var eventName = args[0],\n      targetSelector = args[1],\n      listener = args[2],\n      capture = args[3];\n\n  if (typeof args[1] === 'function') {\n    eventName = args[0];\n    listener = args[1];\n    capture = args[2];\n    targetSelector = undefined;\n  }\n\n  function onceHandler() {\n    for (var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      eventArgs[_key8] = arguments[_key8];\n    }\n\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\n\nfunction trigger() {\n  var window = getWindow();\n\n  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    args[_key9] = arguments[_key9];\n  }\n\n  var events = args[0].split(' ');\n  var eventData = args[1];\n\n  for (var i = 0; i < events.length; i += 1) {\n    var event = events[i];\n\n    for (var j = 0; j < this.length; j += 1) {\n      var el = this[j];\n\n      if (window.CustomEvent) {\n        var evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter(function (data, dataIndex) {\n          return dataIndex > 0;\n        });\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction transitionEnd(callback) {\n  var dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction animationEnd(callback) {\n  var dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction width() {\n  var window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n\n  return null;\n}\n\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      var _styles = this.styles();\n\n      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));\n    }\n\n    return this[0].offsetWidth;\n  }\n\n  return null;\n}\n\nfunction height() {\n  var window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n\n  return null;\n}\n\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      var _styles2 = this.styles();\n\n      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));\n    }\n\n    return this[0].offsetHeight;\n  }\n\n  return null;\n}\n\nfunction offset() {\n  if (this.length > 0) {\n    var window = getWindow();\n    var document = getDocument();\n    var el = this[0];\n    var box = el.getBoundingClientRect();\n    var body = document.body;\n    var clientTop = el.clientTop || body.clientTop || 0;\n    var clientLeft = el.clientLeft || body.clientLeft || 0;\n    var scrollTop = el === window ? window.scrollY : el.scrollTop;\n    var scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n\n  return null;\n}\n\nfunction hide() {\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n\n  return this;\n}\n\nfunction show() {\n  var window = getWindow();\n\n  for (var i = 0; i < this.length; i += 1) {\n    var el = this[i];\n\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n\n  return this;\n}\n\nfunction styles() {\n  var window = getWindow();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\n\nfunction css(props, value) {\n  var window = getWindow();\n  var i;\n\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (var _prop in props) {\n          this[i].style[_prop] = props[_prop];\n        }\n      }\n\n      return this;\n    }\n  }\n\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach(function (el, index) {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\n\nfunction filter(callback) {\n  var result = arrayFilter(this, callback);\n  return $(result);\n}\n\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n\n  return this;\n}\n\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n\n  for (var i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n\n  return this;\n}\n\nfunction is(selector) {\n  var window = getWindow();\n  var document = getDocument();\n  var el = this[0];\n  var compareWith;\n  var i;\n  if (!el || typeof selector === 'undefined') return false;\n\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  if (selector === document) {\n    return el === document;\n  }\n\n  if (selector === window) {\n    return el === window;\n  }\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction index() {\n  var child = this[0];\n  var i;\n\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n\n    return i;\n  }\n\n  return undefined;\n}\n\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  var length = this.length;\n\n  if (index > length - 1) {\n    return $([]);\n  }\n\n  if (index < 0) {\n    var returnIndex = length + index;\n    if (returnIndex < 0) return $([]);\n    return $([this[returnIndex]]);\n  }\n\n  return $([this[index]]);\n}\n\nfunction append() {\n  var newChild;\n  var document = getDocument();\n\n  for (var k = 0; k < arguments.length; k += 1) {\n    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];\n\n    for (var i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        var tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (var j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction appendTo(parent) {\n  $(parent).append(this);\n  return this;\n}\n\nfunction prepend(newChild) {\n  var document = getDocument();\n  var i;\n  var j;\n\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      var tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n\n  return this;\n}\n\nfunction prependTo(parent) {\n  $(parent).prepend(this);\n  return this;\n}\n\nfunction insertBefore(selector) {\n  var before = $(selector);\n\n  for (var i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (var j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\n\nfunction insertAfter(selector) {\n  var after = $(selector);\n\n  for (var i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (var j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\n\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction nextAll(selector) {\n  var nextEls = [];\n  var el = this[0];\n  if (!el) return $([]);\n\n  while (el.nextElementSibling) {\n    var _next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(_next).is(selector)) nextEls.push(_next);\n    } else nextEls.push(_next);\n\n    el = _next;\n  }\n\n  return $(nextEls);\n}\n\nfunction prev(selector) {\n  if (this.length > 0) {\n    var el = this[0];\n\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (el.previousElementSibling) return $([el.previousElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction prevAll(selector) {\n  var prevEls = [];\n  var el = this[0];\n  if (!el) return $([]);\n\n  while (el.previousElementSibling) {\n    var _prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(_prev).is(selector)) prevEls.push(_prev);\n    } else prevEls.push(_prev);\n\n    el = _prev;\n  }\n\n  return $(prevEls);\n}\n\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\n\nfunction parent(selector) {\n  var parents = []; // eslint-disable-line\n\n  for (var i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n\n  return $(parents);\n}\n\nfunction parents(selector) {\n  var parents = []; // eslint-disable-line\n\n  for (var i = 0; i < this.length; i += 1) {\n    var _parent = this[i].parentNode; // eslint-disable-line\n\n    while (_parent) {\n      if (selector) {\n        if ($(_parent).is(selector)) parents.push(_parent);\n      } else {\n        parents.push(_parent);\n      }\n\n      _parent = _parent.parentNode;\n    }\n  }\n\n  return $(parents);\n}\n\nfunction closest(selector) {\n  var closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return $([]);\n  }\n\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n\n  return closest;\n}\n\nfunction find(selector) {\n  var foundElements = [];\n\n  for (var i = 0; i < this.length; i += 1) {\n    var found = this[i].querySelectorAll(selector);\n\n    for (var j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n\n  return $(foundElements);\n}\n\nfunction children(selector) {\n  var children = []; // eslint-disable-line\n\n  for (var i = 0; i < this.length; i += 1) {\n    var childNodes = this[i].children;\n\n    for (var j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n\n  return $(children);\n}\n\nfunction remove() {\n  for (var i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n\n  return this;\n}\n\nfunction detach() {\n  return this.remove();\n}\n\nfunction add() {\n  var dom = this;\n  var i;\n  var j;\n\n  for (var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    els[_key10] = arguments[_key10];\n  }\n\n  for (i = 0; i < els.length; i += 1) {\n    var toAdd = $(els[i]);\n\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n\n  return dom;\n}\n\nfunction empty() {\n  for (var i = 0; i < this.length; i += 1) {\n    var el = this[i];\n\n    if (el.nodeType === 1) {\n      for (var j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n\n      el.textContent = '';\n    }\n  }\n\n  return this;\n}\n\nfunction scrollTo() {\n  var window = getWindow();\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var left = args[0],\n      top = args[1],\n      duration = args[2],\n      easing = args[3],\n      callback = args[4];\n\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    left = args[0];\n    top = args[1];\n    duration = args[2];\n    callback = args[3];\n    easing = args[4];\n  }\n\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    var el = this;\n    var currentTop;\n    var currentLeft;\n    var maxTop;\n    var maxLeft;\n    var newTop;\n    var newLeft;\n    var scrollTop; // eslint-disable-line\n\n    var scrollLeft; // eslint-disable-line\n\n    var animateTop = top > 0 || top === 0;\n    var animateLeft = left > 0 || left === 0;\n\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n\n    if (animateTop) {\n      currentTop = el.scrollTop;\n\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n\n    if (!duration) return;\n\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n\n    var startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n    function render(time) {\n      if (time === void 0) {\n        time = new Date().getTime();\n      }\n\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      var done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\n\nfunction scrollTop() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  var top = args[0],\n      duration = args[1],\n      easing = args[2],\n      callback = args[3];\n\n  if (args.length === 3 && typeof easing === 'function') {\n    top = args[0];\n    duration = args[1];\n    callback = args[2];\n    easing = args[3];\n  }\n\n  var dom = this;\n\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\n\nfunction scrollLeft() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  var left = args[0],\n      duration = args[1],\n      easing = args[2],\n      callback = args[3];\n\n  if (args.length === 3 && typeof easing === 'function') {\n    left = args[0];\n    duration = args[1];\n    callback = args[2];\n    easing = args[3];\n  }\n\n  var dom = this;\n\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n}\n\nfunction animate(initialProps, initialParams) {\n  var window = getWindow();\n  var els = this;\n  var a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n    easingProgress: function easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n\n      return progress;\n    },\n    stop: function stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n\n      a.animating = false;\n      a.elements.each(function (el) {\n        var element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n    done: function done(complete) {\n      a.animating = false;\n      a.elements.each(function (el) {\n        var element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n\n      if (a.que.length > 0) {\n        var que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n    animate: function animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n\n      var elements = []; // Define & Cache Initials & Units\n\n      a.elements.each(function (el, index) {\n        var initialFullValue;\n        var initialValue;\n        var unit;\n        var finalValue;\n        var finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(function (prop) {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue: initialFullValue,\n            initialValue: initialValue,\n            unit: unit,\n            finalValue: finalValue,\n            finalFullValue: finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      var startTime = null;\n      var time;\n      var elementsDone = 0;\n      var propsDone = 0;\n      var done;\n      var began = false;\n      a.animating = true;\n\n      function render() {\n        time = new Date().getTime();\n        var progress;\n        var easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n\n        elements.forEach(function (element) {\n          var el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(function (prop) {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            var _el$prop = el[prop],\n                initialValue = _el$prop.initialValue,\n                finalValue = _el$prop.finalValue,\n                unit = _el$prop.unit;\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            var currentValue = el[prop].currentValue;\n\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n  };\n\n  if (a.elements.length === 0) {\n    return els;\n  }\n\n  var animateInstance;\n\n  for (var i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n\n  return els;\n}\n\nfunction stop() {\n  var els = this;\n\n  for (var i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\n\nvar noTrigger = 'resize scroll'.split(' ');\n\nfunction shortcut(name) {\n  function eventHandler() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'undefined') {\n      for (var i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this.on.apply(this, [name].concat(args));\n  }\n\n  return eventHandler;\n}\n\nvar click = shortcut('click');\nvar blur = shortcut('blur');\nvar focus = shortcut('focus');\nvar focusin = shortcut('focusin');\nvar focusout = shortcut('focusout');\nvar keyup = shortcut('keyup');\nvar keydown = shortcut('keydown');\nvar keypress = shortcut('keypress');\nvar submit = shortcut('submit');\nvar change = shortcut('change');\nvar mousedown = shortcut('mousedown');\nvar mousemove = shortcut('mousemove');\nvar mouseup = shortcut('mouseup');\nvar mouseenter = shortcut('mouseenter');\nvar mouseleave = shortcut('mouseleave');\nvar mouseout = shortcut('mouseout');\nvar mouseover = shortcut('mouseover');\nvar touchstart = shortcut('touchstart');\nvar touchend = shortcut('touchend');\nvar touchmove = shortcut('touchmove');\nvar resize = shortcut('resize');\nvar scroll = shortcut('scroll');\n\nexport default $;\nexport { $, add, addClass, animate, animationEnd, append, appendTo, attr, blur, change, children, click, closest, css, data, dataset, detach, each, empty, eq, filter, find, focus, focusin, focusout, hasClass, height, hide, html, index, insertAfter, insertBefore, is, keydown, keypress, keyup, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, next, nextAll, off, offset, on, once, outerHeight, outerWidth, parent, parents, prepend, prependTo, prev, prevAll, prop, remove, removeAttr, removeClass, removeData, resize, scroll, scrollLeft, scrollTo, scrollTop, show, siblings, stop, styles, submit, text, toggleClass, touchend, touchmove, touchstart, transform, transition, transitionEnd, trigger, val, value, width };\n","import { $, addClass, removeClass, hasClass, toggleClass, attr, removeAttr, transform, transition, on, off, trigger, transitionEnd, outerWidth, outerHeight, styles, offset, css, each, html, text, is, index, eq, append, prepend, next, nextAll, prev, prevAll, parent, parents, closest, find, children, filter, remove } from 'dom7';\nvar Methods = {\n  addClass: addClass,\n  removeClass: removeClass,\n  hasClass: hasClass,\n  toggleClass: toggleClass,\n  attr: attr,\n  removeAttr: removeAttr,\n  transform: transform,\n  transition: transition,\n  on: on,\n  off: off,\n  trigger: trigger,\n  transitionEnd: transitionEnd,\n  outerWidth: outerWidth,\n  outerHeight: outerHeight,\n  styles: styles,\n  offset: offset,\n  css: css,\n  each: each,\n  html: html,\n  text: text,\n  is: is,\n  index: index,\n  eq: eq,\n  append: append,\n  prepend: prepend,\n  next: next,\n  nextAll: nextAll,\n  prev: prev,\n  prevAll: prevAll,\n  parent: parent,\n  parents: parents,\n  closest: closest,\n  find: find,\n  children: children,\n  filter: filter,\n  remove: remove\n};\nObject.keys(Methods).forEach(function (methodName) {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nexport default $;","import { getWindow, getDocument } from 'ssr-window';\nvar support;\n\nfunction calcSupport() {\n  var window = getWindow();\n  var document = getDocument();\n  return {\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,\n    observer: function checkObserver() {\n      return 'MutationObserver' in window || 'WebkitMutationObserver' in window;\n    }(),\n    passiveListener: function checkPassiveListener() {\n      var supportsPassive = false;\n\n      try {\n        var opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get: function get() {\n            supportsPassive = true;\n          }\n        });\n        window.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {// No support\n      }\n\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return 'ongesturestart' in window;\n    }()\n  };\n}\n\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n\n  return support;\n}\n\nexport { getSupport };","import { getWindow } from 'ssr-window';\nimport { getSupport } from './get-support';\nvar device;\n\nfunction calcDevice(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      userAgent = _ref.userAgent;\n\n  var support = getSupport();\n  var window = getWindow();\n  var platform = window.navigator.platform;\n  var ua = userAgent || window.navigator.userAgent;\n  var device = {\n    ios: false,\n    android: false\n  };\n  var screenWidth = window.screen.width;\n  var screenHeight = window.screen.height;\n  var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n  var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  var iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  var windows = platform === 'Win32';\n  var macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n  var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + \"x\" + screenHeight) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  } // Android\n\n\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  } // Export object\n\n\n  return device;\n}\n\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n\n  if (!device) {\n    device = calcDevice(overrides);\n  }\n\n  return device;\n}\n\nexport { getDevice };","import { getWindow } from 'ssr-window';\nvar browser;\n\nfunction calcBrowser() {\n  var window = getWindow();\n\n  function isSafari() {\n    var ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n\n  return {\n    isEdge: !!window.navigator.userAgent.match(/Edge/g),\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\n\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n\n  return browser;\n}\n\nexport { getBrowser };","import { getWindow } from 'ssr-window';\n\nfunction deleteProps(obj) {\n  var object = obj;\n  Object.keys(object).forEach(function (key) {\n    try {\n      object[key] = null;\n    } catch (e) {// no getter for object\n    }\n\n    try {\n      delete object[key];\n    } catch (e) {// something got wrong\n    }\n  });\n}\n\nfunction nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return setTimeout(callback, delay);\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction getComputedStyle(el) {\n  var window = getWindow();\n  var style;\n\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n\n  if (!style) {\n    style = el.style;\n  }\n\n  return style;\n}\n\nfunction getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = 'x';\n  }\n\n  var window = getWindow();\n  var matrix;\n  var curTransform;\n  var transformMatrix;\n  var curStyle = getComputedStyle(el, null);\n\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(function (a) {\n        return a.replace(',', '.');\n      }).join(', ');\n    } // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n\n\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n      else curTransform = parseFloat(matrix[4]);\n  }\n\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n      else curTransform = parseFloat(matrix[5]);\n  }\n\n  return curTransform || 0;\n}\n\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction extend() {\n  var to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n  var noExtend = ['__proto__', 'constructor', 'prototype'];\n\n  for (var i = 1; i < arguments.length; i += 1) {\n    var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (nextSource !== undefined && nextSource !== null) {\n      var keysArray = Object.keys(Object(nextSource)).filter(function (key) {\n        return noExtend.indexOf(key) < 0;\n      });\n\n      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        var nextKey = keysArray[nextIndex];\n        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction bindModuleMethods(instance, obj) {\n  Object.keys(obj).forEach(function (key) {\n    if (isObject(obj[key])) {\n      Object.keys(obj[key]).forEach(function (subKey) {\n        if (typeof obj[key][subKey] === 'function') {\n          obj[key][subKey] = obj[key][subKey].bind(instance);\n        }\n      });\n    }\n\n    instance[key] = obj[key];\n  });\n}\n\nfunction classesToSelector(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n\n  return \".\" + classes.trim().replace(/([\\.:\\/])/g, '\\\\$1') // eslint-disable-line\n  .replace(/ /g, '.');\n}\n\nexport { deleteProps, nextTick, now, getTranslate, isObject, extend, bindModuleMethods, getComputedStyle, classesToSelector };","import { getWindow } from 'ssr-window';\nimport { extend } from '../../utils/utils';\n\nvar supportsResizeObserver = function supportsResizeObserver() {\n  var window = getWindow();\n  return typeof window.ResizeObserver !== 'undefined';\n};\n\nexport default {\n  name: 'resize',\n  create: function create() {\n    var swiper = this;\n    extend(swiper, {\n      resize: {\n        observer: null,\n        createObserver: function createObserver() {\n          if (!swiper || swiper.destroyed || !swiper.initialized) return;\n          swiper.resize.observer = new ResizeObserver(function (entries) {\n            var width = swiper.width,\n                height = swiper.height;\n            var newWidth = width;\n            var newHeight = height;\n            entries.forEach(function (_ref) {\n              var contentBoxSize = _ref.contentBoxSize,\n                  contentRect = _ref.contentRect,\n                  target = _ref.target;\n              if (target && target !== swiper.el) return;\n              newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n              newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n            });\n\n            if (newWidth !== width || newHeight !== height) {\n              swiper.resize.resizeHandler();\n            }\n          });\n          swiper.resize.observer.observe(swiper.el);\n        },\n        removeObserver: function removeObserver() {\n          if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {\n            swiper.resize.observer.unobserve(swiper.el);\n            swiper.resize.observer = null;\n          }\n        },\n        resizeHandler: function resizeHandler() {\n          if (!swiper || swiper.destroyed || !swiper.initialized) return;\n          swiper.emit('beforeResize');\n          swiper.emit('resize');\n        },\n        orientationChangeHandler: function orientationChangeHandler() {\n          if (!swiper || swiper.destroyed || !swiper.initialized) return;\n          swiper.emit('orientationchange');\n        }\n      }\n    });\n  },\n  on: {\n    init: function init(swiper) {\n      var window = getWindow();\n\n      if (swiper.params.resizeObserver && supportsResizeObserver()) {\n        swiper.resize.createObserver();\n        return;\n      } // Emit resize\n\n\n      window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange\n\n      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n    },\n    destroy: function destroy(swiper) {\n      var window = getWindow();\n      swiper.resize.removeObserver();\n      window.removeEventListener('resize', swiper.resize.resizeHandler);\n      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n    }\n  }\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { getWindow } from 'ssr-window';\nimport { bindModuleMethods } from '../../utils/utils';\nvar Observer = {\n  attach: function attach(target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var window = getWindow();\n    var swiper = this;\n    var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    var observer = new ObserverFunc(function (mutations) {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        swiper.emit('observerUpdate', mutations[0]);\n        return;\n      }\n\n      var observerUpdate = function observerUpdate() {\n        swiper.emit('observerUpdate', mutations[0]);\n      };\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    swiper.observer.observers.push(observer);\n  },\n  init: function init() {\n    var swiper = this;\n    if (!swiper.support.observer || !swiper.params.observer) return;\n\n    if (swiper.params.observeParents) {\n      var containerParents = swiper.$el.parents();\n\n      for (var i = 0; i < containerParents.length; i += 1) {\n        swiper.observer.attach(containerParents[i]);\n      }\n    } // Observe container\n\n\n    swiper.observer.attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    }); // Observe wrapper\n\n    swiper.observer.attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  },\n  destroy: function destroy() {\n    var swiper = this;\n    swiper.observer.observers.forEach(function (observer) {\n      observer.disconnect();\n    });\n    swiper.observer.observers = [];\n  }\n};\nexport default {\n  name: 'observer',\n  params: {\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  },\n  create: function create() {\n    var swiper = this;\n    bindModuleMethods(swiper, {\n      observer: _extends({}, Observer, {\n        observers: []\n      })\n    });\n  },\n  on: {\n    init: function init(swiper) {\n      swiper.observer.init();\n    },\n    destroy: function destroy(swiper) {\n      swiper.observer.destroy();\n    }\n  }\n};","export default function onResize() {\n  var swiper = this;\n  var params = swiper.params,\n      el = swiper.el;\n  if (el && el.offsetWidth === 0) return; // Breakpoints\n\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  } // Save locks\n\n\n  var allowSlideNext = swiper.allowSlideNext,\n      allowSlidePrev = swiper.allowSlidePrev,\n      snapGrid = swiper.snapGrid; // Disable locks on resize\n\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  } // Return locks after resize\n\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}","import { getDocument } from 'ssr-window';\nimport onTouchStart from './onTouchStart';\nimport onTouchMove from './onTouchMove';\nimport onTouchEnd from './onTouchEnd';\nimport onResize from './onResize';\nimport onClick from './onClick';\nimport onScroll from './onScroll';\nvar dummyEventAttached = false;\n\nfunction dummyEventListener() {}\n\nfunction attachEvents() {\n  var swiper = this;\n  var document = getDocument();\n  var params = swiper.params,\n      touchEvents = swiper.touchEvents,\n      el = swiper.el,\n      wrapperEl = swiper.wrapperEl,\n      device = swiper.device,\n      support = swiper.support;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n\n  swiper.onClick = onClick.bind(swiper);\n  var capture = !!params.nested; // Touch Events\n\n  if (!support.touch && support.pointerEvents) {\n    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);\n    document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);\n    document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    if (support.touch) {\n      var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n      el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n        passive: false,\n        capture: capture\n      } : capture);\n      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n      if (touchEvents.cancel) {\n        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n      }\n\n      if (!dummyEventAttached) {\n        document.addEventListener('touchstart', dummyEventListener);\n        dummyEventAttached = true;\n      }\n    }\n\n    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {\n      el.addEventListener('mousedown', swiper.onTouchStart, false);\n      document.addEventListener('mousemove', swiper.onTouchMove, capture);\n      document.addEventListener('mouseup', swiper.onTouchEnd, false);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el.addEventListener('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl.addEventListener('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  if (params.updateOnWindowResize) {\n    swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper.on('observerUpdate', onResize, true);\n  }\n}\n\nfunction detachEvents() {\n  var swiper = this;\n  var document = getDocument();\n  var params = swiper.params,\n      touchEvents = swiper.touchEvents,\n      el = swiper.el,\n      wrapperEl = swiper.wrapperEl,\n      device = swiper.device,\n      support = swiper.support;\n  var capture = !!params.nested; // Touch Events\n\n  if (!support.touch && support.pointerEvents) {\n    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);\n    document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n    document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    if (support.touch) {\n      var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {\n        passive: true,\n        capture: false\n      } : false;\n      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n      if (touchEvents.cancel) {\n        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n      }\n    }\n\n    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {\n      el.removeEventListener('mousedown', swiper.onTouchStart, false);\n      document.removeEventListener('mousemove', swiper.onTouchMove, capture);\n      document.removeEventListener('mouseup', swiper.onTouchEnd, false);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el.removeEventListener('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl.removeEventListener('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);\n}\n\nexport default {\n  attachEvents: attachEvents,\n  detachEvents: detachEvents\n};","function checkOverflow() {\n  var swiper = this;\n  var params = swiper.params;\n  var wasLocked = swiper.isLocked;\n  var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;\n\n  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {\n    swiper.isLocked = lastSlidePosition <= swiper.size;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  swiper.allowSlideNext = !swiper.isLocked;\n  swiper.allowSlidePrev = !swiper.isLocked; // events\n\n  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n    if (swiper.navigation) swiper.navigation.update();\n  }\n}\n\nexport default {\n  checkOverflow: checkOverflow\n};","export default {\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'container',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: false,\n  nested: false,\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Free mode\n  freeMode: false,\n  freeModeMomentum: true,\n  freeModeMomentumRatio: 1,\n  freeModeMomentumBounce: true,\n  freeModeMomentumBounceRatio: 1,\n  freeModeMomentumVelocityRatio: 1,\n  freeModeSticky: false,\n  freeModeMinimumVelocity: 0.02,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerColumn: 1,\n  slidesPerColumnFill: 'column',\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: false,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  watchSlidesVisibility: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  // NS\n  containerModifierClass: 'swiper-container-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* eslint no-param-reassign: \"off\" */\nimport $ from '../../utils/dom';\nimport { extend, now, deleteProps } from '../../utils/utils';\nimport { getSupport } from '../../utils/get-support';\nimport { getDevice } from '../../utils/get-device';\nimport { getBrowser } from '../../utils/get-browser';\nimport Resize from '../../modules/resize/resize';\nimport Observer from '../../modules/observer/observer';\nimport modular from './modular';\nimport eventsEmitter from './events-emitter';\nimport update from './update/index';\nimport translate from './translate/index';\nimport transition from './transition/index';\nimport slide from './slide/index';\nimport loop from './loop/index';\nimport grabCursor from './grab-cursor/index';\nimport manipulation from './manipulation/index';\nimport events from './events/index';\nimport breakpoints from './breakpoints/index';\nimport classes from './classes/index';\nimport images from './images/index';\nimport checkOverflow from './check-overflow/index';\nimport defaults from './defaults';\nvar prototypes = {\n  modular: modular,\n  eventsEmitter: eventsEmitter,\n  update: update,\n  translate: translate,\n  transition: transition,\n  slide: slide,\n  loop: loop,\n  grabCursor: grabCursor,\n  manipulation: manipulation,\n  events: events,\n  breakpoints: breakpoints,\n  checkOverflow: checkOverflow,\n  classes: classes,\n  images: images\n};\nvar extendedDefaults = {};\n\nvar Swiper = /*#__PURE__*/function () {\n  function Swiper() {\n    var el;\n    var params;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      el = args[0];\n      params = args[1];\n    }\n\n    if (!params) params = {};\n    params = extend({}, params);\n    if (el && !params.el) params.el = el;\n\n    if (params.el && $(params.el).length > 1) {\n      var swipers = [];\n      $(params.el).each(function (containerEl) {\n        var newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    } // Swiper Instance\n\n\n    var swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n\n    if (typeof swiper.modules === 'undefined') {\n      swiper.modules = {};\n    }\n\n    Object.keys(swiper.modules).forEach(function (moduleName) {\n      var module = swiper.modules[moduleName];\n\n      if (module.params) {\n        var moduleParamName = Object.keys(module.params)[0];\n        var moduleParams = module.params[moduleParamName];\n        if (typeof moduleParams !== 'object' || moduleParams === null) return;\n        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;\n\n        if (params[moduleParamName] === true) {\n          params[moduleParamName] = {\n            enabled: true\n          };\n        }\n\n        if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n          params[moduleParamName].enabled = true;\n        }\n\n        if (!params[moduleParamName]) params[moduleParamName] = {\n          enabled: false\n        };\n      }\n    }); // Extend defaults with modules params\n\n    var swiperParams = extend({}, defaults);\n    swiper.useParams(swiperParams); // Extend defaults with passed params\n\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params); // add event listeners\n\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(function (eventName) {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    } // Save Dom lib\n\n\n    swiper.$ = $; // Extend Swiper\n\n    extend(swiper, {\n      el: el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: $(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      // isDirection\n      isHorizontal: function isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n      isVertical: function isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        var desktop = ['mousedown', 'mousemove', 'mouseup'];\n\n        if (swiper.support.pointerEvents) {\n          desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        }\n\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        formElements: 'input, select, option, textarea, button, video, label',\n        // Last click time\n        lastClickTime: now(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    }); // Install Modules\n\n    swiper.useModules();\n    swiper.emit('_swiper'); // Init\n\n    if (swiper.params.init) {\n      swiper.init();\n    } // Return app instance\n\n\n    return swiper;\n  }\n\n  var _proto = Swiper.prototype;\n\n  _proto.setProgress = function setProgress(progress, speed) {\n    var swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    var min = swiper.minTranslate();\n    var max = swiper.maxTranslate();\n    var current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  };\n\n  _proto.emitContainerClasses = function emitContainerClasses() {\n    var swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    var classes = swiper.el.className.split(' ').filter(function (className) {\n      return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', classes.join(' '));\n  };\n\n  _proto.getSlideClasses = function getSlideClasses(slideEl) {\n    var swiper = this;\n    return slideEl.className.split(' ').filter(function (className) {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  };\n\n  _proto.emitSlidesClasses = function emitSlidesClasses() {\n    var swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    var updates = [];\n    swiper.slides.each(function (slideEl) {\n      var classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl: slideEl,\n        classNames: classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  };\n\n  _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {\n    var swiper = this;\n    var params = swiper.params,\n        slides = swiper.slides,\n        slidesGrid = swiper.slidesGrid,\n        swiperSize = swiper.size,\n        activeIndex = swiper.activeIndex;\n    var spv = 1;\n\n    if (params.centeredSlides) {\n      var slideSize = slides[activeIndex].swiperSlideSize;\n      var breakLoop;\n\n      for (var i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n\n      for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {\n        if (slides[_i] && !breakLoop) {\n          slideSize += slides[_i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {\n        if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {\n          spv += 1;\n        }\n      }\n    }\n\n    return spv;\n  };\n\n  _proto.update = function update() {\n    var swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    var snapGrid = swiper.snapGrid,\n        params = swiper.params; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    var translated;\n\n    if (swiper.params.freeMode) {\n      setTranslate();\n\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n\n      if (!translated) {\n        setTranslate();\n      }\n    }\n\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n\n    swiper.emit('update');\n  };\n\n  _proto.changeDirection = function changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n\n    var swiper = this;\n    var currentDirection = swiper.params.direction;\n\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n\n    swiper.$el.removeClass(\"\" + swiper.params.containerModifierClass + currentDirection).addClass(\"\" + swiper.params.containerModifierClass + newDirection);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each(function (slideEl) {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  };\n\n  _proto.mount = function mount(el) {\n    var swiper = this;\n    if (swiper.mounted) return true; // Find el\n\n    var $el = $(el || swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return false;\n    }\n\n    el.swiper = swiper; // Find Wrapper\n\n    var $wrapperEl;\n\n    if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n      $wrapperEl = $(el.shadowRoot.querySelector(\".\" + swiper.params.wrapperClass)); // Children needs to return slot items\n\n      $wrapperEl.children = function (options) {\n        return $el.children(options);\n      };\n    } else {\n      $wrapperEl = $el.children(\".\" + swiper.params.wrapperClass);\n    }\n\n    extend(swiper, {\n      $el: $el,\n      el: el,\n      $wrapperEl: $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n    });\n    return true;\n  };\n\n  _proto.init = function init(el) {\n    var swiper = this;\n    if (swiper.initialized) return swiper;\n    var mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit'); // Set breakpoint\n\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Add Classes\n\n\n    swiper.addClasses(); // Create loop\n\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    } // Update size\n\n\n    swiper.updateSize(); // Update slides\n\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    } // Set Grab Cursor\n\n\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    } // Slide To Initial Slide\n\n\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);\n    } // Attach events\n\n\n    swiper.attachEvents(); // Init Flag\n\n    swiper.initialized = true; // Emit\n\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  };\n\n  _proto.destroy = function destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n\n    var swiper = this;\n    var params = swiper.params,\n        $el = swiper.$el,\n        $wrapperEl = swiper.$wrapperEl,\n        slides = swiper.slides;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy'); // Init Flag\n\n    swiper.initialized = false; // Detach events\n\n    swiper.detachEvents(); // Destroy loop\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    } // Cleanup styles\n\n\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy'); // Detach emitter events\n\n    Object.keys(swiper.eventsListeners).forEach(function (eventName) {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n\n    swiper.destroyed = true;\n    return null;\n  };\n\n  Swiper.extendDefaults = function extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  };\n\n  Swiper.installModule = function installModule(module) {\n    if (!Swiper.prototype.modules) Swiper.prototype.modules = {};\n    var name = module.name || Object.keys(Swiper.prototype.modules).length + \"_\" + now();\n    Swiper.prototype.modules[name] = module;\n  };\n\n  Swiper.use = function use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(function (m) {\n        return Swiper.installModule(m);\n      });\n      return Swiper;\n    }\n\n    Swiper.installModule(module);\n    return Swiper;\n  };\n\n  _createClass(Swiper, null, [{\n    key: \"extendedDefaults\",\n    get: function get() {\n      return extendedDefaults;\n    }\n  }, {\n    key: \"defaults\",\n    get: function get() {\n      return defaults;\n    }\n  }]);\n\n  return Swiper;\n}();\n\nObject.keys(prototypes).forEach(function (prototypeGroup) {\n  Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nexport default Swiper;","import { extend } from '../../utils/utils';\nexport default {\n  useParams: function useParams(instanceParams) {\n    var instance = this;\n    if (!instance.modules) return;\n    Object.keys(instance.modules).forEach(function (moduleName) {\n      var module = instance.modules[moduleName]; // Extend params\n\n      if (module.params) {\n        extend(instanceParams, module.params);\n      }\n    });\n  },\n  useModules: function useModules(modulesParams) {\n    if (modulesParams === void 0) {\n      modulesParams = {};\n    }\n\n    var instance = this;\n    if (!instance.modules) return;\n    Object.keys(instance.modules).forEach(function (moduleName) {\n      var module = instance.modules[moduleName];\n      var moduleParams = modulesParams[moduleName] || {}; // Add event listeners\n\n      if (module.on && instance.on) {\n        Object.keys(module.on).forEach(function (moduleEventName) {\n          instance.on(moduleEventName, module.on[moduleEventName]);\n        });\n      } // Module create callback\n\n\n      if (module.create) {\n        module.create.bind(instance)(moduleParams);\n      }\n    });\n  }\n};","/* eslint-disable no-underscore-dangle */\nexport default {\n  on: function on(events, handler, priority) {\n    var self = this;\n    if (typeof handler !== 'function') return self;\n    var method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(function (event) {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n  once: function once(events, handler, priority) {\n    var self = this;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler() {\n      self.off(events, onceHandler);\n\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(self, args);\n    }\n\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n  onAny: function onAny(handler, priority) {\n    var self = this;\n    if (typeof handler !== 'function') return self;\n    var method = priority ? 'unshift' : 'push';\n\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n\n    return self;\n  },\n  offAny: function offAny(handler) {\n    var self = this;\n    if (!self.eventsAnyListeners) return self;\n    var index = self.eventsAnyListeners.indexOf(handler);\n\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n\n    return self;\n  },\n  off: function off(events, handler) {\n    var self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(function (event) {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(function (eventHandler, index) {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit: function emit() {\n    var self = this;\n    if (!self.eventsListeners) return self;\n    var events;\n    var data;\n    var context;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n\n    data.unshift(context);\n    var eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(function (event) {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(function (eventHandler) {\n          eventHandler.apply(context, [event].concat(data));\n        });\n      }\n\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(function (eventHandler) {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};","import updateSize from './updateSize';\nimport updateSlides from './updateSlides';\nimport updateAutoHeight from './updateAutoHeight';\nimport updateSlidesOffset from './updateSlidesOffset';\nimport updateSlidesProgress from './updateSlidesProgress';\nimport updateProgress from './updateProgress';\nimport updateSlidesClasses from './updateSlidesClasses';\nimport updateActiveIndex from './updateActiveIndex';\nimport updateClickedSlide from './updateClickedSlide';\nexport default {\n  updateSize: updateSize,\n  updateSlides: updateSlides,\n  updateAutoHeight: updateAutoHeight,\n  updateSlidesOffset: updateSlidesOffset,\n  updateSlidesProgress: updateSlidesProgress,\n  updateProgress: updateProgress,\n  updateSlidesClasses: updateSlidesClasses,\n  updateActiveIndex: updateActiveIndex,\n  updateClickedSlide: updateClickedSlide\n};","import { extend } from '../../../utils/utils';\nexport default function updateSize() {\n  var swiper = this;\n  var width;\n  var height;\n  var $el = swiper.$el;\n\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  } // Subtract paddings\n\n\n  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  extend(swiper, {\n    width: width,\n    height: height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}","import { extend } from '../../../utils/utils';\nexport default function updateSlides() {\n  var swiper = this;\n\n  var getDirectionLabel = function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  };\n\n  var getDirectionPropertyValue = function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  };\n\n  var params = swiper.params;\n  var $wrapperEl = swiper.$wrapperEl,\n      swiperSize = swiper.size,\n      rtl = swiper.rtlTranslate,\n      wrongRTL = swiper.wrongRTL;\n  var isVirtual = swiper.virtual && params.virtual.enabled;\n  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  var slides = $wrapperEl.children(\".\" + swiper.params.slideClass);\n  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  var snapGrid = [];\n  var slidesGrid = [];\n  var slidesSizesGrid = [];\n\n  function slidesForMargin(slideEl, slideIndex) {\n    if (!params.cssMode) return true;\n\n    if (slideIndex === slides.length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  var offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  var offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  var previousSnapGridLength = swiper.snapGrid.length;\n  var previousSlidesGridLength = swiper.slidesGrid.length;\n  var spaceBetween = params.spaceBetween;\n  var slidePosition = -offsetBefore;\n  var prevSlideSize = 0;\n  var index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: ''\n  });\n  var slidesNumberEvenToRows;\n\n  if (params.slidesPerColumn > 1) {\n    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;\n    }\n\n    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);\n    }\n  } // Calc slides\n\n\n  var slideSize;\n  var slidesPerColumn = params.slidesPerColumn;\n  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);\n\n  for (var i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    var slide = slides.eq(i);\n\n    if (params.slidesPerColumn > 1) {\n      // Set slides order\n      var newSlideOrderIndex = void 0;\n      var column = void 0;\n      var row = void 0;\n\n      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {\n        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));\n        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;\n        var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\n        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;\n        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;\n        slide.css({\n          '-webkit-box-ordinal-group': newSlideOrderIndex,\n          '-moz-box-ordinal-group': newSlideOrderIndex,\n          '-ms-flex-order': newSlideOrderIndex,\n          '-webkit-order': newSlideOrderIndex,\n          order: newSlideOrderIndex\n        });\n      } else if (params.slidesPerColumnFill === 'column') {\n        column = Math.floor(i / slidesPerColumn);\n        row = i - column * slidesPerColumn;\n\n        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {\n          row += 1;\n\n          if (row >= slidesPerColumn) {\n            row = 0;\n            column += 1;\n          }\n        }\n      } else {\n        row = Math.floor(i / slidesPerRow);\n        column = i - row * slidesPerRow;\n      }\n\n      slide.css(getDirectionLabel('margin-top'), row !== 0 && params.spaceBetween && params.spaceBetween + \"px\");\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      var slideStyles = getComputedStyle(slide[0]);\n      var currentTransform = slide[0].style.transform;\n      var currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        var width = getDirectionPropertyValue(slideStyles, 'width');\n        var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        var boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          var _slide$ = slide[0],\n              clientWidth = _slide$.clientWidth,\n              offsetWidth = _slide$.offsetWidth;\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = slideSize + \"px\";\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  var newSlidesGrid;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: swiper.virtualSize + params.spaceBetween + \"px\"\n    });\n  }\n\n  if (params.setWrapperSize) {\n    var _$wrapperEl$css;\n\n    $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + \"px\", _$wrapperEl$css));\n  }\n\n  if (params.slidesPerColumn > 1) {\n    var _$wrapperEl$css2;\n\n    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;\n    $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + \"px\", _$wrapperEl$css2));\n\n    if (params.centeredSlides) {\n      newSlidesGrid = [];\n\n      for (var _i = 0; _i < snapGrid.length; _i += 1) {\n        var slidesGridItem = snapGrid[_i];\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid = newSlidesGrid;\n    }\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    newSlidesGrid = [];\n\n    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {\n      var _slidesGridItem = snapGrid[_i2];\n      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);\n\n      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(_slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    var _slides$filter$css;\n\n    var key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter(slidesForMargin).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + \"px\", _slides$filter$css));\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    var allSlidesSize = 0;\n    slidesSizesGrid.forEach(function (slideSizeValue) {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    var maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(function (snap) {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    var _allSlidesSize = 0;\n    slidesSizesGrid.forEach(function (slideSizeValue) {\n      _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    _allSlidesSize -= params.spaceBetween;\n\n    if (_allSlidesSize < swiperSize) {\n      var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;\n      snapGrid.forEach(function (snap, snapIndex) {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach(function (snap, snapIndex) {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  extend(swiper, {\n    slides: slides,\n    snapGrid: snapGrid,\n    slidesGrid: slidesGrid,\n    slidesSizesGrid: slidesSizesGrid\n  });\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateSlidesOffset();\n  }\n}","export default function updateAutoHeight(speed) {\n  var swiper = this;\n  var activeSlides = [];\n  var newHeight = 0;\n  var i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  } // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      swiper.visibleSlides.each(function (slide) {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        var index = swiper.activeIndex + i;\n        if (index > swiper.slides.length) break;\n        activeSlides.push(swiper.slides.eq(index)[0]);\n      }\n    }\n  } else {\n    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      var height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight) swiper.$wrapperEl.css('height', newHeight + \"px\");\n}","export default function updateSlidesOffset() {\n  var swiper = this;\n  var slides = swiper.slides;\n\n  for (var i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}","import $ from '../../../utils/dom';\nexport default function updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n\n  var swiper = this;\n  var params = swiper.params;\n  var slides = swiper.slides,\n      rtl = swiper.rtlTranslate;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  var offsetCenter = -translate;\n  if (rtl) offsetCenter = translate; // Visible Slides\n\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (var i = 0; i < slides.length; i += 1) {\n    var slide = slides[i];\n    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n\n    if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {\n      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);\n      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n      if (isVisible) {\n        swiper.visibleSlides.push(slide);\n        swiper.visibleSlidesIndexes.push(i);\n        slides.eq(i).addClass(params.slideVisibleClass);\n      }\n    }\n\n    slide.progress = rtl ? -slideProgress : slideProgress;\n  }\n\n  swiper.visibleSlides = $(swiper.visibleSlides);\n}","import { extend } from '../../../utils/utils';\nexport default function updateProgress(translate) {\n  var swiper = this;\n\n  if (typeof translate === 'undefined') {\n    var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  var params = swiper.params;\n  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  var progress = swiper.progress,\n      isBeginning = swiper.isBeginning,\n      isEnd = swiper.isEnd;\n  var wasBeginning = isBeginning;\n  var wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  extend(swiper, {\n    progress: progress,\n    isBeginning: isBeginning,\n    isEnd: isEnd\n  });\n  if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}","export default function updateSlidesClasses() {\n  var swiper = this;\n  var slides = swiper.slides,\n      params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl,\n      activeIndex = swiper.activeIndex,\n      realIndex = swiper.realIndex;\n  var isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(params.slideActiveClass + \" \" + params.slideNextClass + \" \" + params.slidePrevClass + \" \" + params.slideDuplicateActiveClass + \" \" + params.slideDuplicateNextClass + \" \" + params.slideDuplicatePrevClass);\n  var activeSlide;\n\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + activeIndex + \"\\\"]\");\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  } // Active classes\n\n\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]\").addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]\").addClass(params.slideDuplicateActiveClass);\n    }\n  } // Next Slide\n\n\n  var nextSlide = activeSlide.nextAll(\".\" + params.slideClass).eq(0).addClass(params.slideNextClass);\n\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  } // Prev Slide\n\n\n  var prevSlide = activeSlide.prevAll(\".\" + params.slideClass).eq(0).addClass(params.slidePrevClass);\n\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + nextSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + nextSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicateNextClass);\n    }\n\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + prevSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + prevSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicatePrevClass);\n    }\n  }\n\n  swiper.emitSlidesClasses();\n}","import { extend } from '../../../utils/utils';\nexport default function updateActiveIndex(newActiveIndex) {\n  var swiper = this;\n  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  var slidesGrid = swiper.slidesGrid,\n      snapGrid = swiper.snapGrid,\n      params = swiper.params,\n      previousIndex = swiper.activeIndex,\n      previousRealIndex = swiper.realIndex,\n      previousSnapIndex = swiper.snapIndex;\n  var activeIndex = newActiveIndex;\n  var snapIndex;\n\n  if (typeof activeIndex === 'undefined') {\n    for (var i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    } // Normalize slideIndex\n\n\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    var skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n\n    return;\n  } // Get real index\n\n\n  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n  extend(swiper, {\n    snapIndex: snapIndex,\n    realIndex: realIndex,\n    previousIndex: previousIndex,\n    activeIndex: activeIndex\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}","import $ from '../../../utils/dom';\nexport default function updateClickedSlide(e) {\n  var swiper = this;\n  var params = swiper.params;\n  var slide = $(e.target).closest(\".\" + params.slideClass)[0];\n  var slideFound = false;\n  var slideIndex;\n\n  if (slide) {\n    for (var i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}","import getTranslate from './getTranslate';\nimport setTranslate from './setTranslate';\nimport minTranslate from './minTranslate';\nimport maxTranslate from './maxTranslate';\nimport translateTo from './translateTo';\nexport default {\n  getTranslate: getTranslate,\n  setTranslate: setTranslate,\n  minTranslate: minTranslate,\n  maxTranslate: maxTranslate,\n  translateTo: translateTo\n};","import { getTranslate } from '../../../utils/utils';\nexport default function getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? 'x' : 'y';\n  }\n\n  var swiper = this;\n  var params = swiper.params,\n      rtl = swiper.rtlTranslate,\n      translate = swiper.translate,\n      $wrapperEl = swiper.$wrapperEl;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n\n  if (params.cssMode) {\n    return translate;\n  }\n\n  var currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}","export default function setTranslate(translate, byController) {\n  var swiper = this;\n  var rtl = swiper.rtlTranslate,\n      params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl,\n      wrapperEl = swiper.wrapperEl,\n      progress = swiper.progress;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(\"translate3d(\" + x + \"px, \" + y + \"px, \" + z + \"px)\");\n  }\n\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n  var newProgress;\n  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}","export default function minTranslate() {\n  return -this.snapGrid[0];\n}","export default function maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}","export default function translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n\n  var swiper = this;\n  var params = swiper.params,\n      wrapperEl = swiper.wrapperEl;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  var minTranslate = swiper.minTranslate();\n  var maxTranslate = swiper.maxTranslate();\n  var newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    var isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      // eslint-disable-next-line\n      if (wrapperEl.scrollTo) {\n        var _wrapperEl$scrollTo;\n\n        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n      }\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}","import setTransition from './setTransition';\nimport transitionStart from './transitionStart';\nimport transitionEnd from './transitionEnd';\nexport default {\n  setTransition: setTransition,\n  transitionStart: transitionStart,\n  transitionEnd: transitionEnd\n};","export default function setTransition(duration, byController) {\n  var swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}","export default function transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  var activeIndex = swiper.activeIndex,\n      params = swiper.params,\n      previousIndex = swiper.previousIndex;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  var dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit('transitionStart');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionStart');\n      return;\n    }\n\n    swiper.emit('slideChangeTransitionStart');\n\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionStart');\n    } else {\n      swiper.emit('slidePrevTransitionStart');\n    }\n  }\n}","export default function transitionEnd(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  var activeIndex = swiper.activeIndex,\n      previousIndex = swiper.previousIndex,\n      params = swiper.params;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  var dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit('transitionEnd');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionEnd');\n      return;\n    }\n\n    swiper.emit('slideChangeTransitionEnd');\n\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionEnd');\n    } else {\n      swiper.emit('slidePrevTransitionEnd');\n    }\n  }\n}","import slideTo from './slideTo';\nimport slideToLoop from './slideToLoop';\nimport slideNext from './slideNext';\nimport slidePrev from './slidePrev';\nimport slideReset from './slideReset';\nimport slideToClosest from './slideToClosest';\nimport slideToClickedSlide from './slideToClickedSlide';\nexport default {\n  slideTo: slideTo,\n  slideToLoop: slideToLoop,\n  slideNext: slideNext,\n  slidePrev: slidePrev,\n  slideReset: slideReset,\n  slideToClosest: slideToClosest,\n  slideToClickedSlide: slideToClickedSlide\n};","export default function slideTo(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\" + typeof index + \"] given.\");\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    var indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    var isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\" + index + \"] given.\");\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  var swiper = this;\n  var slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  var params = swiper.params,\n      snapGrid = swiper.snapGrid,\n      slidesGrid = swiper.slidesGrid,\n      previousIndex = swiper.previousIndex,\n      activeIndex = swiper.activeIndex,\n      rtl = swiper.rtlTranslate,\n      wrapperEl = swiper.wrapperEl;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  var translate = -snapGrid[snapIndex]; // Update progress\n\n  swiper.updateProgress(translate); // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (var i = 0; i < slidesGrid.length; i += 1) {\n      var normalizedTranslate = -Math.floor(translate * 100);\n      var normalizedGird = Math.floor(slidesGrid[i] * 100);\n      var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGird) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  var direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    var isH = swiper.isHorizontal();\n    var t = -translate;\n\n    if (rtl) {\n      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;\n    }\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n    } else {\n      // eslint-disable-next-line\n      if (wrapperEl.scrollTo) {\n        var _wrapperEl$scrollTo;\n\n        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n      }\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit('beforeTransitionStart', speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    swiper.transitionEnd(runCallbacks, direction);\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit('beforeTransitionStart', speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onSlideToWrapperTransitionEnd) {\n        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n          swiper.onSlideToWrapperTransitionEnd = null;\n          delete swiper.onSlideToWrapperTransitionEnd;\n          swiper.transitionEnd(runCallbacks, direction);\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}","export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  var newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  var params = swiper.params,\n      animating = swiper.animating;\n  var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  var params = swiper.params,\n      animating = swiper.animating,\n      snapGrid = swiper.snapGrid,\n      slidesGrid = swiper.slidesGrid,\n      rtlTranslate = swiper.rtlTranslate;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  var translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n\n  var normalizedTranslate = normalize(translate);\n  var normalizedSnapGrid = snapGrid.map(function (val) {\n    return normalize(val);\n  });\n  var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];\n  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    snapGrid.forEach(function (snap) {\n      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;\n    });\n  }\n\n  var prevIndex;\n\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n  }\n\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  var swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n\n  var swiper = this;\n  var index = swiper.activeIndex;\n  var skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    var currentSnap = swiper.snapGrid[snapIndex];\n    var nextSnap = swiper.snapGrid[snapIndex + 1];\n\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    var prevSnap = swiper.snapGrid[snapIndex - 1];\n    var _currentSnap = swiper.snapGrid[snapIndex];\n\n    if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}","import $ from '../../../utils/dom';\nimport { nextTick } from '../../../utils/utils';\nexport default function slideToClickedSlide() {\n  var swiper = this;\n  var params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl;\n  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  var slideToIndex = swiper.clickedIndex;\n  var realIndex;\n\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]:not(.\" + params.slideDuplicateClass + \")\").eq(0).index();\n        nextTick(function () {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]:not(.\" + params.slideDuplicateClass + \")\").eq(0).index();\n      nextTick(function () {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}","import loopCreate from './loopCreate';\nimport loopFix from './loopFix';\nimport loopDestroy from './loopDestroy';\nexport default {\n  loopCreate: loopCreate,\n  loopFix: loopFix,\n  loopDestroy: loopDestroy\n};","import { getDocument } from 'ssr-window';\nimport $ from '../../../utils/dom';\nexport default function loopCreate() {\n  var swiper = this;\n  var document = getDocument();\n  var params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides\n\n  $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass).remove();\n  var slides = $wrapperEl.children(\".\" + params.slideClass);\n\n  if (params.loopFillGroupWithBlank) {\n    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (var i = 0; i < blankSlidesNum; i += 1) {\n        var blankNode = $(document.createElement('div')).addClass(params.slideClass + \" \" + params.slideBlankClass);\n        $wrapperEl.append(blankNode);\n      }\n\n      slides = $wrapperEl.children(\".\" + params.slideClass);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  var prependSlides = [];\n  var appendSlides = [];\n  slides.each(function (el, index) {\n    var slide = $(el);\n\n    if (index < swiper.loopedSlides) {\n      appendSlides.push(el);\n    }\n\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n      prependSlides.push(el);\n    }\n\n    slide.attr('data-swiper-slide-index', index);\n  });\n\n  for (var _i = 0; _i < appendSlides.length; _i += 1) {\n    $wrapperEl.append($(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n\n  for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {\n    $wrapperEl.prepend($(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}","export default function loopFix() {\n  var swiper = this;\n  swiper.emit('beforeLoopFix');\n  var activeIndex = swiper.activeIndex,\n      slides = swiper.slides,\n      loopedSlides = swiper.loopedSlides,\n      allowSlidePrev = swiper.allowSlidePrev,\n      allowSlideNext = swiper.allowSlideNext,\n      snapGrid = swiper.snapGrid,\n      rtl = swiper.rtlTranslate;\n  var newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  var snapTranslate = -snapGrid[activeIndex];\n  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    var slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n\n    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (_slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit('loopFix');\n}","export default function loopDestroy() {\n  var swiper = this;\n  var $wrapperEl = swiper.$wrapperEl,\n      params = swiper.params,\n      slides = swiper.slides;\n  $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \",.\" + params.slideClass + \".\" + params.slideBlankClass).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}","import setGrabCursor from './setGrabCursor';\nimport unsetGrabCursor from './unsetGrabCursor';\nexport default {\n  setGrabCursor: setGrabCursor,\n  unsetGrabCursor: unsetGrabCursor\n};","export default function setGrabCursor(moving) {\n  var swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  var el = swiper.el;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}","export default function unsetGrabCursor() {\n  var swiper = this;\n\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n\n  swiper.el.style.cursor = '';\n}","import appendSlide from './appendSlide';\nimport prependSlide from './prependSlide';\nimport addSlide from './addSlide';\nimport removeSlide from './removeSlide';\nimport removeAllSlides from './removeAllSlides';\nexport default {\n  appendSlide: appendSlide,\n  prependSlide: prependSlide,\n  addSlide: addSlide,\n  removeSlide: removeSlide,\n  removeAllSlides: removeAllSlides\n};","export default function appendSlide(slides) {\n  var swiper = this;\n  var $wrapperEl = swiper.$wrapperEl,\n      params = swiper.params;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (var i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!(params.observer && swiper.support.observer)) {\n    swiper.update();\n  }\n}","export default function prependSlide(slides) {\n  var swiper = this;\n  var params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl,\n      activeIndex = swiper.activeIndex;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  var newActiveIndex = activeIndex + 1;\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (var i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.prepend(slides[i]);\n    }\n\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!(params.observer && swiper.support.observer)) {\n    swiper.update();\n  }\n\n  swiper.slideTo(newActiveIndex, 0, false);\n}","export default function addSlide(index, slides) {\n  var swiper = this;\n  var $wrapperEl = swiper.$wrapperEl,\n      params = swiper.params,\n      activeIndex = swiper.activeIndex;\n  var activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(\".\" + params.slideClass);\n  }\n\n  var baseLength = swiper.slides.length;\n\n  if (index <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n\n  if (index >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n\n  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n  var slidesBuffer = [];\n\n  for (var i = baseLength - 1; i >= index; i -= 1) {\n    var currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (var _i = 0; _i < slides.length; _i += 1) {\n      if (slides[_i]) $wrapperEl.append(slides[_i]);\n    }\n\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {\n    $wrapperEl.append(slidesBuffer[_i2]);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!(params.observer && swiper.support.observer)) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","export default function removeSlide(slidesIndexes) {\n  var swiper = this;\n  var params = swiper.params,\n      $wrapperEl = swiper.$wrapperEl,\n      activeIndex = swiper.activeIndex;\n  var activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(\".\" + params.slideClass);\n  }\n\n  var newActiveIndex = activeIndexBuffer;\n  var indexToRemove;\n\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n    for (var i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    }\n\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!(params.observer && swiper.support.observer)) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","export default function removeAllSlides() {\n  var swiper = this;\n  var slidesIndexes = [];\n\n  for (var i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n\n  swiper.removeSlide(slidesIndexes);\n}","import { getWindow, getDocument } from 'ssr-window';\nimport $ from '../../../utils/dom';\nimport { extend, now } from '../../../utils/utils';\nexport default function onTouchStart(event) {\n  var swiper = this;\n  var document = getDocument();\n  var window = getWindow();\n  var data = swiper.touchEventsData;\n  var params = swiper.params,\n      touches = swiper.touches;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n\n  var e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  var $targetEl = $(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return; // change target el for shadow root componenet\n\n  var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n    $targetEl = $(event.path[0]);\n  }\n\n  if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : \".\" + params.noSwipingClass)[0]) {\n    swiper.allowClick = true;\n    return;\n  }\n\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  var startX = touches.currentX;\n  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n\n  extend(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n\n  if (e.type !== 'touchstart') {\n    var preventDefault = true;\n    if ($targetEl.is(data.formElements)) preventDefault = false;\n\n    if (document.activeElement && $(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {\n      document.activeElement.blur();\n    }\n\n    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n\n  swiper.emit('touchStart', e);\n}","import { getDocument } from 'ssr-window';\nimport $ from '../../../utils/dom';\nimport { extend, now } from '../../../utils/utils';\nexport default function onTouchMove(event) {\n  var document = getDocument();\n  var swiper = this;\n  var data = swiper.touchEventsData;\n  var params = swiper.params,\n      touches = swiper.touches,\n      rtl = swiper.rtlTranslate;\n  var e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n\n  if (!swiper.allowTouchMove) {\n    // isMoved = true;\n    swiper.allowClick = false;\n\n    if (data.isTouched) {\n      extend(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n\n  if (data.isTouchEvent && document.activeElement) {\n    if (e.target === document.activeElement && $(e.target).is(data.formElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  var diffX = touches.currentX - touches.startX;\n  var diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    var touchAngle;\n\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n\n  if (!data.startMoving) {\n    return;\n  }\n\n  swiper.allowClick = false;\n\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop) {\n      swiper.loopFix();\n    }\n\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n\n    data.allowMomentumBounce = false; // Grab Cursor\n\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n\n    swiper.emit('sliderFirstMove', e);\n  }\n\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  var diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n  var disableParentSwiper = true;\n  var resistanceRatio = params.resistanceRatio;\n\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  } // Directions locks\n\n\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  } // Threshold\n\n\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  if (params.freeMode) {\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  } // Update progress\n\n\n  swiper.updateProgress(data.currentTranslate); // Update translate\n\n  swiper.setTranslate(data.currentTranslate);\n}","import { now, nextTick } from '../../../utils/utils';\nexport default function onTouchEnd(event) {\n  var swiper = this;\n  var data = swiper.touchEventsData;\n  var params = swiper.params,\n      touches = swiper.touches,\n      rtl = swiper.rtlTranslate,\n      $wrapperEl = swiper.$wrapperEl,\n      slidesGrid = swiper.slidesGrid,\n      snapGrid = swiper.snapGrid;\n  var e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  var touchEndTime = now();\n  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    swiper.updateClickedSlide(e);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(function () {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  var currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (params.freeMode) {\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeModeMomentum) {\n      if (data.velocities.length > 1) {\n        var lastMoveEvent = data.velocities.pop();\n        var velocityEvent = data.velocities.pop();\n        var distance = lastMoveEvent.position - velocityEvent.position;\n        var time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeModeMomentumVelocityRatio;\n      data.velocities.length = 0;\n      var momentumDuration = 1000 * params.freeModeMomentumRatio;\n      var momentumDistance = swiper.velocity * momentumDuration;\n      var newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      var doBounce = false;\n      var afterBouncePosition;\n      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;\n      var needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeModeMomentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeModeMomentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeModeSticky) {\n        var nextSlide;\n\n        for (var j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        swiper.once('transitionEnd', function () {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeModeSticky) {\n          // If freeModeSticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeModeSticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeModeMomentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(function () {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          swiper.emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(function () {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(function () {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(function () {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeModeSticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      swiper.emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    return;\n  } // Find current slide\n\n\n  var stopIndex = 0;\n  var groupSize = swiper.slidesSizesGrid[0];\n\n  for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + _increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + _increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  } // Find current slide size\n\n\n  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","export default function onScroll() {\n  var swiper = this;\n  var wrapperEl = swiper.wrapperEl,\n      rtlTranslate = swiper.rtlTranslate;\n  swiper.previousTranslate = swiper.translate;\n\n  if (swiper.isHorizontal()) {\n    if (rtlTranslate) {\n      swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;\n    } else {\n      swiper.translate = -wrapperEl.scrollLeft;\n    }\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  } // eslint-disable-next-line\n\n\n  if (swiper.translate === -0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  var newProgress;\n  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}","export default function onClick(e) {\n  var swiper = this;\n\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}","import setBreakpoint from './setBreakpoint';\nimport getBreakpoint from './getBreakpoint';\nexport default {\n  setBreakpoint: setBreakpoint,\n  getBreakpoint: getBreakpoint\n};","import { extend } from '../../../utils/utils';\nexport default function setBreakpoint() {\n  var swiper = this;\n  var activeIndex = swiper.activeIndex,\n      initialized = swiper.initialized,\n      _swiper$loopedSlides = swiper.loopedSlides,\n      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,\n      params = swiper.params,\n      $el = swiper.$el;\n  var breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n\n  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {\n    var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n\n    if (breakpointOnlyParams) {\n      ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {\n        var paramValue = breakpointOnlyParams[param];\n        if (typeof paramValue === 'undefined') return;\n\n        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {\n          breakpointOnlyParams[param] = 'auto';\n        } else if (param === 'slidesPerView') {\n          breakpointOnlyParams[param] = parseFloat(paramValue);\n        } else {\n          breakpointOnlyParams[param] = parseInt(paramValue, 10);\n        }\n      });\n    }\n\n    var breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    var wasMultiRow = params.slidesPerColumn > 1;\n    var isMultiRow = breakpointParams.slidesPerColumn > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      $el.removeClass(params.containerModifierClass + \"multirow \" + params.containerModifierClass + \"multirow-column\");\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      $el.addClass(params.containerModifierClass + \"multirow\");\n\n      if (breakpointParams.slidesPerColumnFill === 'column') {\n        $el.addClass(params.containerModifierClass + \"multirow-column\");\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n    if (directionChanged && initialized) {\n      swiper.changeDirection();\n    }\n\n    extend(swiper.params, breakpointParams);\n    extend(swiper, {\n      allowTouchMove: swiper.params.allowTouchMove,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev\n    });\n    swiper.currentBreakpoint = breakpoint;\n    swiper.emit('_beforeBreakpoint', breakpointParams);\n\n    if (needsReLoop && initialized) {\n      swiper.loopDestroy();\n      swiper.loopCreate();\n      swiper.updateSlides();\n      swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n    }\n\n    swiper.emit('breakpoint', breakpointParams);\n  }\n}","import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  var breakpoint = false;\n  var window = getWindow();\n  var currentWidth = base === 'window' ? window.innerWidth : containerEl.clientWidth;\n  var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  var points = Object.keys(breakpoints).map(function (point) {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      var minRatio = parseFloat(point.substr(1));\n      var value = currentHeight * minRatio;\n      return {\n        value: value,\n        point: point\n      };\n    }\n\n    return {\n      value: point,\n      point: point\n    };\n  });\n  points.sort(function (a, b) {\n    return parseInt(a.value, 10) - parseInt(b.value, 10);\n  });\n\n  for (var i = 0; i < points.length; i += 1) {\n    var _points$i = points[i],\n        point = _points$i.point,\n        value = _points$i.value;\n\n    if (value <= currentWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}","import addClasses from './addClasses';\nimport removeClasses from './removeClasses';\nexport default {\n  addClasses: addClasses,\n  removeClasses: removeClasses\n};","function prepareClasses(entries, prefix) {\n  var resultClasses = [];\n  entries.forEach(function (item) {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(function (classNames) {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\n\nexport default function addClasses() {\n  var swiper = this;\n  var classNames = swiper.classNames,\n      params = swiper.params,\n      rtl = swiper.rtl,\n      $el = swiper.$el,\n      device = swiper.device,\n      support = swiper.support; // prettier-ignore\n\n  var suffixes = prepareClasses(['initialized', params.direction, {\n    'pointer-events': support.pointerEvents && !support.touch\n  }, {\n    'free-mode': params.freeMode\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'multirow': params.slidesPerColumn > 1\n  }, {\n    'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }], params.containerModifierClass);\n  classNames.push.apply(classNames, suffixes);\n  $el.addClass([].concat(classNames).join(' '));\n  swiper.emitContainerClasses();\n}","export default function removeClasses() {\n  var swiper = this;\n  var $el = swiper.$el,\n      classNames = swiper.classNames;\n  $el.removeClass(classNames.join(' '));\n  swiper.emitContainerClasses();\n}","import loadImage from './loadImage';\nimport preloadImages from './preloadImages';\nexport default {\n  loadImage: loadImage,\n  preloadImages: preloadImages\n};","import { getWindow } from 'ssr-window';\nimport $ from '../../../utils/dom';\nexport default function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  var window = getWindow();\n  var image;\n\n  function onReady() {\n    if (callback) callback();\n  }\n\n  var isPicture = $(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n\n      if (sizes) {\n        image.sizes = sizes;\n      }\n\n      if (srcset) {\n        image.srcset = srcset;\n      }\n\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}","export default function preloadImages() {\n  var swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n\n  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    var imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n  }\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport $ from '../../utils/dom';\nimport { extend, bindModuleMethods } from '../../utils/utils';\nvar Navigation = {\n  toggleEl: function toggleEl($el, disabled) {\n    $el[disabled ? 'addClass' : 'removeClass'](this.params.navigation.disabledClass);\n    if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;\n  },\n  update: function update() {\n    // Update Navigation Buttons\n    var swiper = this;\n    var params = swiper.params.navigation;\n    var toggleEl = swiper.navigation.toggleEl;\n    if (swiper.params.loop) return;\n    var _swiper$navigation = swiper.navigation,\n        $nextEl = _swiper$navigation.$nextEl,\n        $prevEl = _swiper$navigation.$prevEl;\n\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        toggleEl($prevEl, true);\n      } else {\n        toggleEl($prevEl, false);\n      }\n\n      $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n    }\n\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        toggleEl($nextEl, true);\n      } else {\n        toggleEl($nextEl, false);\n      }\n\n      $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n    }\n  },\n  onPrevClick: function onPrevClick(e) {\n    var swiper = this;\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop) return;\n    swiper.slidePrev();\n  },\n  onNextClick: function onNextClick(e) {\n    var swiper = this;\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop) return;\n    swiper.slideNext();\n  },\n  init: function init() {\n    var swiper = this;\n    var params = swiper.params.navigation;\n    if (!(params.nextEl || params.prevEl)) return;\n    var $nextEl;\n    var $prevEl;\n\n    if (params.nextEl) {\n      $nextEl = $(params.nextEl);\n\n      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {\n        $nextEl = swiper.$el.find(params.nextEl);\n      }\n    }\n\n    if (params.prevEl) {\n      $prevEl = $(params.prevEl);\n\n      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {\n        $prevEl = swiper.$el.find(params.prevEl);\n      }\n    }\n\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on('click', swiper.navigation.onNextClick);\n    }\n\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on('click', swiper.navigation.onPrevClick);\n    }\n\n    extend(swiper.navigation, {\n      $nextEl: $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl: $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n  },\n  destroy: function destroy() {\n    var swiper = this;\n    var _swiper$navigation2 = swiper.navigation,\n        $nextEl = _swiper$navigation2.$nextEl,\n        $prevEl = _swiper$navigation2.$prevEl;\n\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off('click', swiper.navigation.onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off('click', swiper.navigation.onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n};\nexport default {\n  name: 'navigation',\n  params: {\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock'\n    }\n  },\n  create: function create() {\n    var swiper = this;\n    bindModuleMethods(swiper, {\n      navigation: _extends({}, Navigation)\n    });\n  },\n  on: {\n    init: function init(swiper) {\n      swiper.navigation.init();\n      swiper.navigation.update();\n    },\n    toEdge: function toEdge(swiper) {\n      swiper.navigation.update();\n    },\n    fromEdge: function fromEdge(swiper) {\n      swiper.navigation.update();\n    },\n    destroy: function destroy(swiper) {\n      swiper.navigation.destroy();\n    },\n    click: function click(swiper, e) {\n      var _swiper$navigation3 = swiper.navigation,\n          $nextEl = _swiper$navigation3.$nextEl,\n          $prevEl = _swiper$navigation3.$prevEl;\n      var targetEl = e.target;\n\n      if (swiper.params.navigation.hideOnClick && !$(targetEl).is($prevEl) && !$(targetEl).is($nextEl)) {\n        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n        var isHidden;\n\n        if ($nextEl) {\n          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n        } else if ($prevEl) {\n          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n        }\n\n        if (isHidden === true) {\n          swiper.emit('navigationShow');\n        } else {\n          swiper.emit('navigationHide');\n        }\n\n        if ($nextEl) {\n          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n        }\n\n        if ($prevEl) {\n          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n        }\n      }\n    }\n  }\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport $ from '../../utils/dom';\nimport { bindModuleMethods } from '../../utils/utils';\nvar Coverflow = {\n  setTranslate: function setTranslate() {\n    var swiper = this;\n    var swiperWidth = swiper.width,\n        swiperHeight = swiper.height,\n        slides = swiper.slides,\n        slidesSizesGrid = swiper.slidesSizesGrid;\n    var params = swiper.params.coverflowEffect;\n    var isHorizontal = swiper.isHorizontal();\n    var transform = swiper.translate;\n    var center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    var rotate = isHorizontal ? params.rotate : -params.rotate;\n    var translate = params.depth; // Each slide offset from center\n\n    for (var i = 0, length = slides.length; i < length; i += 1) {\n      var $slideEl = slides.eq(i);\n      var slideSize = slidesSizesGrid[i];\n      var slideOffset = $slideEl[0].swiperSlideOffset;\n      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;\n      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      var translateZ = -translate * Math.abs(offsetMultiplier);\n      var stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      var translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      var translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      var scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      var slideTransform = \"translate3d(\" + translateX + \"px,\" + translateY + \"px,\" + translateZ + \"px)  rotateX(\" + rotateX + \"deg) rotateY(\" + rotateY + \"deg) scale(\" + scale + \")\";\n      $slideEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'left' : 'top') + \"\\\"></div>\");\n          $slideEl.append($shadowBeforeEl);\n        }\n\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'right' : 'bottom') + \"\\\"></div>\");\n          $slideEl.append($shadowAfterEl);\n        }\n\n        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  },\n  setTransition: function setTransition(duration) {\n    var swiper = this;\n    swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n  }\n};\nexport default {\n  name: 'effect-coverflow',\n  params: {\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true\n    }\n  },\n  create: function create() {\n    var swiper = this;\n    bindModuleMethods(swiper, {\n      coverflowEffect: _extends({}, Coverflow)\n    });\n  },\n  on: {\n    beforeInit: function beforeInit(swiper) {\n      if (swiper.params.effect !== 'coverflow') return;\n      swiper.classNames.push(swiper.params.containerModifierClass + \"coverflow\");\n      swiper.classNames.push(swiper.params.containerModifierClass + \"3d\");\n      swiper.params.watchSlidesProgress = true;\n      swiper.originalParams.watchSlidesProgress = true;\n    },\n    setTranslate: function setTranslate(swiper) {\n      if (swiper.params.effect !== 'coverflow') return;\n      swiper.coverflowEffect.setTranslate();\n    },\n    setTransition: function setTransition(swiper, duration) {\n      if (swiper.params.effect !== 'coverflow') return;\n      swiper.coverflowEffect.setTransition(duration);\n    }\n  }\n};","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar MicroModal = function () {\n\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(_ref) {\n      var targetModal = _ref.targetModal,\n          _ref$triggers = _ref.triggers,\n          triggers = _ref$triggers === void 0 ? [] : _ref$triggers,\n          _ref$onShow = _ref.onShow,\n          onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,\n          _ref$onClose = _ref.onClose,\n          onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n          _ref$openTrigger = _ref.openTrigger,\n          openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,\n          _ref$closeTrigger = _ref.closeTrigger,\n          closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,\n          _ref$openClass = _ref.openClass,\n          openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,\n          _ref$disableScroll = _ref.disableScroll,\n          disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,\n          _ref$disableFocus = _ref.disableFocus,\n          disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,\n          _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,\n          awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,\n          _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,\n          awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,\n          _ref$debugMode = _ref.debugMode,\n          debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;\n\n      _classCallCheck(this, Modal);\n\n      // Save a reference of the modal\n      this.modal = document.getElementById(targetModal); // Save a reference to the passed config\n\n      this.config = {\n        debugMode: debugMode,\n        disableScroll: disableScroll,\n        openTrigger: openTrigger,\n        closeTrigger: closeTrigger,\n        openClass: openClass,\n        onShow: onShow,\n        onClose: onClose,\n        awaitCloseAnimation: awaitCloseAnimation,\n        awaitOpenAnimation: awaitOpenAnimation,\n        disableFocus: disableFocus\n      }; // Register click events only if pre binding eventListeners\n\n      if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners\n\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n\n    _createClass(Modal, [{\n      key: \"registerTriggers\",\n      value: function registerTriggers() {\n        var _this = this;\n\n        for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {\n          triggers[_key] = arguments[_key];\n        }\n\n        triggers.filter(Boolean).forEach(function (trigger) {\n          trigger.addEventListener('click', function (event) {\n            return _this.showModal(event);\n          });\n        });\n      }\n    }, {\n      key: \"showModal\",\n      value: function showModal() {\n        var _this2 = this;\n\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.activeElement = document.activeElement;\n        this.modal.setAttribute('aria-hidden', 'false');\n        this.modal.classList.add(this.config.openClass);\n        this.scrollBehaviour('disable');\n        this.addEventListeners();\n\n        if (this.config.awaitOpenAnimation) {\n          var handler = function handler() {\n            _this2.modal.removeEventListener('animationend', handler, false);\n\n            _this2.setFocusToFirstNode();\n          };\n\n          this.modal.addEventListener('animationend', handler, false);\n        } else {\n          this.setFocusToFirstNode();\n        }\n\n        this.config.onShow(this.modal, this.activeElement, event);\n      }\n    }, {\n      key: \"closeModal\",\n      value: function closeModal() {\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var modal = this.modal;\n        this.modal.setAttribute('aria-hidden', 'true');\n        this.removeEventListeners();\n        this.scrollBehaviour('enable');\n\n        if (this.activeElement && this.activeElement.focus) {\n          this.activeElement.focus();\n        }\n\n        this.config.onClose(this.modal, this.activeElement, event);\n\n        if (this.config.awaitCloseAnimation) {\n          var openClass = this.config.openClass; // <- old school ftw\n\n          this.modal.addEventListener('animationend', function handler() {\n            modal.classList.remove(openClass);\n            modal.removeEventListener('animationend', handler, false);\n          }, false);\n        } else {\n          modal.classList.remove(this.config.openClass);\n        }\n      }\n    }, {\n      key: \"closeModalById\",\n      value: function closeModalById(targetModal) {\n        this.modal = document.getElementById(targetModal);\n        if (this.modal) this.closeModal();\n      }\n    }, {\n      key: \"scrollBehaviour\",\n      value: function scrollBehaviour(toggle) {\n        if (!this.config.disableScroll) return;\n        var body = document.querySelector('body');\n\n        switch (toggle) {\n          case 'enable':\n            Object.assign(body.style, {\n              overflow: ''\n            });\n            break;\n\n          case 'disable':\n            Object.assign(body.style, {\n              overflow: 'hidden'\n            });\n            break;\n        }\n      }\n    }, {\n      key: \"addEventListeners\",\n      value: function addEventListeners() {\n        this.modal.addEventListener('touchstart', this.onClick);\n        this.modal.addEventListener('click', this.onClick);\n        document.addEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"removeEventListeners\",\n      value: function removeEventListeners() {\n        this.modal.removeEventListener('touchstart', this.onClick);\n        this.modal.removeEventListener('click', this.onClick);\n        document.removeEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (event.target.hasAttribute(this.config.closeTrigger)) {\n          this.closeModal(event);\n        }\n      }\n    }, {\n      key: \"onKeydown\",\n      value: function onKeydown(event) {\n        if (event.keyCode === 27) this.closeModal(event); // esc\n\n        if (event.keyCode === 9) this.retainFocus(event); // tab\n      }\n    }, {\n      key: \"getFocusableNodes\",\n      value: function getFocusableNodes() {\n        var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n        return Array.apply(void 0, _toConsumableArray(nodes));\n      }\n      /**\n       * Tries to set focus on a node which is not a close trigger\n       * if no other nodes exist then focuses on first close trigger\n       */\n\n    }, {\n      key: \"setFocusToFirstNode\",\n      value: function setFocusToFirstNode() {\n        var _this3 = this;\n\n        if (this.config.disableFocus) return;\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes\n        // could not think of a better name :(\n\n        var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {\n          return !node.hasAttribute(_this3.config.closeTrigger);\n        });\n        if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n        if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n      }\n    }, {\n      key: \"retainFocus\",\n      value: function retainFocus(event) {\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return;\n        /**\n         * Filters nodes which are hidden to prevent\n         * focus leak outside modal\n         */\n\n        focusableNodes = focusableNodes.filter(function (node) {\n          return node.offsetParent !== null;\n        }); // if disableFocus is true\n\n        if (!this.modal.contains(document.activeElement)) {\n          focusableNodes[0].focus();\n        } else {\n          var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n          if (event.shiftKey && focusedItemIndex === 0) {\n            focusableNodes[focusableNodes.length - 1].focus();\n            event.preventDefault();\n          }\n\n          if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n            focusableNodes[0].focus();\n            event.preventDefault();\n          }\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n  // Keep a reference to the opened modal\n\n\n  var activeModal = null;\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n\n  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {\n    var triggerMap = [];\n    triggers.forEach(function (trigger) {\n      var targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n    return triggerMap;\n  };\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n\n\n  var validateModalPresence = function validateModalPresence(id) {\n    if (!document.getElementById(id)) {\n      console.warn(\"MicroModal: \\u2757Seems like you have missed %c'\".concat(id, \"'\"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<div class=\\\"modal\\\" id=\\\"\".concat(id, \"\\\"></div>\"));\n      return false;\n    }\n  };\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n\n\n  var validateTriggerPresence = function validateTriggerPresence(triggers) {\n    if (triggers.length <= 0) {\n      console.warn(\"MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<a href=\\\"#\\\" data-micromodal-trigger=\\\"my-modal\\\"></a>\");\n      return false;\n    }\n  };\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n\n\n  var validateArgs = function validateArgs(triggers, triggerMap) {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n\n    for (var id in triggerMap) {\n      validateModalPresence(id);\n    }\n\n    return true;\n  };\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n\n\n  var init = function init(config) {\n    // Create an config object with default openTrigger\n    var options = Object.assign({}, {\n      openTrigger: 'data-micromodal-trigger'\n    }, config); // Collects all the nodes with the trigger\n\n    var triggers = _toConsumableArray(document.querySelectorAll(\"[\".concat(options.openTrigger, \"]\"))); // Makes a mappings of modals with their trigger nodes\n\n\n    var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance\n\n    for (var key in triggerMap) {\n      var value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = _toConsumableArray(value);\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n\n\n  var show = function show(targetModal, config) {\n    var options = config || {};\n    options.targetModal = targetModal; // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close\n\n    if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal\n\n    activeModal = new Modal(options); // eslint-disable-line no-new\n\n    activeModal.showModal();\n  };\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n\n\n  var close = function close(targetModal) {\n    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();\n  };\n\n  return {\n    init: init,\n    show: show,\n    close: close\n  };\n}();\nwindow.MicroModal = MicroModal;\n\nexport default MicroModal;\n","import {Swiper, Navigation, EffectCoverflow} from 'swiper';\r\nSwiper.use([Navigation, EffectCoverflow]);\r\n\r\nimport Micromodal from 'micromodal';\r\n\r\nwindow.addEventListener('load', function () {\r\n  \r\n  \r\n  /* Modal */\r\n  Micromodal.init({\r\n    openTrigger: 'data-micromodal-open',\r\n    closeTrigger: 'data-micromodal-close',\r\n    disableScroll: true,\r\n    awaitOpenAnimation: true,\r\n    awaitCloseAnimation: true\r\n  });\r\n  \r\n  \r\n  /* Sliders */\r\n  const sliderWeddings = new Swiper('.slider-wd', {\r\n    allowTouchMove: false,\r\n    navigation: {\r\n      nextEl: '.slider-container--wd .slider-navigation__next-btn',\r\n      prevEl: '.slider-container--wd .slider-navigation__prev-btn',\r\n    },\r\n  });\r\n  \r\n  const sliderMediaPhoto = new Swiper('.slider-media--photo',  {\r\n    initialSlide: 1,\r\n    effect: \"coverflow\",\r\n    coverflowEffect: {\r\n      rotate: 0,\r\n      stretch: 0,\r\n      depth: 200,\r\n      modifier: 1,\r\n      slideShadows: false,\r\n    },\r\n    spaceBetween: 50,\r\n    centerInsufficientSlides: true,\r\n    centeredSlides: true,\r\n    navigation: {\r\n      nextEl: '#slider-photo-panel .slider-navigation__next-btn',\r\n      prevEl: '#slider-photo-panel .slider-navigation__prev-btn',\r\n    },\r\n    breakpoints: {\r\n      528: {\r\n        coverflowEffect: {\r\n          rotate: 0,\r\n          stretch: 0,\r\n          depth: 200,\r\n          modifier: 1,\r\n          slideShadows: false,\r\n        },\r\n        spaceBetween: 0,\r\n        \r\n      }\r\n    }\r\n  });\r\n  \r\n  const sliderMediaVideo = new Swiper('.slider-media--video', {\r\n    initialSlide: 1,\r\n    effect: \"coverflow\",\r\n    coverflowEffect: {\r\n      rotate: 0,\r\n      stretch: 0,\r\n      depth: 200,\r\n      modifier: 1,\r\n      slideShadows: false,\r\n    },\r\n    spaceBetween: 50,\r\n    centerInsufficientSlides: true,\r\n    centeredSlides: true,\r\n    navigation: {\r\n      nextEl: '#slider-video-panel .slider-navigation__next-btn',\r\n      prevEl: '#slider-video-panel .slider-navigation__prev-btn',\r\n    },\r\n    breakpoints: {\r\n      528: {\r\n        coverflowEffect: {\r\n          rotate: 0,\r\n          stretch: 0,\r\n          depth: 200,\r\n          modifier: 1,\r\n          slideShadows: false,\r\n        },\r\n        spaceBetween: 0,\r\n        \r\n      }\r\n    }\r\n  });\r\n  \r\n  const sliderReviews = new Swiper('.slider-reviews', {\r\n    initialSlide: 1,\r\n    slidesPerView: 1,\r\n    centeredSlides: true,\r\n    spaceBetween: 10,\r\n    navigation: {\r\n      nextEl: '.slider-container--reviews .slider-navigation__next-btn',\r\n      prevEl: '.slider-container--reviews .slider-navigation__prev-btn',\r\n    },\r\n    breakpoints: {\r\n      945: {\r\n        initialSlide: 0,\r\n        slidesPerView: 4,\r\n        spaceBetween: 20,\r\n        centeredSlides: false,\r\n      },\r\n      680: {\r\n        initialSlide: 0,\r\n        slidesPerView: 2,\r\n        spaceBetween: 10,\r\n        centeredSlides: false,\r\n      }\r\n    }\r\n  });\r\n  \r\n  \r\n  /* Tabs */\r\n  let tabs = document.querySelector('.tabs');\r\n  let tabsControl = tabs.querySelector('.tabs__controls');\r\n  \r\n  tabsControl.addEventListener('click', function (e) {\r\n    e.preventDefault();\r\n    let target = e.target;\r\n    \r\n    if (target.classList.contains('tabs__toggle')) {\r\n      \r\n      let targetTab = document.getElementById(target.dataset.tabTarget);\r\n      let lastTab = tabs.querySelector('.tabs__panel--active');\r\n      let lastToggle = tabs.querySelector('.tabs__toggle--active');\r\n      \r\n      if (targetTab === lastTab) {\r\n        return;\r\n      }\r\n      \r\n      lastToggle.classList.remove('tabs__toggle--active');\r\n      lastTab.classList.remove('tabs__panel--active');\r\n      \r\n      target.classList.add('tabs__toggle--active');\r\n      targetTab.classList.add('tabs__panel--active');\r\n      \r\n      /* Update slider */\r\n      sliderMediaVideo.update();\r\n      sliderMediaPhoto.update();\r\n    }\r\n  });\r\n  \r\n  \r\n});\r\n\r\n\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}