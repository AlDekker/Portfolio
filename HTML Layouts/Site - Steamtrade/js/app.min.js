!function(){"use strict";function t(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function e(i={},s={}){Object.keys(s).forEach((n=>{void 0===i[n]?i[n]=s[n]:t(s[n])&&t(i[n])&&Object.keys(s[n]).length>0&&e(i[n],s[n])}))}const i={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function s(){const t="undefined"!=typeof document?document:{};return e(t,i),t}const n={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function o(){const t="undefined"!=typeof window?window:{};return e(t,n),t}class a extends Array{constructor(t){"number"==typeof t?super(t):(super(...t||[]),function(t){const e=t.__proto__;Object.defineProperty(t,"__proto__",{get(){return e},set(t){e.__proto__=t}})}(this))}}function r(t=[]){const e=[];return t.forEach((t=>{Array.isArray(t)?e.push(...r(t)):e.push(t)})),e}function l(t,e){return Array.prototype.filter.call(t,e)}function c(t,e){const i=o(),n=s();let r=[];if(!e&&t instanceof a)return t;if(!t)return new a(r);if("string"==typeof t){const i=t.trim();if(i.indexOf("<")>=0&&i.indexOf(">")>=0){let t="div";0===i.indexOf("<li")&&(t="ul"),0===i.indexOf("<tr")&&(t="tbody"),0!==i.indexOf("<td")&&0!==i.indexOf("<th")||(t="tr"),0===i.indexOf("<tbody")&&(t="table"),0===i.indexOf("<option")&&(t="select");const e=n.createElement(t);e.innerHTML=i;for(let t=0;t<e.childNodes.length;t+=1)r.push(e.childNodes[t])}else r=function(t,e){if("string"!=typeof t)return[t];const i=[],s=e.querySelectorAll(t);for(let t=0;t<s.length;t+=1)i.push(s[t]);return i}(t.trim(),e||n)}else if(t.nodeType||t===i||t===n)r.push(t);else if(Array.isArray(t)){if(t instanceof a)return t;r=t}return new a(function(t){const e=[];for(let i=0;i<t.length;i+=1)-1===e.indexOf(t[i])&&e.push(t[i]);return e}(r))}c.fn=a.prototype;const h="resize scroll".split(" ");function d(t){return function(...e){if(void 0===e[0]){for(let e=0;e<this.length;e+=1)h.indexOf(t)<0&&(t in this[e]?this[e][t]():c(this[e]).trigger(t));return this}return this.on(t,...e)}}d("click"),d("blur"),d("focus"),d("focusin"),d("focusout"),d("keyup"),d("keydown"),d("keypress"),d("submit"),d("change"),d("mousedown"),d("mousemove"),d("mouseup"),d("mouseenter"),d("mouseleave"),d("mouseout"),d("mouseover"),d("touchstart"),d("touchend"),d("touchmove"),d("resize"),d("scroll");const u={addClass:function(...t){const e=r(t.map((t=>t.split(" "))));return this.forEach((t=>{t.classList.add(...e)})),this},removeClass:function(...t){const e=r(t.map((t=>t.split(" "))));return this.forEach((t=>{t.classList.remove(...e)})),this},hasClass:function(...t){const e=r(t.map((t=>t.split(" "))));return l(this,(t=>e.filter((e=>t.classList.contains(e))).length>0)).length>0},toggleClass:function(...t){const e=r(t.map((t=>t.split(" "))));this.forEach((t=>{e.forEach((e=>{t.classList.toggle(e)}))}))},attr:function(t,e){if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(t,e);else for(const e in t)this[i][e]=t[e],this[i].setAttribute(e,t[e]);return this},removeAttr:function(t){for(let e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this},transform:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transform=t;return this},transition:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transitionDuration="string"!=typeof t?`${t}ms`:t;return this},on:function(...t){let[e,i,s,n]=t;function o(t){const e=t.target;if(!e)return;const n=t.target.dom7EventData||[];if(n.indexOf(t)<0&&n.unshift(t),c(e).is(i))s.apply(e,n);else{const t=c(e).parents();for(let e=0;e<t.length;e+=1)c(t[e]).is(i)&&s.apply(t[e],n)}}function a(t){const e=t&&t.target&&t.target.dom7EventData||[];e.indexOf(t)<0&&e.unshift(t),s.apply(this,e)}"function"==typeof t[1]&&([e,s,n]=t,i=void 0),n||(n=!1);const r=e.split(" ");let l;for(let t=0;t<this.length;t+=1){const e=this[t];if(i)for(l=0;l<r.length;l+=1){const t=r[l];e.dom7LiveListeners||(e.dom7LiveListeners={}),e.dom7LiveListeners[t]||(e.dom7LiveListeners[t]=[]),e.dom7LiveListeners[t].push({listener:s,proxyListener:o}),e.addEventListener(t,o,n)}else for(l=0;l<r.length;l+=1){const t=r[l];e.dom7Listeners||(e.dom7Listeners={}),e.dom7Listeners[t]||(e.dom7Listeners[t]=[]),e.dom7Listeners[t].push({listener:s,proxyListener:a}),e.addEventListener(t,a,n)}}return this},off:function(...t){let[e,i,s,n]=t;"function"==typeof t[1]&&([e,s,n]=t,i=void 0),n||(n=!1);const o=e.split(" ");for(let t=0;t<o.length;t+=1){const e=o[t];for(let t=0;t<this.length;t+=1){const o=this[t];let a;if(!i&&o.dom7Listeners?a=o.dom7Listeners[e]:i&&o.dom7LiveListeners&&(a=o.dom7LiveListeners[e]),a&&a.length)for(let t=a.length-1;t>=0;t-=1){const i=a[t];s&&i.listener===s||s&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===s?(o.removeEventListener(e,i.proxyListener,n),a.splice(t,1)):s||(o.removeEventListener(e,i.proxyListener,n),a.splice(t,1))}}}return this},trigger:function(...t){const e=o(),i=t[0].split(" "),s=t[1];for(let n=0;n<i.length;n+=1){const o=i[n];for(let i=0;i<this.length;i+=1){const n=this[i];if(e.CustomEvent){const i=new e.CustomEvent(o,{detail:s,bubbles:!0,cancelable:!0});n.dom7EventData=t.filter(((t,e)=>e>0)),n.dispatchEvent(i),n.dom7EventData=[],delete n.dom7EventData}}}return this},transitionEnd:function(t){const e=this;return t&&e.on("transitionend",(function i(s){s.target===this&&(t.call(this,s),e.off("transitionend",i))})),this},outerWidth:function(t){if(this.length>0){if(t){const t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(t){if(this.length>0){if(t){const t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){const t=o();return this[0]?t.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){const t=o(),e=s(),i=this[0],n=i.getBoundingClientRect(),a=e.body,r=i.clientTop||a.clientTop||0,l=i.clientLeft||a.clientLeft||0,c=i===t?t.scrollY:i.scrollTop,h=i===t?t.scrollX:i.scrollLeft;return{top:n.top+c-r,left:n.left+h-l}}return null},css:function(t,e){const i=o();let s;if(1===arguments.length){if("string"!=typeof t){for(s=0;s<this.length;s+=1)for(const e in t)this[s].style[e]=t[e];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(t)}if(2===arguments.length&&"string"==typeof t){for(s=0;s<this.length;s+=1)this[s].style[t]=e;return this}return this},each:function(t){return t?(this.forEach(((e,i)=>{t.apply(e,[e,i])})),this):this},html:function(t){if(void 0===t)return this[0]?this[0].innerHTML:null;for(let e=0;e<this.length;e+=1)this[e].innerHTML=t;return this},text:function(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(let e=0;e<this.length;e+=1)this[e].textContent=t;return this},is:function(t){const e=o(),i=s(),n=this[0];let r,l;if(!n||void 0===t)return!1;if("string"==typeof t){if(n.matches)return n.matches(t);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(t);if(n.msMatchesSelector)return n.msMatchesSelector(t);for(r=c(t),l=0;l<r.length;l+=1)if(r[l]===n)return!0;return!1}if(t===i)return n===i;if(t===e)return n===e;if(t.nodeType||t instanceof a){for(r=t.nodeType?[t]:t,l=0;l<r.length;l+=1)if(r[l]===n)return!0;return!1}return!1},index:function(){let t,e=this[0];if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}},eq:function(t){if(void 0===t)return this;const e=this.length;if(t>e-1)return c([]);if(t<0){const i=e+t;return c(i<0?[]:[this[i]])}return c([this[t]])},append:function(...t){let e;const i=s();for(let s=0;s<t.length;s+=1){e=t[s];for(let t=0;t<this.length;t+=1)if("string"==typeof e){const s=i.createElement("div");for(s.innerHTML=e;s.firstChild;)this[t].appendChild(s.firstChild)}else if(e instanceof a)for(let i=0;i<e.length;i+=1)this[t].appendChild(e[i]);else this[t].appendChild(e)}return this},prepend:function(t){const e=s();let i,n;for(i=0;i<this.length;i+=1)if("string"==typeof t){const s=e.createElement("div");for(s.innerHTML=t,n=s.childNodes.length-1;n>=0;n-=1)this[i].insertBefore(s.childNodes[n],this[i].childNodes[0])}else if(t instanceof a)for(n=0;n<t.length;n+=1)this[i].insertBefore(t[n],this[i].childNodes[0]);else this[i].insertBefore(t,this[i].childNodes[0]);return this},next:function(t){return this.length>0?t?this[0].nextElementSibling&&c(this[0].nextElementSibling).is(t)?c([this[0].nextElementSibling]):c([]):this[0].nextElementSibling?c([this[0].nextElementSibling]):c([]):c([])},nextAll:function(t){const e=[];let i=this[0];if(!i)return c([]);for(;i.nextElementSibling;){const s=i.nextElementSibling;t?c(s).is(t)&&e.push(s):e.push(s),i=s}return c(e)},prev:function(t){if(this.length>0){const e=this[0];return t?e.previousElementSibling&&c(e.previousElementSibling).is(t)?c([e.previousElementSibling]):c([]):e.previousElementSibling?c([e.previousElementSibling]):c([])}return c([])},prevAll:function(t){const e=[];let i=this[0];if(!i)return c([]);for(;i.previousElementSibling;){const s=i.previousElementSibling;t?c(s).is(t)&&e.push(s):e.push(s),i=s}return c(e)},parent:function(t){const e=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(t?c(this[i].parentNode).is(t)&&e.push(this[i].parentNode):e.push(this[i].parentNode));return c(e)},parents:function(t){const e=[];for(let i=0;i<this.length;i+=1){let s=this[i].parentNode;for(;s;)t?c(s).is(t)&&e.push(s):e.push(s),s=s.parentNode}return c(e)},closest:function(t){let e=this;return void 0===t?c([]):(e.is(t)||(e=e.parents(t).eq(0)),e)},find:function(t){const e=[];for(let i=0;i<this.length;i+=1){const s=this[i].querySelectorAll(t);for(let t=0;t<s.length;t+=1)e.push(s[t])}return c(e)},children:function(t){const e=[];for(let i=0;i<this.length;i+=1){const s=this[i].children;for(let i=0;i<s.length;i+=1)t&&!c(s[i]).is(t)||e.push(s[i])}return c(e)},filter:function(t){return c(l(this,t))},remove:function(){for(let t=0;t<this.length;t+=1)this[t].parentNode&&this[t].parentNode.removeChild(this[t]);return this}};Object.keys(u).forEach((t=>{Object.defineProperty(c.fn,t,{value:u[t],writable:!0})}));var p=c;function f(t,e=0){return setTimeout(t,e)}function g(){return Date.now()}function m(t,e="x"){const i=o();let s,n,a;const r=function(t){const e=o();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}(t);return i.WebKitCSSMatrix?(n=r.transform||r.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map((t=>t.replace(",","."))).join(", ")),a=new i.WebKitCSSMatrix("none"===n?"":n)):(a=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=a.toString().split(",")),"x"===e&&(n=i.WebKitCSSMatrix?a.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===e&&(n=i.WebKitCSSMatrix?a.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),n||0}function b(t){return"object"==typeof t&&null!==t&&t.constructor&&"Object"===Object.prototype.toString.call(t).slice(8,-1)}function x(...t){const e=Object(t[0]),i=["__proto__","constructor","prototype"];for(let n=1;n<t.length;n+=1){const o=t[n];if(null!=o&&(s=o,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const t=Object.keys(Object(o)).filter((t=>i.indexOf(t)<0));for(let i=0,s=t.length;i<s;i+=1){const s=t[i],n=Object.getOwnPropertyDescriptor(o,s);void 0!==n&&n.enumerable&&(b(e[s])&&b(o[s])?o[s].__swiper__?e[s]=o[s]:x(e[s],o[s]):!b(e[s])&&b(o[s])?(e[s]={},o[s].__swiper__?e[s]=o[s]:x(e[s],o[s])):e[s]=o[s])}}}var s;return e}function v(t,e,i){t.style.setProperty(e,i)}function y({swiper:t,targetPosition:e,side:i}){const s=o(),n=-t.translate;let a,r=null;const l=t.params.speed;t.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(t.cssModeFrameID);const c=e>n?"next":"prev",h=(t,e)=>"next"===c&&t>=e||"prev"===c&&t<=e,d=()=>{a=(new Date).getTime(),null===r&&(r=a);const o=Math.max(Math.min((a-r)/l,1),0),c=.5-Math.cos(o*Math.PI)/2;let u=n+c*(e-n);if(h(u,e)&&(u=e),t.wrapperEl.scrollTo({[i]:u}),h(u,e))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:u})})),void s.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=s.requestAnimationFrame(d)};d()}let _,w,M;function S(){return _||(_=function(){const t=o(),e=s();return{smoothScroll:e.documentElement&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch),passiveListener:function(){let e=!1;try{const i=Object.defineProperty({},"passive",{get(){e=!0}});t.addEventListener("testPassiveListener",null,i)}catch(t){}return e}(),gestures:"ongesturestart"in t}}()),_}function C(t={}){return w||(w=function({userAgent:t}={}){const e=S(),i=o(),s=i.navigator.platform,n=t||i.navigator.userAgent,a={ios:!1,android:!1},r=i.screen.width,l=i.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/);let h=n.match(/(iPad).*OS\s([\d_]+)/);const d=n.match(/(iPod)(.*OS\s([\d_]+))?/),u=!h&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===s;let f="MacIntel"===s;return!h&&f&&e.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${r}x${l}`)>=0&&(h=n.match(/(Version)\/([\d.]+)/),h||(h=[0,1,"13_0_0"]),f=!1),c&&!p&&(a.os="android",a.android=!0),(h||u||d)&&(a.os="ios",a.ios=!0),a}(t)),w}function k(){return M||(M=function(){const t=o();return{isSafari:function(){const e=t.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),M}var T={on(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const n=i?"unshift":"push";return t.split(" ").forEach((t=>{s.eventsListeners[t]||(s.eventsListeners[t]=[]),s.eventsListeners[t][n](e)})),s},once(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;function n(...i){s.off(t,n),n.__emitterProxy&&delete n.__emitterProxy,e.apply(s,i)}return n.__emitterProxy=e,s.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const s=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[s](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(t.split(" ").forEach((t=>{void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t]&&i.eventsListeners[t].forEach(((s,n)=>{(s===e||s.__emitterProxy&&s.__emitterProxy===e)&&i.eventsListeners[t].splice(n,1)}))})),i):i},emit(...t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let i,s,n;"string"==typeof t[0]||Array.isArray(t[0])?(i=t[0],s=t.slice(1,t.length),n=e):(i=t[0].events,s=t[0].data,n=t[0].context||e),s.unshift(n);return(Array.isArray(i)?i:i.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(n,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((t=>{t.apply(n,s)}))})),e}};var E={updateSize:function(){const t=this;let e,i;const s=t.$el;e=void 0!==t.params.width&&null!==t.params.width?t.params.width:s[0].clientWidth,i=void 0!==t.params.height&&null!==t.params.height?t.params.height:s[0].clientHeight,0===e&&t.isHorizontal()||0===i&&t.isVertical()||(e=e-parseInt(s.css("padding-left")||0,10)-parseInt(s.css("padding-right")||0,10),i=i-parseInt(s.css("padding-top")||0,10)-parseInt(s.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))},updateSlides:function(){const t=this;function e(e){return t.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}function i(t,i){return parseFloat(t.getPropertyValue(e(i))||0)}const s=t.params,{$wrapperEl:n,size:o,rtlTranslate:a,wrongRTL:r}=t,l=t.virtual&&s.virtual.enabled,c=l?t.virtual.slides.length:t.slides.length,h=n.children(`.${t.params.slideClass}`),d=l?t.virtual.slides.length:h.length;let u=[];const p=[],f=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(t));let m=s.slidesOffsetAfter;"function"==typeof m&&(m=s.slidesOffsetAfter.call(t));const b=t.snapGrid.length,x=t.slidesGrid.length;let y=s.spaceBetween,_=-g,w=0,M=0;if(void 0===o)return;"string"==typeof y&&y.indexOf("%")>=0&&(y=parseFloat(y.replace("%",""))/100*o),t.virtualSize=-y,a?h.css({marginLeft:"",marginBottom:"",marginTop:""}):h.css({marginRight:"",marginBottom:"",marginTop:""}),s.centeredSlides&&s.cssMode&&(v(t.wrapperEl,"--swiper-centered-offset-before",""),v(t.wrapperEl,"--swiper-centered-offset-after",""));const S=s.grid&&s.grid.rows>1&&t.grid;let C;S&&t.grid.initSlides(d);const k="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((t=>void 0!==s.breakpoints[t].slidesPerView)).length>0;for(let n=0;n<d;n+=1){C=0;const a=h.eq(n);if(S&&t.grid.updateSlide(n,a,d,e),"none"!==a.css("display")){if("auto"===s.slidesPerView){k&&(h[n].style[e("width")]="");const o=getComputedStyle(a[0]),r=a[0].style.transform,l=a[0].style.webkitTransform;if(r&&(a[0].style.transform="none"),l&&(a[0].style.webkitTransform="none"),s.roundLengths)C=t.isHorizontal()?a.outerWidth(!0):a.outerHeight(!0);else{const t=i(o,"width"),e=i(o,"padding-left"),s=i(o,"padding-right"),n=i(o,"margin-left"),r=i(o,"margin-right"),l=o.getPropertyValue("box-sizing");if(l&&"border-box"===l)C=t+n+r;else{const{clientWidth:i,offsetWidth:o}=a[0];C=t+e+s+n+r+(o-i)}}r&&(a[0].style.transform=r),l&&(a[0].style.webkitTransform=l),s.roundLengths&&(C=Math.floor(C))}else C=(o-(s.slidesPerView-1)*y)/s.slidesPerView,s.roundLengths&&(C=Math.floor(C)),h[n]&&(h[n].style[e("width")]=`${C}px`);h[n]&&(h[n].swiperSlideSize=C),f.push(C),s.centeredSlides?(_=_+C/2+w/2+y,0===w&&0!==n&&(_=_-o/2-y),0===n&&(_=_-o/2-y),Math.abs(_)<.001&&(_=0),s.roundLengths&&(_=Math.floor(_)),M%s.slidesPerGroup==0&&u.push(_),p.push(_)):(s.roundLengths&&(_=Math.floor(_)),(M-Math.min(t.params.slidesPerGroupSkip,M))%t.params.slidesPerGroup==0&&u.push(_),p.push(_),_=_+C+y),t.virtualSize+=C+y,w=C,M+=1}}if(t.virtualSize=Math.max(t.virtualSize,o)+m,a&&r&&("slide"===s.effect||"coverflow"===s.effect)&&n.css({width:`${t.virtualSize+s.spaceBetween}px`}),s.setWrapperSize&&n.css({[e("width")]:`${t.virtualSize+s.spaceBetween}px`}),S&&t.grid.updateWrapperSize(C,u,e),!s.centeredSlides){const e=[];for(let i=0;i<u.length;i+=1){let n=u[i];s.roundLengths&&(n=Math.floor(n)),u[i]<=t.virtualSize-o&&e.push(n)}u=e,Math.floor(t.virtualSize-o)-Math.floor(u[u.length-1])>1&&u.push(t.virtualSize-o)}if(0===u.length&&(u=[0]),0!==s.spaceBetween){const i=t.isHorizontal()&&a?"marginLeft":e("marginRight");h.filter(((t,e)=>!s.cssMode||e!==h.length-1)).css({[i]:`${y}px`})}if(s.centeredSlides&&s.centeredSlidesBounds){let t=0;f.forEach((e=>{t+=e+(s.spaceBetween?s.spaceBetween:0)})),t-=s.spaceBetween;const e=t-o;u=u.map((t=>t<0?-g:t>e?e+m:t))}if(s.centerInsufficientSlides){let t=0;if(f.forEach((e=>{t+=e+(s.spaceBetween?s.spaceBetween:0)})),t-=s.spaceBetween,t<o){const e=(o-t)/2;u.forEach(((t,i)=>{u[i]=t-e})),p.forEach(((t,i)=>{p[i]=t+e}))}}if(Object.assign(t,{slides:h,snapGrid:u,slidesGrid:p,slidesSizesGrid:f}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){v(t.wrapperEl,"--swiper-centered-offset-before",-u[0]+"px"),v(t.wrapperEl,"--swiper-centered-offset-after",t.size/2-f[f.length-1]/2+"px");const e=-t.snapGrid[0],i=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map((t=>t+e)),t.slidesGrid=t.slidesGrid.map((t=>t+i))}if(d!==c&&t.emit("slidesLengthChange"),u.length!==b&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),p.length!==x&&t.emit("slidesGridLengthChange"),s.watchSlidesProgress&&t.updateSlidesOffset(),!(l||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const e=`${s.containerModifierClass}backface-hidden`,i=t.$el.hasClass(e);d<=s.maxBackfaceHiddenSlides?i||t.$el.addClass(e):i&&t.$el.removeClass(e)}},updateAutoHeight:function(t){const e=this,i=[],s=e.virtual&&e.params.virtual.enabled;let n,o=0;"number"==typeof t?e.setTransition(t):!0===t&&e.setTransition(e.params.speed);const a=t=>s?e.slides.filter((e=>parseInt(e.getAttribute("data-swiper-slide-index"),10)===t))[0]:e.slides.eq(t)[0];if("auto"!==e.params.slidesPerView&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||p([])).each((t=>{i.push(t)}));else for(n=0;n<Math.ceil(e.params.slidesPerView);n+=1){const t=e.activeIndex+n;if(t>e.slides.length&&!s)break;i.push(a(t))}else i.push(a(e.activeIndex));for(n=0;n<i.length;n+=1)if(void 0!==i[n]){const t=i[n].offsetHeight;o=t>o?t:o}(o||0===o)&&e.$wrapperEl.css("height",`${o}px`)},updateSlidesOffset:function(){const t=this,e=t.slides;for(let i=0;i<e.length;i+=1)e[i].swiperSlideOffset=t.isHorizontal()?e[i].offsetLeft:e[i].offsetTop},updateSlidesProgress:function(t=this&&this.translate||0){const e=this,i=e.params,{slides:s,rtlTranslate:n,snapGrid:o}=e;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&e.updateSlidesOffset();let a=-t;n&&(a=t),s.removeClass(i.slideVisibleClass),e.visibleSlidesIndexes=[],e.visibleSlides=[];for(let t=0;t<s.length;t+=1){const r=s[t];let l=r.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(l-=s[0].swiperSlideOffset);const c=(a+(i.centeredSlides?e.minTranslate():0)-l)/(r.swiperSlideSize+i.spaceBetween),h=(a-o[0]+(i.centeredSlides?e.minTranslate():0)-l)/(r.swiperSlideSize+i.spaceBetween),d=-(a-l),u=d+e.slidesSizesGrid[t];(d>=0&&d<e.size-1||u>1&&u<=e.size||d<=0&&u>=e.size)&&(e.visibleSlides.push(r),e.visibleSlidesIndexes.push(t),s.eq(t).addClass(i.slideVisibleClass)),r.progress=n?-c:c,r.originalProgress=n?-h:h}e.visibleSlides=p(e.visibleSlides)},updateProgress:function(t){const e=this;if(void 0===t){const i=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*i||0}const i=e.params,s=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:o,isEnd:a}=e;const r=o,l=a;0===s?(n=0,o=!0,a=!0):(n=(t-e.minTranslate())/s,o=n<=0,a=n>=1),Object.assign(e,{progress:n,isBeginning:o,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),o&&!r&&e.emit("reachBeginning toEdge"),a&&!l&&e.emit("reachEnd toEdge"),(r&&!o||l&&!a)&&e.emit("fromEdge"),e.emit("progress",n)},updateSlidesClasses:function(){const t=this,{slides:e,params:i,$wrapperEl:s,activeIndex:n,realIndex:o}=t,a=t.virtual&&i.virtual.enabled;let r;e.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),r=a?t.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${n}"]`):e.eq(n),r.addClass(i.slideActiveClass),i.loop&&(r.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${o}"]`).addClass(i.slideDuplicateActiveClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${o}"]`).addClass(i.slideDuplicateActiveClass));let l=r.nextAll(`.${i.slideClass}`).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=e.eq(0),l.addClass(i.slideNextClass));let c=r.prevAll(`.${i.slideClass}`).eq(0).addClass(i.slidePrevClass);i.loop&&0===c.length&&(c=e.eq(-1),c.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),c.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{slidesGrid:s,snapGrid:n,params:o,activeIndex:a,realIndex:r,snapIndex:l}=e;let c,h=t;if(void 0===h){for(let t=0;t<s.length;t+=1)void 0!==s[t+1]?i>=s[t]&&i<s[t+1]-(s[t+1]-s[t])/2?h=t:i>=s[t]&&i<s[t+1]&&(h=t+1):i>=s[t]&&(h=t);o.normalizeSlideIndex&&(h<0||void 0===h)&&(h=0)}if(n.indexOf(i)>=0)c=n.indexOf(i);else{const t=Math.min(o.slidesPerGroupSkip,h);c=t+Math.floor((h-t)/o.slidesPerGroup)}if(c>=n.length&&(c=n.length-1),h===a)return void(c!==l&&(e.snapIndex=c,e.emit("snapIndexChange")));const d=parseInt(e.slides.eq(h).attr("data-swiper-slide-index")||h,10);Object.assign(e,{snapIndex:c,realIndex:d,previousIndex:a,activeIndex:h}),e.emit("activeIndexChange"),e.emit("snapIndexChange"),r!==d&&e.emit("realIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&e.emit("slideChange")},updateClickedSlide:function(t){const e=this,i=e.params,s=p(t).closest(`.${i.slideClass}`)[0];let n,o=!1;if(s)for(let t=0;t<e.slides.length;t+=1)if(e.slides[t]===s){o=!0,n=t;break}if(!s||!o)return e.clickedSlide=void 0,void(e.clickedIndex=void 0);e.clickedSlide=s,e.virtual&&e.params.virtual.enabled?e.clickedIndex=parseInt(p(s).attr("data-swiper-slide-index"),10):e.clickedIndex=n,i.slideToClickedSlide&&void 0!==e.clickedIndex&&e.clickedIndex!==e.activeIndex&&e.slideToClickedSlide()}};var P={getTranslate:function(t=(this.isHorizontal()?"x":"y")){const{params:e,rtlTranslate:i,translate:s,$wrapperEl:n}=this;if(e.virtualTranslate)return i?-s:s;if(e.cssMode)return s;let o=m(n[0],t);return i&&(o=-o),o||0},setTranslate:function(t,e){const i=this,{rtlTranslate:s,params:n,$wrapperEl:o,wrapperEl:a,progress:r}=i;let l,c=0,h=0;i.isHorizontal()?c=s?-t:t:h=t,n.roundLengths&&(c=Math.floor(c),h=Math.floor(h)),n.cssMode?a[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-c:-h:n.virtualTranslate||o.transform(`translate3d(${c}px, ${h}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?c:h;const d=i.maxTranslate()-i.minTranslate();l=0===d?0:(t-i.minTranslate())/d,l!==r&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t=0,e=this.params.speed,i=!0,s=!0,n){const o=this,{params:a,wrapperEl:r}=o;if(o.animating&&a.preventInteractionOnTransition)return!1;const l=o.minTranslate(),c=o.maxTranslate();let h;if(h=s&&t>l?l:s&&t<c?c:t,o.updateProgress(h),a.cssMode){const t=o.isHorizontal();if(0===e)r[t?"scrollLeft":"scrollTop"]=-h;else{if(!o.support.smoothScroll)return y({swiper:o,targetPosition:-h,side:t?"left":"top"}),!0;r.scrollTo({[t?"left":"top"]:-h,behavior:"smooth"})}return!0}return 0===e?(o.setTransition(0),o.setTranslate(h),i&&(o.emit("beforeTransitionStart",e,n),o.emit("transitionEnd"))):(o.setTransition(e),o.setTranslate(h),i&&(o.emit("beforeTransitionStart",e,n),o.emit("transitionStart")),o.animating||(o.animating=!0,o.onTranslateToWrapperTransitionEnd||(o.onTranslateToWrapperTransitionEnd=function(t){o&&!o.destroyed&&t.target===this&&(o.$wrapperEl[0].removeEventListener("transitionend",o.onTranslateToWrapperTransitionEnd),o.$wrapperEl[0].removeEventListener("webkitTransitionEnd",o.onTranslateToWrapperTransitionEnd),o.onTranslateToWrapperTransitionEnd=null,delete o.onTranslateToWrapperTransitionEnd,i&&o.emit("transitionEnd"))}),o.$wrapperEl[0].addEventListener("transitionend",o.onTranslateToWrapperTransitionEnd),o.$wrapperEl[0].addEventListener("webkitTransitionEnd",o.onTranslateToWrapperTransitionEnd))),!0}};function L({swiper:t,runCallbacks:e,direction:i,step:s}){const{activeIndex:n,previousIndex:o}=t;let a=i;if(a||(a=n>o?"next":n<o?"prev":"reset"),t.emit(`transition${s}`),e&&n!==o){if("reset"===a)return void t.emit(`slideResetTransition${s}`);t.emit(`slideChangeTransition${s}`),"next"===a?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`)}}var O={slideTo:function(t=0,e=this.params.speed,i=!0,s,n){if("number"!=typeof t&&"string"!=typeof t)throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof t}] given.`);if("string"==typeof t){const e=parseInt(t,10);if(!isFinite(e))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${t}] given.`);t=e}const o=this;let a=t;a<0&&(a=0);const{params:r,snapGrid:l,slidesGrid:c,previousIndex:h,activeIndex:d,rtlTranslate:u,wrapperEl:p,enabled:f}=o;if(o.animating&&r.preventInteractionOnTransition||!f&&!s&&!n)return!1;const g=Math.min(o.params.slidesPerGroupSkip,a);let m=g+Math.floor((a-g)/o.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const b=-l[m];if(r.normalizeSlideIndex)for(let t=0;t<c.length;t+=1){const e=-Math.floor(100*b),i=Math.floor(100*c[t]),s=Math.floor(100*c[t+1]);void 0!==c[t+1]?e>=i&&e<s-(s-i)/2?a=t:e>=i&&e<s&&(a=t+1):e>=i&&(a=t)}if(o.initialized&&a!==d){if(!o.allowSlideNext&&b<o.translate&&b<o.minTranslate())return!1;if(!o.allowSlidePrev&&b>o.translate&&b>o.maxTranslate()&&(d||0)!==a)return!1}let x;if(a!==(h||0)&&i&&o.emit("beforeSlideChangeStart"),o.updateProgress(b),x=a>d?"next":a<d?"prev":"reset",u&&-b===o.translate||!u&&b===o.translate)return o.updateActiveIndex(a),r.autoHeight&&o.updateAutoHeight(),o.updateSlidesClasses(),"slide"!==r.effect&&o.setTranslate(b),"reset"!==x&&(o.transitionStart(i,x),o.transitionEnd(i,x)),!1;if(r.cssMode){const t=o.isHorizontal(),i=u?b:-b;if(0===e){const e=o.virtual&&o.params.virtual.enabled;e&&(o.wrapperEl.style.scrollSnapType="none",o._immediateVirtual=!0),p[t?"scrollLeft":"scrollTop"]=i,e&&requestAnimationFrame((()=>{o.wrapperEl.style.scrollSnapType="",o._swiperImmediateVirtual=!1}))}else{if(!o.support.smoothScroll)return y({swiper:o,targetPosition:i,side:t?"left":"top"}),!0;p.scrollTo({[t?"left":"top"]:i,behavior:"smooth"})}return!0}return o.setTransition(e),o.setTranslate(b),o.updateActiveIndex(a),o.updateSlidesClasses(),o.emit("beforeTransitionStart",e,s),o.transitionStart(i,x),0===e?o.transitionEnd(i,x):o.animating||(o.animating=!0,o.onSlideToWrapperTransitionEnd||(o.onSlideToWrapperTransitionEnd=function(t){o&&!o.destroyed&&t.target===this&&(o.$wrapperEl[0].removeEventListener("transitionend",o.onSlideToWrapperTransitionEnd),o.$wrapperEl[0].removeEventListener("webkitTransitionEnd",o.onSlideToWrapperTransitionEnd),o.onSlideToWrapperTransitionEnd=null,delete o.onSlideToWrapperTransitionEnd,o.transitionEnd(i,x))}),o.$wrapperEl[0].addEventListener("transitionend",o.onSlideToWrapperTransitionEnd),o.$wrapperEl[0].addEventListener("webkitTransitionEnd",o.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(t=0,e=this.params.speed,i=!0,s){if("string"==typeof t){const e=parseInt(t,10);if(!isFinite(e))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${t}] given.`);t=e}const n=this;let o=t;return n.params.loop&&(o+=n.loopedSlides),n.slideTo(o,e,i,s)},slideNext:function(t=this.params.speed,e=!0,i){const s=this,{animating:n,enabled:o,params:a}=s;if(!o)return s;let r=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(r=Math.max(s.slidesPerViewDynamic("current",!0),1));const l=s.activeIndex<a.slidesPerGroupSkip?1:r;if(a.loop){if(n&&a.loopPreventsSlide)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return a.rewind&&s.isEnd?s.slideTo(0,t,e,i):s.slideTo(s.activeIndex+l,t,e,i)},slidePrev:function(t=this.params.speed,e=!0,i){const s=this,{params:n,animating:o,snapGrid:a,slidesGrid:r,rtlTranslate:l,enabled:c}=s;if(!c)return s;if(n.loop){if(o&&n.loopPreventsSlide)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}function h(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}const d=h(l?s.translate:-s.translate),u=a.map((t=>h(t)));let p=a[u.indexOf(d)-1];if(void 0===p&&n.cssMode){let t;a.forEach(((e,i)=>{d>=e&&(t=i)})),void 0!==t&&(p=a[t>0?t-1:t])}let f=0;if(void 0!==p&&(f=r.indexOf(p),f<0&&(f=s.activeIndex-1),"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(f=f-s.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),n.rewind&&s.isBeginning){const n=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(n,t,e,i)}return s.slideTo(f,t,e,i)},slideReset:function(t=this.params.speed,e=!0,i){return this.slideTo(this.activeIndex,t,e,i)},slideToClosest:function(t=this.params.speed,e=!0,i,s=.5){const n=this;let o=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,o),r=a+Math.floor((o-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[r]){const t=n.snapGrid[r];l-t>(n.snapGrid[r+1]-t)*s&&(o+=n.params.slidesPerGroup)}else{const t=n.snapGrid[r-1];l-t<=(n.snapGrid[r]-t)*s&&(o-=n.params.slidesPerGroup)}return o=Math.max(o,0),o=Math.min(o,n.slidesGrid.length-1),n.slideTo(o,t,e,i)},slideToClickedSlide:function(){const t=this,{params:e,$wrapperEl:i}=t,s="auto"===e.slidesPerView?t.slidesPerViewDynamic():e.slidesPerView;let n,o=t.clickedIndex;if(e.loop){if(t.animating)return;n=parseInt(p(t.clickedSlide).attr("data-swiper-slide-index"),10),e.centeredSlides?o<t.loopedSlides-s/2||o>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),o=i.children(`.${e.slideClass}[data-swiper-slide-index="${n}"]:not(.${e.slideDuplicateClass})`).eq(0).index(),f((()=>{t.slideTo(o)}))):t.slideTo(o):o>t.slides.length-s?(t.loopFix(),o=i.children(`.${e.slideClass}[data-swiper-slide-index="${n}"]:not(.${e.slideDuplicateClass})`).eq(0).index(),f((()=>{t.slideTo(o)}))):t.slideTo(o)}else t.slideTo(o)}};var D={loopCreate:function(){const t=this,e=s(),{params:i,$wrapperEl:n}=t,o=n.children().length>0?p(n.children()[0].parentNode):n;o.children(`.${i.slideClass}.${i.slideDuplicateClass}`).remove();let a=o.children(`.${i.slideClass}`);if(i.loopFillGroupWithBlank){const t=i.slidesPerGroup-a.length%i.slidesPerGroup;if(t!==i.slidesPerGroup){for(let s=0;s<t;s+=1){const t=p(e.createElement("div")).addClass(`${i.slideClass} ${i.slideBlankClass}`);o.append(t)}a=o.children(`.${i.slideClass}`)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=a.length),t.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),t.loopedSlides+=i.loopAdditionalSlides,t.loopedSlides>a.length&&t.params.loopedSlidesLimit&&(t.loopedSlides=a.length);const r=[],l=[];a.each(((t,e)=>{p(t).attr("data-swiper-slide-index",e)}));for(let e=0;e<t.loopedSlides;e+=1){const t=e-Math.floor(e/a.length)*a.length;l.push(a.eq(t)[0]),r.unshift(a.eq(a.length-t-1)[0])}for(let t=0;t<l.length;t+=1)o.append(p(l[t].cloneNode(!0)).addClass(i.slideDuplicateClass));for(let t=r.length-1;t>=0;t-=1)o.prepend(p(r[t].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){const t=this;t.emit("beforeLoopFix");const{activeIndex:e,slides:i,loopedSlides:s,allowSlidePrev:n,allowSlideNext:o,snapGrid:a,rtlTranslate:r}=t;let l;t.allowSlidePrev=!0,t.allowSlideNext=!0;const c=-a[e]-t.getTranslate();if(e<s){l=i.length-3*s+e,l+=s;t.slideTo(l,0,!1,!0)&&0!==c&&t.setTranslate((r?-t.translate:t.translate)-c)}else if(e>=i.length-s){l=-i.length+e+s,l+=s;t.slideTo(l,0,!1,!0)&&0!==c&&t.setTranslate((r?-t.translate:t.translate)-c)}t.allowSlidePrev=n,t.allowSlideNext=o,t.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:t,params:e,slides:i}=this;t.children(`.${e.slideClass}.${e.slideDuplicateClass},.${e.slideClass}.${e.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};function A(t){const e=this,i=s(),n=o(),a=e.touchEventsData,{params:r,touches:l,enabled:c}=e;if(!c)return;if(e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let h=t;h.originalEvent&&(h=h.originalEvent);let d=p(h.target);if("wrapper"===r.touchEventsTarget&&!d.closest(e.wrapperEl).length)return;if(a.isTouchEvent="touchstart"===h.type,!a.isTouchEvent&&"which"in h&&3===h.which)return;if(!a.isTouchEvent&&"button"in h&&h.button>0)return;if(a.isTouched&&a.isMoved)return;const u=!!r.noSwipingClass&&""!==r.noSwipingClass,f=t.composedPath?t.composedPath():t.path;u&&h.target&&h.target.shadowRoot&&f&&(d=p(f[0]));const m=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,b=!(!h.target||!h.target.shadowRoot);if(r.noSwiping&&(b?function(t,e=this){return function e(i){if(!i||i===s()||i===o())return null;i.assignedSlot&&(i=i.assignedSlot);const n=i.closest(t);return n||i.getRootNode?n||e(i.getRootNode().host):null}(e)}(m,d[0]):d.closest(m)[0]))return void(e.allowClick=!0);if(r.swipeHandler&&!d.closest(r.swipeHandler)[0])return;l.currentX="touchstart"===h.type?h.targetTouches[0].pageX:h.pageX,l.currentY="touchstart"===h.type?h.targetTouches[0].pageY:h.pageY;const x=l.currentX,v=l.currentY,y=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,_=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(y&&(x<=_||x>=n.innerWidth-_)){if("prevent"!==y)return;t.preventDefault()}if(Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=x,l.startY=v,a.touchStartTime=g(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(a.allowThresholdMove=!1),"touchstart"!==h.type){let t=!0;d.is(a.focusableElements)&&(t=!1,"SELECT"===d[0].nodeName&&(a.isTouched=!1)),i.activeElement&&p(i.activeElement).is(a.focusableElements)&&i.activeElement!==d[0]&&i.activeElement.blur();const s=t&&e.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!s||d[0].isContentEditable||h.preventDefault()}e.params.freeMode&&e.params.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",h)}function I(t){const e=s(),i=this,n=i.touchEventsData,{params:o,touches:a,rtlTranslate:r,enabled:l}=i;if(!l)return;let c=t;if(c.originalEvent&&(c=c.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",c));if(n.isTouchEvent&&"touchmove"!==c.type)return;const h="touchmove"===c.type&&c.targetTouches&&(c.targetTouches[0]||c.changedTouches[0]),d="touchmove"===c.type?h.pageX:c.pageX,u="touchmove"===c.type?h.pageY:c.pageY;if(c.preventedByNestedSwiper)return a.startX=d,void(a.startY=u);if(!i.allowTouchMove)return p(c.target).is(n.focusableElements)||(i.allowClick=!1),void(n.isTouched&&(Object.assign(a,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=g()));if(n.isTouchEvent&&o.touchReleaseOnEdges&&!o.loop)if(i.isVertical()){if(u<a.startY&&i.translate<=i.maxTranslate()||u>a.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<a.startX&&i.translate<=i.maxTranslate()||d>a.startX&&i.translate>=i.minTranslate())return;if(n.isTouchEvent&&e.activeElement&&c.target===e.activeElement&&p(c.target).is(n.focusableElements))return n.isMoved=!0,void(i.allowClick=!1);if(n.allowTouchCallbacks&&i.emit("touchMove",c),c.targetTouches&&c.targetTouches.length>1)return;a.currentX=d,a.currentY=u;const f=a.currentX-a.startX,m=a.currentY-a.startY;if(i.params.threshold&&Math.sqrt(f**2+m**2)<i.params.threshold)return;if(void 0===n.isScrolling){let t;i.isHorizontal()&&a.currentY===a.startY||i.isVertical()&&a.currentX===a.startX?n.isScrolling=!1:f*f+m*m>=25&&(t=180*Math.atan2(Math.abs(m),Math.abs(f))/Math.PI,n.isScrolling=i.isHorizontal()?t>o.touchAngle:90-t>o.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",c),void 0===n.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(n.startMoving=!0)),n.isScrolling)return void(n.isTouched=!1);if(!n.startMoving)return;i.allowClick=!1,!o.cssMode&&c.cancelable&&c.preventDefault(),o.touchMoveStopPropagation&&!o.nested&&c.stopPropagation(),n.isMoved||(o.loop&&!o.cssMode&&i.loopFix(),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!o.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)),i.emit("sliderMove",c),n.isMoved=!0;let b=i.isHorizontal()?f:m;a.diff=b,b*=o.touchRatio,r&&(b=-b),i.swipeDirection=b>0?"prev":"next",n.currentTranslate=b+n.startTranslate;let x=!0,v=o.resistanceRatio;if(o.touchReleaseOnEdges&&(v=0),b>0&&n.currentTranslate>i.minTranslate()?(x=!1,o.resistance&&(n.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+n.startTranslate+b)**v)):b<0&&n.currentTranslate<i.maxTranslate()&&(x=!1,o.resistance&&(n.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-n.startTranslate-b)**v)),x&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.allowSlidePrev||i.allowSlideNext||(n.currentTranslate=n.startTranslate),o.threshold>0){if(!(Math.abs(b)>o.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,n.currentTranslate=n.startTranslate,void(a.diff=i.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}o.followFinger&&!o.cssMode&&((o.freeMode&&o.freeMode.enabled&&i.freeMode||o.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),i.params.freeMode&&o.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}function z(t){const e=this,i=e.touchEventsData,{params:s,touches:n,rtlTranslate:o,slidesGrid:a,enabled:r}=e;if(!r)return;let l=t;if(l.originalEvent&&(l=l.originalEvent),i.allowTouchCallbacks&&e.emit("touchEnd",l),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);const c=g(),h=c-i.touchStartTime;if(e.allowClick){const t=l.path||l.composedPath&&l.composedPath();e.updateClickedSlide(t&&t[0]||l.target),e.emit("tap click",l),h<300&&c-i.lastClickTime<300&&e.emit("doubleTap doubleClick",l)}if(i.lastClickTime=g(),f((()=>{e.destroyed||(e.allowClick=!0)})),!i.isTouched||!i.isMoved||!e.swipeDirection||0===n.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let d;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,d=s.followFinger?o?e.translate:-e.translate:-i.currentTranslate,s.cssMode)return;if(e.params.freeMode&&s.freeMode.enabled)return void e.freeMode.onTouchEnd({currentPos:d});let u=0,p=e.slidesSizesGrid[0];for(let t=0;t<a.length;t+=t<s.slidesPerGroupSkip?1:s.slidesPerGroup){const e=t<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==a[t+e]?d>=a[t]&&d<a[t+e]&&(u=t,p=a[t+e]-a[t]):d>=a[t]&&(u=t,p=a[a.length-1]-a[a.length-2])}let m=null,b=null;s.rewind&&(e.isBeginning?b=e.params.virtual&&e.params.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const x=(d-a[u])/p,v=u<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(h>s.longSwipesMs){if(!s.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(x>=s.longSwipesRatio?e.slideTo(s.rewind&&e.isEnd?m:u+v):e.slideTo(u)),"prev"===e.swipeDirection&&(x>1-s.longSwipesRatio?e.slideTo(u+v):null!==b&&x<0&&Math.abs(x)>s.longSwipesRatio?e.slideTo(b):e.slideTo(u))}else{if(!s.shortSwipes)return void e.slideTo(e.activeIndex);e.navigation&&(l.target===e.navigation.nextEl||l.target===e.navigation.prevEl)?l.target===e.navigation.nextEl?e.slideTo(u+v):e.slideTo(u):("next"===e.swipeDirection&&e.slideTo(null!==m?m:u+v),"prev"===e.swipeDirection&&e.slideTo(null!==b?b:u))}}function R(){const t=this,{params:e,el:i}=t;if(i&&0===i.offsetWidth)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:n,snapGrid:o}=t;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.run(),t.allowSlidePrev=n,t.allowSlideNext=s,t.params.watchOverflow&&o!==t.snapGrid&&t.checkOverflow()}function F(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function $(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:s}=t;if(!s)return;let n;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();const o=t.maxTranslate()-t.minTranslate();n=0===o?0:(t.translate-t.minTranslate())/o,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}let B=!1;function V(){}const N=(t,e)=>{const i=s(),{params:n,touchEvents:o,el:a,wrapperEl:r,device:l,support:c}=t,h=!!n.nested,d="on"===e?"addEventListener":"removeEventListener",u=e;if(c.touch){const e=!("touchstart"!==o.start||!c.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a[d](o.start,t.onTouchStart,e),a[d](o.move,t.onTouchMove,c.passiveListener?{passive:!1,capture:h}:h),a[d](o.end,t.onTouchEnd,e),o.cancel&&a[d](o.cancel,t.onTouchEnd,e)}else a[d](o.start,t.onTouchStart,!1),i[d](o.move,t.onTouchMove,h),i[d](o.end,t.onTouchEnd,!1);(n.preventClicks||n.preventClicksPropagation)&&a[d]("click",t.onClick,!0),n.cssMode&&r[d]("scroll",t.onScroll),n.updateOnWindowResize?t[u](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",R,!0):t[u]("observerUpdate",R,!0)};var H={attachEvents:function(){const t=this,e=s(),{params:i,support:n}=t;t.onTouchStart=A.bind(t),t.onTouchMove=I.bind(t),t.onTouchEnd=z.bind(t),i.cssMode&&(t.onScroll=$.bind(t)),t.onClick=F.bind(t),n.touch&&!B&&(e.addEventListener("touchstart",V),B=!0),N(t,"on")},detachEvents:function(){N(this,"off")}};const W=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;var j={setBreakpoint:function(){const t=this,{activeIndex:e,initialized:i,loopedSlides:s=0,params:n,$el:o}=t,a=n.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const r=t.getBreakpoint(a,t.params.breakpointsBase,t.el);if(!r||t.currentBreakpoint===r)return;const l=(r in a?a[r]:void 0)||t.originalParams,c=W(t,n),h=W(t,l),d=n.enabled;c&&!h?(o.removeClass(`${n.containerModifierClass}grid ${n.containerModifierClass}grid-column`),t.emitContainerClasses()):!c&&h&&(o.addClass(`${n.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===n.grid.fill)&&o.addClass(`${n.containerModifierClass}grid-column`),t.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((e=>{const i=n[e]&&n[e].enabled,s=l[e]&&l[e].enabled;i&&!s&&t[e].disable(),!i&&s&&t[e].enable()}));const u=l.direction&&l.direction!==n.direction,p=n.loop&&(l.slidesPerView!==n.slidesPerView||u);u&&i&&t.changeDirection(),x(t.params,l);const f=t.params.enabled;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),d&&!f?t.disable():!d&&f&&t.enable(),t.currentBreakpoint=r,t.emit("_beforeBreakpoint",l),p&&i&&(t.loopDestroy(),t.loopCreate(),t.updateSlides(),t.slideTo(e-s+t.loopedSlides,0,!1)),t.emit("breakpoint",l)},getBreakpoint:function(t,e="window",i){if(!t||"container"===e&&!i)return;let s=!1;const n=o(),a="window"===e?n.innerHeight:i.clientHeight,r=Object.keys(t).map((t=>{if("string"==typeof t&&0===t.indexOf("@")){const e=parseFloat(t.substr(1));return{value:a*e,point:t}}return{value:t,point:t}}));r.sort(((t,e)=>parseInt(t.value,10)-parseInt(e.value,10)));for(let t=0;t<r.length;t+=1){const{point:o,value:a}=r[t];"window"===e?n.matchMedia(`(min-width: ${a}px)`).matches&&(s=o):a<=i.clientWidth&&(s=o)}return s||"max"}};var G={addClasses:function(){const t=this,{classNames:e,params:i,rtl:s,$el:n,device:o,support:a}=t,r=function(t,e){const i=[];return t.forEach((t=>{"object"==typeof t?Object.keys(t).forEach((s=>{t[s]&&i.push(e+s)})):"string"==typeof t&&i.push(e+t)})),i}(["initialized",i.direction,{"pointer-events":!a.touch},{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:o.android},{ios:o.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...r),n.addClass([...e].join(" ")),t.emitContainerClasses()},removeClasses:function(){const{$el:t,classNames:e}=this;t.removeClass(e.join(" ")),this.emitContainerClasses()}};var q={loadImage:function(t,e,i,s,n,a){const r=o();let l;function c(){a&&a()}p(t).parent("picture")[0]||t.complete&&n?c():e?(l=new r.Image,l.onload=c,l.onerror=c,s&&(l.sizes=s),i&&(l.srcset=i),e&&(l.src=e)):c()},preloadImages:function(){const t=this;function e(){null!=t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}t.imagesToLoad=t.$el.find("img");for(let i=0;i<t.imagesToLoad.length;i+=1){const s=t.imagesToLoad[i];t.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,e)}}};var Y={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopedSlidesLimit:!0,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function X(t,e){return function(i={}){const s=Object.keys(i)[0],n=i[s];"object"==typeof n&&null!==n?(["navigation","pagination","scrollbar"].indexOf(s)>=0&&!0===t[s]&&(t[s]={auto:!0}),s in t&&"enabled"in n?(!0===t[s]&&(t[s]={enabled:!0}),"object"!=typeof t[s]||"enabled"in t[s]||(t[s].enabled=!0),t[s]||(t[s]={enabled:!1}),x(e,i)):x(e,i)):x(e,i)}}const U={eventsEmitter:T,update:E,translate:P,transition:{setTransition:function(t,e){const i=this;i.params.cssMode||i.$wrapperEl.transition(t),i.emit("setTransition",t,e)},transitionStart:function(t=!0,e){const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),L({swiper:i,runCallbacks:t,direction:e,step:"Start"}))},transitionEnd:function(t=!0,e){const i=this,{params:s}=i;i.animating=!1,s.cssMode||(i.setTransition(0),L({swiper:i,runCallbacks:t,direction:e,step:"End"}))}},slide:O,loop:D,grabCursor:{setGrabCursor:function(t){const e=this;if(e.support.touch||!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i="container"===e.params.touchEventsTarget?e.el:e.wrapperEl;i.style.cursor="move",i.style.cursor=t?"grabbing":"grab"},unsetGrabCursor:function(){const t=this;t.support.touch||t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t["container"===t.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:H,breakpoints:j,checkOverflow:{checkOverflow:function(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:s}=i;if(s){const e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*s;t.isLocked=t.size>i}else t.isLocked=1===t.snapGrid.length;!0===i.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===i.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:G,images:q},K={};class Z{constructor(...t){let e,i;if(1===t.length&&t[0].constructor&&"Object"===Object.prototype.toString.call(t[0]).slice(8,-1)?i=t[0]:[e,i]=t,i||(i={}),i=x({},i),e&&!i.el&&(i.el=e),i.el&&p(i.el).length>1){const t=[];return p(i.el).each((e=>{const s=x({},i,{el:e});t.push(new Z(s))})),t}const s=this;s.__swiper__=!0,s.support=S(),s.device=C({userAgent:i.userAgent}),s.browser=k(),s.eventsListeners={},s.eventsAnyListeners=[],s.modules=[...s.__modules__],i.modules&&Array.isArray(i.modules)&&s.modules.push(...i.modules);const n={};s.modules.forEach((t=>{t({swiper:s,extendParams:X(i,n),on:s.on.bind(s),once:s.once.bind(s),off:s.off.bind(s),emit:s.emit.bind(s)})}));const o=x({},Y,n);return s.params=x({},o,K,i),s.originalParams=x({},s.params),s.passedParams=x({},i),s.params&&s.params.on&&Object.keys(s.params.on).forEach((t=>{s.on(t,s.params.on[t])})),s.params&&s.params.onAny&&s.onAny(s.params.onAny),s.$=p,Object.assign(s,{enabled:s.params.enabled,el:e,classNames:[],slides:p(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return"horizontal"===s.params.direction},isVertical(){return"vertical"===s.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:function(){const t=["touchstart","touchmove","touchend","touchcancel"],e=["pointerdown","pointermove","pointerup"];return s.touchEventsTouch={start:t[0],move:t[1],end:t[2],cancel:t[3]},s.touchEventsDesktop={start:e[0],move:e[1],end:e[2]},s.support.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:s.params.focusableElements,lastClickTime:g(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.emit("_swiper"),s.params.init&&s.init(),s}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,e){const i=this;t=Math.min(Math.max(t,0),1);const s=i.minTranslate(),n=(i.maxTranslate()-s)*t+s;i.translateTo(n,void 0===e?0:e),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=t.el.className.split(" ").filter((e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)));t.emit("_containerClasses",e.join(" "))}getSlideClasses(t){const e=this;return e.destroyed?"":t.className.split(" ").filter((t=>0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass))).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=[];t.slides.each((i=>{const s=t.getSlideClasses(i);e.push({slideEl:i,classNames:s}),t.emit("_slideClass",i,s)})),t.emit("_slideClasses",e)}slidesPerViewDynamic(t="current",e=!1){const{params:i,slides:s,slidesGrid:n,slidesSizesGrid:o,size:a,activeIndex:r}=this;let l=1;if(i.centeredSlides){let t,e=s[r].swiperSlideSize;for(let i=r+1;i<s.length;i+=1)s[i]&&!t&&(e+=s[i].swiperSlideSize,l+=1,e>a&&(t=!0));for(let i=r-1;i>=0;i-=1)s[i]&&!t&&(e+=s[i].swiperSlideSize,l+=1,e>a&&(t=!0))}else if("current"===t)for(let t=r+1;t<s.length;t+=1){(e?n[t]+o[t]-n[r]<a:n[t]-n[r]<a)&&(l+=1)}else for(let t=r-1;t>=0;t-=1){n[r]-n[t]<a&&(l+=1)}return l}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:e,params:i}=t;function s(){const e=t.rtlTranslate?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}let n;i.breakpoints&&t.setBreakpoint(),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.params.freeMode&&t.params.freeMode.enabled?(s(),t.params.autoHeight&&t.updateAutoHeight()):(n=("auto"===t.params.slidesPerView||t.params.slidesPerView>1)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),n||s()),i.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,e=!0){const i=this,s=i.params.direction;return t||(t="horizontal"===s?"vertical":"horizontal"),t===s||"horizontal"!==t&&"vertical"!==t||(i.$el.removeClass(`${i.params.containerModifierClass}${s}`).addClass(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.each((e=>{"vertical"===t?e.style.width="":e.style.height=""})),i.emit("changeDirection"),e&&i.update()),i}changeLanguageDirection(t){const e=this;e.rtl&&"rtl"===t||!e.rtl&&"ltr"===t||(e.rtl="rtl"===t,e.rtlTranslate="horizontal"===e.params.direction&&e.rtl,e.rtl?(e.$el.addClass(`${e.params.containerModifierClass}rtl`),e.el.dir="rtl"):(e.$el.removeClass(`${e.params.containerModifierClass}rtl`),e.el.dir="ltr"),e.update())}mount(t){const e=this;if(e.mounted)return!0;const i=p(t||e.params.el);if(!(t=i[0]))return!1;t.swiper=e;const n=()=>`.${(e.params.wrapperClass||"").trim().split(" ").join(".")}`;let o=(()=>{if(t&&t.shadowRoot&&t.shadowRoot.querySelector){const e=p(t.shadowRoot.querySelector(n()));return e.children=t=>i.children(t),e}return i.children?i.children(n()):p(i).children(n())})();if(0===o.length&&e.params.createElements){const t=s().createElement("div");o=p(t),t.className=e.params.wrapperClass,i.append(t),i.children(`.${e.params.slideClass}`).each((t=>{o.append(t)}))}return Object.assign(e,{$el:i,el:t,$wrapperEl:o,wrapperEl:o[0],mounted:!0,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===i.css("direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===i.css("direction")),wrongRTL:"-webkit-box"===o.css("display")}),!0}init(t){const e=this;if(e.initialized)return e;return!1===e.mount(t)||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.enabled&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit,!1,!0):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit,!1,!0),e.attachEvents(),e.initialized=!0,e.emit("init"),e.emit("afterInit")),e}destroy(t=!0,e=!0){const i=this,{params:s,$el:n,$wrapperEl:o,slides:a}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),e&&(i.removeClasses(),n.removeAttr("style"),o.removeAttr("style"),a&&a.length&&a.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((t=>{i.off(t)})),!1!==t&&(i.$el[0].swiper=null,function(t){const e=t;Object.keys(e).forEach((t=>{try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}}))}(i)),i.destroyed=!0),null}static extendDefaults(t){x(K,t)}static get extendedDefaults(){return K}static get defaults(){return Y}static installModule(t){Z.prototype.__modules__||(Z.prototype.__modules__=[]);const e=Z.prototype.__modules__;"function"==typeof t&&e.indexOf(t)<0&&e.push(t)}static use(t){return Array.isArray(t)?(t.forEach((t=>Z.installModule(t))),Z):(Z.installModule(t),Z)}}Object.keys(U).forEach((t=>{Object.keys(U[t]).forEach((e=>{Z.prototype[e]=U[t][e]}))})),Z.use([function({swiper:t,on:e,emit:i}){const s=o();let n=null,a=null;const r=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},l=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};e("init",(()=>{t.params.resizeObserver&&void 0!==s.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=s.requestAnimationFrame((()=>{const{width:i,height:s}=t;let n=i,o=s;e.forEach((({contentBoxSize:e,contentRect:i,target:s})=>{s&&s!==t.el||(n=i?i.width:(e[0]||e).inlineSize,o=i?i.height:(e[0]||e).blockSize)})),n===i&&o===s||r()}))})),n.observe(t.el)):(s.addEventListener("resize",r),s.addEventListener("orientationchange",l))})),e("destroy",(()=>{a&&s.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),s.removeEventListener("resize",r),s.removeEventListener("orientationchange",l)}))},function({swiper:t,extendParams:e,on:i,emit:s}){const n=[],a=o(),r=(t,e={})=>{const i=new(a.MutationObserver||a.WebkitMutationObserver)((t=>{if(1===t.length)return void s("observerUpdate",t[0]);const e=function(){s("observerUpdate",t[0])};a.requestAnimationFrame?a.requestAnimationFrame(e):a.setTimeout(e,0)}));i.observe(t,{attributes:void 0===e.attributes||e.attributes,childList:void 0===e.childList||e.childList,characterData:void 0===e.characterData||e.characterData}),n.push(i)};e({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=t.$el.parents();for(let t=0;t<e.length;t+=1)r(e[t])}r(t.$el[0],{childList:t.params.observeSlideChildren}),r(t.$wrapperEl[0],{attributes:!1})}})),i("destroy",(()=>{n.forEach((t=>{t.disconnect()})),n.splice(0,n.length)}))}]);var J=Z;function Q(t,e,i,n){const o=s();return t.params.createElements&&Object.keys(n).forEach((s=>{if(!i[s]&&!0===i.auto){let a=t.$el.children(`.${n[s]}`)[0];a||(a=o.createElement("div"),a.className=n[s],t.$el.append(a)),i[s]=a,e[s]=a}})),i}function tt(t=""){return`.${t.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}`}function et(t){return t+.5|0}const it=(t,e,i)=>Math.max(Math.min(t,i),e);function st(t){return it(et(2.55*t),0,255)}function nt(t){return it(et(255*t),0,255)}function ot(t){return it(et(t/2.55)/100,0,1)}function at(t){return it(et(100*t),0,100)}const rt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},lt=[..."0123456789ABCDEF"],ct=t=>lt[15&t],ht=t=>lt[(240&t)>>4]+lt[15&t],dt=t=>(240&t)>>4==(15&t);function ut(t){var e=(t=>dt(t.r)&&dt(t.g)&&dt(t.b)&&dt(t.a))(t)?ct:ht;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const pt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function ft(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function gt(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function mt(t,e,i){const s=ft(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function bt(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,c;return n!==o&&(c=n-o,l=a>.5?c/(2-n-o):c/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,c,n),r=60*r+.5),[0|r,l||0,a]}function xt(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(nt)}function vt(t,e,i){return xt(ft,t,e,i)}function yt(t){return(t%360+360)%360}function _t(t){const e=pt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?st(+e[5]):nt(+e[5]));const n=yt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return xt(mt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return xt(gt,t,e,i)}(n,o,a):vt(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}const wt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Mt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let St;function Ct(t){St||(St=function(){const t={},e=Object.keys(Mt),i=Object.keys(wt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,wt[o]);o=parseInt(Mt[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),St.transparent=[0,0,0,0]);const e=St[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const kt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const Tt=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Et=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Pt(t,e,i){if(t){let s=bt(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=vt(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function Lt(t,e){return t?Object.assign(e||{},t):t}function Ot(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=nt(t[3]))):(e=Lt(t,{r:0,g:0,b:0,a:1})).a=nt(e.a),e}function Dt(t){return"r"===t.charAt(0)?function(t){const e=kt.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?st(t):it(255*t,0,255)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?st(i):it(i,0,255)),s=255&(e[4]?st(s):it(s,0,255)),n=255&(e[6]?st(n):it(n,0,255)),{r:i,g:s,b:n,a:o}}}(t):_t(t)}class At{constructor(t){if(t instanceof At)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Ot(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*rt[s[1]],g:255&17*rt[s[2]],b:255&17*rt[s[3]],a:5===o?17*rt[s[4]]:255}:7!==o&&9!==o||(n={r:rt[s[1]]<<4|rt[s[2]],g:rt[s[3]]<<4|rt[s[4]],b:rt[s[5]]<<4|rt[s[6]],a:9===o?rt[s[7]]<<4|rt[s[8]]:255})),i=n||Ct(t)||Dt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Lt(this._rgb);return t&&(t.a=ot(t.a)),t}set rgb(t){this._rgb=Ot(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${ot(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?ut(this._rgb):void 0}hslString(){return this._valid?function(t){if(!t)return;const e=bt(t),i=e[0],s=at(e[1]),n=at(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${ot(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=Et(ot(t.r)),n=Et(ot(t.g)),o=Et(ot(t.b));return{r:nt(Tt(s+i*(Et(ot(e.r))-s))),g:nt(Tt(n+i*(Et(ot(e.g))-n))),b:nt(Tt(o+i*(Et(ot(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new At(this.rgb)}alpha(t){return this._rgb.a=nt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=et(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Pt(this._rgb,2,t),this}darken(t){return Pt(this._rgb,2,-t),this}saturate(t){return Pt(this._rgb,1,t),this}desaturate(t){return Pt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=bt(t);i[0]=yt(i[0]+e),i=vt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function It(){}const zt=(()=>{let t=0;return()=>t++})();function Rt(t){return null==t}function Ft(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function $t(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function Bt(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function Vt(t,e){return Bt(t)?t:e}function Nt(t,e){return void 0===t?e:t}const Ht=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function Wt(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function jt(t,e,i,s){let n,o,a;if(Ft(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if($t(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function Gt(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function qt(t){if(Ft(t))return t.map(qt);if($t(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=qt(t[i[n]]);return e}return t}function Yt(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function Xt(t,e,i,s){if(!Yt(t))return;const n=e[t],o=i[t];$t(n)&&$t(o)?Ut(n,o,s):e[t]=qt(o)}function Ut(t,e,i){const s=Ft(e)?e:[e],n=s.length;if(!$t(t))return t;const o=(i=i||{}).merger||Xt;let a;for(let e=0;e<n;++e){if(a=s[e],!$t(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function Kt(t,e){return Ut(t,e,{merger:Zt})}function Zt(t,e,i){if(!Yt(t))return;const s=e[t],n=i[t];$t(s)&&$t(n)?Kt(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=qt(n))}const Jt={"":t=>t,x:t=>t.x,y:t=>t.y};function Qt(t,e){const i=Jt[e]||(Jt[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function te(t){return t.charAt(0).toUpperCase()+t.slice(1)}const ee=t=>void 0!==t,ie=t=>"function"==typeof t,se=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};const ne=Math.PI,oe=2*ne,ae=oe+ne,re=Number.POSITIVE_INFINITY,le=ne/180,ce=ne/2,he=ne/4,de=2*ne/3,ue=Math.log10,pe=Math.sign;function fe(t,e,i){return Math.abs(t-e)<i}function ge(t){const e=Math.round(t);t=fe(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(ue(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function me(t){return!isNaN(parseFloat(t))&&isFinite(t)}function be(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function xe(t){return t*(ne/180)}function ve(t){return t*(180/ne)}function ye(t){if(!Bt(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function _e(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*ne&&(o+=oe),{angle:o,distance:n}}function we(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Me(t,e){return(t-e+ae)%oe-ne}function Se(t){return(t%oe+oe)%oe}function Ce(t,e,i,s){const n=Se(t),o=Se(e),a=Se(i),r=Se(o-n),l=Se(a-n),c=Se(n-o),h=Se(n-a);return n===o||n===a||s&&o===a||r>l&&c<h}function ke(t,e,i){return Math.max(e,Math.min(i,t))}function Te(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Ee(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Pe=(t,e,i,s)=>Ee(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),Le=(t,e,i)=>Ee(t,i,(s=>t[s][e]>=i));const Oe=["push","pop","shift","splice","unshift"];function De(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(Oe.forEach((e=>{delete t[e]})),delete t._chartjs)}function Ae(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}const Ie="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ze(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,Ie.call(window,(()=>{s=!1,t.apply(e,i)})))}}const Re=t=>"start"===t?"left":"end"===t?"right":"center",Fe=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function $e(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:c,max:h,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=ke(Math.min(Pe(r,a.axis,c).lo,i?s:Pe(e,l,a.getPixelForValue(c)).lo),0,s-1)),o=u?ke(Math.max(Pe(r,a.axis,h,!0).hi+1,i?0:Pe(e,l,a.getPixelForValue(h),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function Be(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const Ve=t=>0===t||1===t,Ne=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*oe/i),He=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*oe/i)+1,We={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*ce),easeOutSine:t=>Math.sin(t*ce),easeInOutSine:t=>-.5*(Math.cos(ne*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Ve(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Ve(t)?t:Ne(t,.075,.3),easeOutElastic:t=>Ve(t)?t:He(t,.075,.3),easeInOutElastic(t){const e=.1125;return Ve(t)?t:t<.5?.5*Ne(2*t,e,.45):.5+.5*He(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-We.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*We.easeInBounce(2*t):.5*We.easeOutBounce(2*t-1)+.5};function je(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Ge(t){return je(t)?t:new At(t)}function qe(t){return je(t)?t:new At(t).saturate(.5).darken(.1).hexString()}const Ye=["x","y","borderWidth","radius","tension"],Xe=["color","borderColor","backgroundColor"];const Ue=new Map;function Ke(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=Ue.get(i);return s||(s=new Intl.NumberFormat(t,e),Ue.set(i,s)),s}(e,i).format(t)}const Ze={values(t){return Ft(t)?t:""+t},numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const a=ue(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),Ke(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(ue(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?Ze.numeric.call(this,t,e,i):""}};var Je={formatters:Ze};const Qe=Object.create(null),ti=Object.create(null);function ei(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function ii(t,e,i){return"string"==typeof e?Ut(ei(t,e),i):Ut(ei(t,""),e)}class si{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>qe(e.backgroundColor),this.hoverBorderColor=(t,e)=>qe(e.borderColor),this.hoverColor=(t,e)=>qe(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ii(this,t,e)}get(t){return ei(this,t)}describe(t,e){return ii(ti,t,e)}override(t,e){return ii(Qe,t,e)}route(t,e,i,s){const n=ei(this,t),o=ei(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return $t(t)?Object.assign({},e,t):Nt(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var ni=new si({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Xe},numbers:{type:"number",properties:Ye}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Je.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function oi(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function ai(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,c,h,d,u;for(l=0;l<r;l++)if(d=i[l],null!=d&&!0!==Ft(d))a=oi(t,n,o,a,d);else if(Ft(d))for(c=0,h=d.length;c<h;c++)u=d[c],null==u||Ft(u)||(a=oi(t,n,o,a,u));t.restore();const p=o.length/2;if(p>i.length){for(l=0;l<p;l++)delete n[o[l]];o.splice(0,p)}return a}function ri(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function li(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ci(t,e,i,s){hi(t,e,i,s,null)}function hi(t,e,i,s,n){let o,a,r,l,c,h,d,u;const p=e.pointStyle,f=e.rotation,g=e.radius;let m=(f||0)*le;if(p&&"object"==typeof p&&(o=p.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(p,-p.width/2,-p.height/2,p.width,p.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),p){default:n?t.ellipse(i,s,n/2,g,0,0,oe):t.arc(i,s,g,0,oe),t.closePath();break;case"triangle":h=n?n/2:g,t.moveTo(i+Math.sin(m)*h,s-Math.cos(m)*g),m+=de,t.lineTo(i+Math.sin(m)*h,s-Math.cos(m)*g),m+=de,t.lineTo(i+Math.sin(m)*h,s-Math.cos(m)*g),t.closePath();break;case"rectRounded":c=.516*g,l=g-c,a=Math.cos(m+he)*l,d=Math.cos(m+he)*(n?n/2-c:l),r=Math.sin(m+he)*l,u=Math.sin(m+he)*(n?n/2-c:l),t.arc(i-d,s-r,c,m-ne,m-ce),t.arc(i+u,s-a,c,m-ce,m),t.arc(i+d,s+r,c,m,m+ce),t.arc(i-u,s+a,c,m+ce,m+ne),t.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*g,h=n?n/2:l,t.rect(i-h,s-l,2*h,2*l);break}m+=he;case"rectRot":d=Math.cos(m)*(n?n/2:g),a=Math.cos(m)*g,r=Math.sin(m)*g,u=Math.sin(m)*(n?n/2:g),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=he;case"cross":d=Math.cos(m)*(n?n/2:g),a=Math.cos(m)*g,r=Math.sin(m)*g,u=Math.sin(m)*(n?n/2:g),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:g),a=Math.cos(m)*g,r=Math.sin(m)*g,u=Math.sin(m)*(n?n/2:g),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=he,d=Math.cos(m)*(n?n/2:g),a=Math.cos(m)*g,r=Math.sin(m)*g,u=Math.sin(m)*(n?n/2:g),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*g,r=Math.sin(m)*g,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:g),s+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function di(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function ui(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function pi(t){t.restore()}function fi(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function gi(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function mi(t,e,i,s,n,o={}){const a=Ft(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]);Rt(e.rotation)||t.rotate(e.rotation);e.color&&(t.fillStyle=e.color);e.textAlign&&(t.textAlign=e.textAlign);e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)c=a[l],o.backdrop&&xi(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),Rt(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,i,s,o.maxWidth)),t.fillText(c,i,s,o.maxWidth),bi(t,i,s,c,o),s+=n.lineHeight;t.restore()}function bi(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,c=i+o.actualBoundingBoxDescent,h=n.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,h),t.lineTo(r,h),t.stroke()}}function xi(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function vi(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-ce,ne,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,ne,ce,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,ce,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-ce,!0),t.lineTo(i+a.topLeft,s)}const yi=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,_i=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function wi(t,e){const i=(""+t).match(yi);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function Mi(t,e){const i={},s=$t(e),n=s?Object.keys(e):e,o=$t(t)?s?i=>Nt(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=+o(t)||0;return i}function Si(t){return Mi(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ci(t){return Mi(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ki(t){const e=Si(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Ti(t,e){t=t||{},e=e||ni.font;let i=Nt(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=Nt(t.style,e.style);s&&!(""+s).match(_i)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:Nt(t.family,e.family),lineHeight:wi(Nt(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:Nt(t.weight,e.weight),string:""};return n.string=function(t){return!t||Rt(t.size)||Rt(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function Ei(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&Ft(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function Pi(t,e){return Object.assign(Object.create(t),e)}function Li(t,e=[""],i=t,s,n=(()=>t[0])){ee(s)||(s=Ni("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>Li([n,...t],e,i,s)};return new Proxy(o,{deleteProperty(e,i){return delete e[i],delete e._keys,delete t[0][i],!0},get(i,s){return zi(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=Ni(Ai(o,t),i),ee(n))return Ii(t,n)?Bi(i,s,t,n):n}(s,e,t,i)))},getOwnPropertyDescriptor(t,e){return Reflect.getOwnPropertyDescriptor(t._scopes[0],e)},getPrototypeOf(){return Reflect.getPrototypeOf(t[0])},has(t,e){return Hi(t).includes(e)},ownKeys(t){return Hi(t)},set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Oi(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Di(t,s),setContext:e=>Oi(t,e,i,s),override:n=>Oi(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty(e,i){return delete e[i],delete t[i],!0},get(t,e,i){return zi(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];ie(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t),e=e(o,a||s),r.delete(t),Ii(t,e)&&(e=Bi(n._scopes,n,t,e));return e}(e,r,t,i));Ft(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(ee(o.index)&&s(t))e=e[o.index%e.length];else if($t(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Bi(s,n,t,l);e.push(Oi(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable));Ii(e,r)&&(r=Oi(r,n,o&&o[e],a));return r}(t,e,i)))},getOwnPropertyDescriptor(e,i){return e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i)},getPrototypeOf(){return Reflect.getPrototypeOf(t)},has(e,i){return Reflect.has(t,i)},ownKeys(){return Reflect.ownKeys(t)},set(e,i,s){return t[i]=s,delete e[i],!0}})}function Di(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:ie(i)?i:()=>i,isIndexable:ie(s)?s:()=>s}}const Ai=(t,e)=>t?t+te(e):e,Ii=(t,e)=>$t(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function zi(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function Ri(t,e,i){return ie(t)?t(e,i):t}const Fi=(t,e)=>!0===t?e:"string"==typeof t?Qt(e,t):void 0;function $i(t,e,i,s,n){for(const o of e){const e=Fi(i,o);if(e){t.add(e);const o=Ri(e._fallback,i,n);if(ee(o)&&o!==i&&o!==s)return o}else if(!1===e&&ee(s)&&i!==s)return null}return!1}function Bi(t,e,i,s){const n=e._rootScopes,o=Ri(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let l=Vi(r,a,i,o||i,s);return null!==l&&((!ee(o)||o===i||(l=Vi(r,a,o,l,s),null!==l))&&Li(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];if(Ft(n)&&$t(i))return i;return n||{}}(e,i,s))))}function Vi(t,e,i,s,n){for(;i;)i=$i(t,e,i,s,n);return i}function Ni(t,e){for(const i of e){if(!i)continue;const e=i[t];if(ee(e))return e}}function Hi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Wi(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,c,h;for(r=0,l=s;r<l;++r)c=r+i,h=e[c],a[r]={r:n.parse(Qt(h,o),c)};return a}const ji=Number.EPSILON||1e-14,Gi=(t,e)=>e<t.length&&!t[e].skip&&t[e],qi=t=>"x"===t?"y":"x";function Yi(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=we(o,n),l=we(a,o);let c=r/(r+l),h=l/(r+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const d=s*c,u=s*h;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Xi(t,e="x"){const i=qi(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,c=Gi(t,0);for(a=0;a<s;++a)if(r=l,l=c,c=Gi(t,a+1),l){if(c){const t=c[e]-l[e];n[a]=0!==t?(c[i]-l[i])/t:0}o[a]=r?c?pe(n[a-1])!==pe(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,c=Gi(t,0);for(let h=0;h<s-1;++h)l=c,c=Gi(t,h+1),l&&c&&(fe(e[h],0,ji)?i[h]=i[h+1]=0:(n=i[h]/e[h],o=i[h+1]/e[h],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[h]=n*a*e[h],i[h+1]=o*a*e[h])))}(t,n,o),function(t,e,i="x"){const s=qi(i),n=t.length;let o,a,r,l=Gi(t,0);for(let c=0;c<n;++c){if(a=r,r=l,l=Gi(t,c+1),!r)continue;const n=r[i],h=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=h-o*e[c]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=h+o*e[c])}}(t,o,e)}function Ui(t,e,i){return Math.max(Math.min(t,i),e)}function Ki(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)Xi(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=Yi(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=di(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&di(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=Ui(n.cp1x,e.left,e.right),n.cp1y=Ui(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=Ui(n.cp2x,e.left,e.right),n.cp2y=Ui(n.cp2y,e.top,e.bottom)))}(t,i)}function Zi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ji(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Qi(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const ts=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);const es=["top","right","bottom","left"];function is(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=es[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}function ss(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=ts(i),o="border-box"===n.boxSizing,a=is(n,"padding"),r=is(n,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(h&&r.left),u=a.top+(h&&r.top);let{width:p,height:f}=e;return o&&(p-=a.width+r.width,f-=a.height+r.height),{x:Math.round((l-d)/p*i.width/s),y:Math.round((c-u)/f*i.height/s)}}const ns=t=>Math.round(10*t)/10;function os(t,e,i,s){const n=ts(t),o=is(n,"margin"),a=Qi(n.maxWidth,t,"clientWidth")||re,r=Qi(n.maxHeight,t,"clientHeight")||re,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ji(t);if(o){const t=o.getBoundingClientRect(),a=ts(o),r=is(a,"border","width"),l=is(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=Qi(a.maxWidth,o,"clientWidth"),n=Qi(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||re,maxHeight:n||re}}(t,e,i);let{width:c,height:h}=l;if("content-box"===n.boxSizing){const t=is(n,"border","width"),e=is(n,"padding");c-=e.width+t.width,h-=e.height+t.height}c=Math.max(0,c-o.width),h=Math.max(0,s?c/s:h-o.height),c=ns(Math.min(c,a,l.maxWidth)),h=ns(Math.min(h,r,l.maxHeight)),c&&!h&&(h=ns(c/2));return(void 0!==e||void 0!==i)&&s&&l.height&&h>l.height&&(h=l.height,c=ns(Math.floor(h*s))),{width:c,height:h}}function as(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const rs=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ls(t,e){const i=function(t,e){return ts(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function cs(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function hs(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ds(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=cs(t,n,i),r=cs(n,o,i),l=cs(o,e,i),c=cs(a,r,i),h=cs(r,l,i);return cs(c,h,i)}function us(t,e,i){return t?function(t,e){return{x(i){return t+t+e-i},setWidth(t){e=t},textAlign(t){return"center"===t?t:"right"===t?"left":"right"},xPlus(t,e){return t-e},leftForLtr(t,e){return t-e}}}(e,i):{x(t){return t},setWidth(t){},textAlign(t){return t},xPlus(t,e){return t+e},leftForLtr(t,e){return t}}}function ps(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function fs(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function gs(t){return"angle"===t?{between:Ce,compare:Me,normalize:Se}:{between:Te,compare:(t,e)=>t-e,normalize:t=>t}}function ms({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function bs(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:c}=gs(s),{start:h,end:d,loop:u,style:p}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=gs(s),l=e.length;let c,h,{start:d,end:u,loop:p}=t;if(p){for(d+=l,u+=l,c=0,h=l;c<h&&a(r(e[d%l][s]),n,o);++c)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:p,style:t.style}}(t,e,i),f=[];let g,m,b,x=!1,v=null;const y=()=>x||l(n,b,g)&&0!==r(n,b),_=()=>!x||0===r(o,g)||l(o,b,g);for(let t=h,i=h;t<=d;++t)m=e[t%a],m.skip||(g=c(m[s]),g!==b&&(x=l(g,n,o),null===v&&y()&&(v=0===r(g,n)?t:i),null!==v&&_()&&(f.push(ms({start:v,end:t,loop:u,count:a,style:p})),v=null),i=t,b=g));return null!==v&&f.push(ms({start:v,end:d,loop:u,count:a,style:p})),f}function xs(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=bs(s[n],t.points,e);o.length&&i.push(...o)}return i}function vs(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=ys(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,c=[];let h=o,d=e[0].start,u=d;function p(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:s,style:n}),h=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=ys(s.setContext(Pi(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),_s(e,h)&&p(d,u-1,t.loop,h),o=r,h=e}d<u-1&&p(d,u-1,t.loop,h)}return c}(t,e,i,s):e}function ys(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function _s(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}class ws{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Ie.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Ms=new ws;const Ss="transparent",Cs={boolean(t,e,i){return i>.5?e:t},color(t,e,i){const s=Ge(t||Ss),n=s.valid&&Ge(e||Ss);return n&&n.valid?n.mix(s,i).hexString():e},number(t,e,i){return t+(e-t)*i}};class ks{constructor(t,e,i,s){const n=e[i];s=Ei([t.to,s,n,t.from]);const o=Ei([t.from,n,s]);this._active=!0,this._fn=t.fn||Cs[t.type||typeof o],this._easing=We[t.easing]||We.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Ei([t.to,e,s,t.from]),this._from=Ei([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ts{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!$t(t))return;const e=Object.keys(ni.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const n=t[s];if(!$t(n))return;const o={};for(const t of e)o[t]=n[t];(Ft(n.properties)&&n.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const c=e[l];let h=n[l];const d=i.get(l);if(h){if(d&&h.active()){h.update(d,c,a);continue}h.cancel()}d&&d.duration?(n[l]=h=new ks(d,t,l,c),s.push(h)):t[l]=c}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(Ms.add(this._chart,i),!0):void 0}}function Es(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ps(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Ls(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,l,c;if(null!==e){for(a=0,r=n.length;a<r;++a){if(l=+n[a],l===i){if(s.all)continue;break}c=t.values[l],Bt(c)&&(o||0===e||pe(e)===pe(c))&&(e+=c)}return e}}function Os(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Ds(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function As(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Is(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,c=a.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[c]:d}=i;u=(i._stacks||(i._stacks={}))[c]=Ds(n,h,o),u[r]=d,u._top=As(u,a,!0,s.type),u._bottom=As(u,a,!1,s.type);(u._visualValues||(u._visualValues={}))[r]=d}}function zs(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Rs(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const Fs=t=>"reset"===t||"none"===t,$s=(t,e)=>e?t:Object.assign({},t);class Bs{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Os(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Rs(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=Nt(i.xAxisID,zs(t,"x")),o=e.yAxisID=Nt(i.yAxisID,zs(t,"y")),a=e.rAxisID=Nt(i.rAxisID,zs(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,o,a),c=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&De(this._data,this),t._stacked&&Rs(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if($t(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){De(i,this);const t=this._cachedMeta;Rs(t),t._parsed=[]}e&&Object.isExtensible(e)&&(n=this,(s=e)._chartjs?s._chartjs.listeners.push(n):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[n]}}),Oe.forEach((t=>{const e="_onData"+te(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s,n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Os(e.vScale,e),e.stack!==i.stack&&(s=!0,Rs(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Is(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,l,c,h=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,c=s;else{c=Ft(s[t])?this.parseArrayData(i,s,t,e):$t(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===l[a]||d&&l[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=l=c[r],h&&(n()&&(h=!1),d=l);i._sorted=h}o&&Is(this,c)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),c=n===o,h=new Array(s);let d,u,p;for(d=0,u=s;d<u;++d)p=d+i,h[d]={[a]:c||n.parse(l[p],p),[r]:o.parse(e[p],p)};return h}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,c,h;for(r=0,l=s;r<l;++r)c=r+i,h=e[c],a[r]={x:n.parse(h[0],c),y:o.parse(h[1],c)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let c,h,d,u;for(c=0,h=s;c<h;++c)d=c+i,u=e[d],l[c]={x:n.parse(Qt(u,a),d),y:o.parse(Qt(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Ls({keys:Ps(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Ls(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ps(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function p(){u=s[d];const e=u[a.axis];return!Bt(u[t.axis])||c>e||h<e}for(d=0;d<o&&(p()||(this.updateRangeFromParsed(l,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!p()){this.updateRangeFromParsed(l,t,u,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],Bt(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return $t(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(Nt(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=Es(t,i),n=Es(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let c;for(i.dataset&&i.dataset.draw(t,n,a,r),c=a;c<a+r;++c){const e=s[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(c=0;c<o.length;++c)o[c].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return Pi(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return Pi(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&ee(i);if(a)return $s(a,r);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),c),u=Object.keys(ni.elements[t]),p=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),h);return p.$shared&&(p.$shared=r,n[o]=Object.freeze($s(p,r))),p}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new Ts(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Fs(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){Fs(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Fs(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Rs(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Vs(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Ae(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(ee(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function Ns(t,e,i,s){return Ft(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,c=r;Math.abs(a)>Math.abs(r)&&(l=r,c=a),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Hs(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let c,h,d,u;for(c=i,h=i+s;c<h;++c)u=e[c],d={},d[n.axis]=r||n.parse(a[c],c),l.push(Ns(u,d,o,c));return l}function Ws(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function js(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:c,bottom:h}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=c:(i._bottom||0)===s?n=h:(o[Gs(h,a,r,l)]=!0,n=c)),o[Gs(n,a,r,l)]=!0,t.borderSkipped=o}function Gs(t,e,i,s){var n,o,a;return s?(a=i,t=qs(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=qs(t,e,i),t}function qs(t,e,i){return"start"===t?e:"end"===t?i:t}function Ys(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Xs extends Bs{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if($t(i[t])){const{key:t="value"}=this._parsing;a=e=>+Qt(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return xe(this.options.rotation-90)}_getCircumference(){return xe(this.options.circumference)}_getRotationExtents(){let t=oe,e=-oe;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min(((t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e)(this.options.cutout,a),1),l=this._getRingWeight(this.index),{circumference:c,rotation:h}=this._getRotationExtents(),{ratioX:d,ratioY:u,offsetX:p,offsetY:f}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<oe){const r=t,l=r+e,c=Math.cos(r),h=Math.sin(r),d=Math.cos(l),u=Math.sin(l),p=(t,e,s)=>Ce(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),f=(t,e,s)=>Ce(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),g=p(0,c,d),m=p(ce,h,u),b=f(ne,c,d),x=f(ne+ce,h,u);s=(g-b)/2,n=(m-x)/2,o=-(g+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(h,c,r),g=(i.width-o)/d,m=(i.height-o)/u,b=Math.max(Math.min(g,m)/2,0),x=Ht(this.options.radius,b),v=(x-Math.max(x*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*x,this.offsetY=f*x,s.total=this.calculateTotal(),this.outerRadius=x-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*l,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/oe)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,h=n&&r.animateScale,d=h?0:this.innerRadius,u=h?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(e,s);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,n);for(g=e;g<e+i;++g){const e=this._circumference(g,n),i=t[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=p||this.resolveDataElementOptions(g,i.active?"active":s)),m+=e,this.updateElement(i,g,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?oe*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=Ke(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(Nt(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Us extends Bs{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=Ke(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return Wi.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,c=r.yCenter,h=r.getIndexAngle(0)-.5*ne;let d,u=h;const p=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,p);for(d=e;d<e+i;d++){const e=t[d];let i=u,f=u+this._computeAngle(d,s,p),g=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=f,n&&(a.animateScale&&(g=0),a.animateRotate&&(i=f=h));const m={x:l,y:c,innerRadius:0,outerRadius:g,startAngle:i,endAngle:f,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?xe(this.resolveDataElementOptions(t,e).angle||i):0}}var Ks=Object.freeze({__proto__:null,BarController:class extends Bs{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return Hs(t,e,i,s)}parseArrayData(t,e,i,s){return Hs(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,c="x"===o.axis?a:r,h=[];let d,u,p,f;for(d=i,u=i+s;d<u;++d)f=e[d],p={},p[n.axis]=n.parse(Qt(f,l),d),h.push(Ns(Qt(f,c),p,o,d));return h}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Ws(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),c=this._getRuler(),{sharedOptions:h,includeOptions:d}=this._getSharedOptions(e,s);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=n||Rt(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),p=this._calculateBarIndexPixels(u,c),f=(e._stacks||{})[a.axis],g={horizontal:l,base:i.base,enableBorderRadius:!f||Ws(e._custom)||o===f._top||o===f._bottom,x:l?i.head:p.center,y:l?p.center:i.head,height:l?p.size:Math.abs(i.size),width:l?Math.abs(i.size):p.size};d&&(g.options=h||this.resolveDataElementOptions(u,t[u].active?"active":s));const m=g.options||t[u].options;js(g,m,f,o),Ys(g,m,c.ratio),this.updateElement(t[u],u,g,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,o=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(Rt(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===n||-1===o.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Vs(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:n,minBarLength:o}}=this,a=n||0,r=this.getParsed(t),l=r._custom,c=Ws(l);let h,d,u=r[e.axis],p=0,f=i?this.applyStack(e,r,i):u;f!==u&&(p=f-u,f=u),c&&(u=l.barStart,f=l.barEnd-l.barStart,0!==u&&pe(u)!==pe(l.barEnd)&&(p=0),p+=u);const g=Rt(n)||c?p:n;let m=e.getPixelForValue(g);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(p+f):m,d=h-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?pe(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),l=Math.min(t,n),p=Math.max(t,n);m=Math.max(Math.min(m,p),l),h=m+d,i&&!c&&(r._stacks[e.axis]._visualValues[s]=e.getValueForPixel(h)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=pe(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:h,center:h+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=Nt(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const c=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:c}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return Rt(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=l.start+l.chunk*c+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}},BubbleController:class extends Bs{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=Nt(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=Nt(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),c=o.axis,h=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},p=u[c]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),f=u[h]=n?a.getBasePixel():a.getPixelForValue(i[h]);u.skip=isNaN(p)||isNaN(f),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=Nt(i&&i._custom,n),s}},DoughnutController:Xs,LineController:class extends Bs{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=$e(e,s,o);this._drawStart=a,this._drawCount=r,Be(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:h}=this._getSharedOptions(e,s),d=o.axis,u=a.axis,{spanGaps:p,segment:f}=this.options,g=me(p)?p:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||n||"none"===s,b=e+i,x=t.length;let v=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const p=t[i],x=m?p:{};if(i<e||i>=b){x.skip=!0;continue}const y=this.getParsed(i),_=Rt(y[u]),w=x[d]=o.getPixelForValue(y[d],i),M=x[u]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,y,r):y[u],i);x.skip=isNaN(w)||isNaN(M)||_,x.stop=i>0&&Math.abs(y[d]-v[d])>g,f&&(x.parsed=y,x.raw=l.data[i]),h&&(x.options=c||this.resolveDataElementOptions(i,p.active?"active":s)),m||this.updateElement(p,i,x,s),v=y}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PolarAreaController:Us,PieController:class extends Xs{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},RadarController:class extends Bs{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return Wi.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,c=o?n.yCenter:r.y,h={x:l,y:c,angle:r.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,a,h,s)}}},ScatterController:class extends Bs{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=$e(e,i,s);if(this._drawStart=n,this._drawCount=o,Be(e)&&(n=0,o=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,s),h=this.getSharedOptions(c),d=this.includeOptions(s,h),u=o.axis,p=a.axis,{spanGaps:f,segment:g}=this.options,m=me(f)?f:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),f=b?e:{},v=Rt(i[p]),y=f[u]=o.getPixelForValue(i[u],c),_=f[p]=n||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[p],c);f.skip=isNaN(y)||isNaN(_)||v,f.stop=c>0&&Math.abs(i[u]-x[u])>m,g&&(f.parsed=i,f.raw=l.data[c]),d&&(f.options=h||this.resolveDataElementOptions(c,e.active?"active":s)),b||this.updateElement(e,c,f,s),x=i}this.updateSharedOptions(h,s,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}});function Zs(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Js{static override(t){Object.assign(Js.prototype,t)}constructor(t){this.options=t||{}}init(){}formats(){return Zs()}parse(){return Zs()}format(){return Zs()}add(){return Zs()}diff(){return Zs()}startOf(){return Zs()}endOf(){return Zs()}}var Qs=Js;function tn(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?Le:Pe;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function en(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:c}=tn(o[t],e,a,n);for(let t=l;t<=c;++t){const e=r[t];e.skip||s(e,i,t)}}}function sn(t,e,i,s,n){const o=[];if(!n&&!t.isPointInArea(e))return o;return en(t,i,e,(function(i,a,r){(n||di(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o}function nn(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return en(t,i,e,(function(i,c,h){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!(!!o||t.isPointInArea(u))&&!d)return;const p=r(e,u);p<l?(a=[{element:i,datasetIndex:c,index:h}],l=p):p===l&&a.push({element:i,datasetIndex:c,index:h})})),a}function on(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?nn(t,e,i,s,n,o):function(t,e,i,s){let n=[];return en(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=_e(t,{x:e.x,y:e.y});Ce(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function an(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return en(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var rn={evaluateInteractionItems:en,modes:{index(t,e,i,s){const n=ss(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?sn(t,n,o,s,a):on(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=ss(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?sn(t,n,o,s,a):on(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point(t,e,i,s){return sn(t,ss(e,t),i.axis||"xy",s,i.includeInvisible||!1)},nearest(t,e,i,s){const n=ss(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return on(t,n,o,i.intersect,s,a)},x(t,e,i,s){return an(t,ss(e,t),"x",i.intersect,s)},y(t,e,i,s){return an(t,ss(e,t),"y",i.intersect,s)}}};const ln=["left","top","right","bottom"];function cn(t,e){return t.filter((t=>t.pos===e))}function hn(t,e){return t.filter((t=>-1===ln.indexOf(t.pos)&&t.box.axis===e))}function dn(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function un(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!ln.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],c=l&&r.stackWeight/l.weight;r.horizontal?(r.width=c?c*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=c?c*n:a&&e.availableHeight)}return i}function pn(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function fn(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function gn(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!$t(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&fn(a,o.getPadding());const r=Math.max(0,e.outerWidth-pn(a,t,"left","right")),l=Math.max(0,e.outerHeight-pn(a,t,"top","bottom")),c=r!==t.w,h=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:c,other:h}:{same:h,other:c}}function mn(t,e){const i=e.maxPadding;function s(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}return s(t?["left","right"]:["top","bottom"])}function bn(t,e,i,s){const n=[];let o,a,r,l,c,h;for(o=0,a=t.length,c=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,mn(r.horizontal,e));const{same:a,other:d}=gn(e,i,r,s);c|=a&&n.length,h=h||d,l.fullSize||n.push(r)}return c&&bn(n,e,i,s)||h}function xn(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function vn(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},c=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*c,o=l.size||t.height;ee(l.start)&&(a=l.start),t.fullSize?xn(t,n.left,a,i.outerWidth-n.right-n.left,o):xn(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*c,a=l.size||t.width;ee(l.start)&&(o=l.start),t.fullSize?xn(t,o,n.top,a,i.outerHeight-n.bottom-n.top):xn(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}var yn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=ki(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=dn(e.filter((t=>t.box.fullSize)),!0),s=dn(cn(e,"left"),!0),n=dn(cn(e,"right")),o=dn(cn(e,"top"),!0),a=dn(cn(e,"bottom")),r=hn(e,"x"),l=hn(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:cn(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,c=r.horizontal;jt(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/h,hBoxMaxHeight:a/2}),u=Object.assign({},n);fn(u,ki(s));const p=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),f=un(l.concat(c),d);bn(r.fullSize,p,d,f),bn(l,p,d,f),bn(c,p,d,f)&&bn(l,p,d,f),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),vn(r.leftAndTop,p,d,f),p.x+=p.w,p.y+=p.h,vn(r.rightAndBottom,p,d,f),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},jt(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class _n{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class wn extends _n{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Mn="$chartjs",Sn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Cn=t=>null===t||""===t;const kn=!!rs&&{passive:!0};function Tn(t,e,i){t.canvas.removeEventListener(e,i,kn)}function En(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Pn(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||En(i.addedNodes,s),e=e&&!En(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Ln(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||En(i.removedNodes,s),e=e&&!En(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const On=new Map;let Dn=0;function An(){const t=window.devicePixelRatio;t!==Dn&&(Dn=t,On.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function In(t,e,i){const s=t.canvas,n=s&&Ji(s);if(!n)return;const o=ze(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){On.size||window.addEventListener("resize",An),On.set(t,e)}(t,o),a}function zn(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){On.delete(t),On.size||window.removeEventListener("resize",An)}(t)}function Rn(t,e,i){const s=t.canvas,n=ze((e=>{null!==t.ctx&&i(function(t,e){const i=Sn[t.type]||t.type,{x:s,y:n}=ss(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,kn)}(s,e,n),n}class Fn extends _n{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[Mn]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Cn(n)){const e=ls(t,"width");void 0!==e&&(t.width=e)}if(Cn(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ls(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Mn])return!1;const i=e[Mn].initial;["height","width"].forEach((t=>{const s=i[t];Rt(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[Mn],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Pn,detach:Ln,resize:In}[e]||Rn;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];if(!s)return;({attach:zn,detach:zn,resize:zn}[e]||Tn)(t,e,s),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return os(t,e,i,s)}isAttached(t){const e=Ji(t);return!(!e||!e.isConnected)}}class $n{static defaults={};static defaultRoutes=void 0;active=!1;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return me(this.x)&&me(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function Bn(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=Math.min(i.maxTicksLimit||s,s),o=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],l=o[a-1],c=[];if(a>n)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,c,o,a/n),c;const h=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(o,e,n);if(a>0){let t,i;const s=a>1?Math.round((l-r)/(a-1)):null;for(Vn(e,c,h,Rt(s)?0:r-s,r),t=0,i=a-1;t<i;t++)Vn(e,c,h,o[t],o[t+1]);return Vn(e,c,h,l,Rt(s)?e.length:l+s),c}return Vn(e,c,h),c}function Vn(t,e,i,s,n){const o=Nt(s,0),a=Math.min(Nt(n,t.length),t.length);let r,l,c,h=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),c=o;c<0;)h++,c=Math.round(o+h*i);for(l=Math.max(o,0);l<a;l++)l===c&&(e.push(t[l]),h++,c=Math.round(o+h*i))}const Nn=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Hn(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Wn(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,c=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(c-o,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(n-1))/2,c+=n<e?l:-l,c<o-r||c>a+r)))return c}function jn(t){return t.drawTicks?t.tickLength:0}function Gn(t,e){if(!t.display)return 0;const i=Ti(t.font,e),s=ki(t.padding);return(Ft(t.text)?t.text.length:1)*i.lineHeight+s.height}function qn(t,e,i){let s=Re(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Yn extends $n{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=Vt(t,Number.POSITIVE_INFINITY),e=Vt(e,Number.NEGATIVE_INFINITY),i=Vt(i,Number.POSITIVE_INFINITY),s=Vt(s,Number.NEGATIVE_INFINITY),{min:Vt(t,i),max:Vt(e,s),minDefined:Bt(t),maxDefined:Bt(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:Vt(i,Vt(s,i)),max:Vt(s,Vt(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){Wt(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=Ht(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Hn(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=Bn(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){Wt(this.options.afterUpdate,[this])}beforeSetDimensions(){Wt(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){Wt(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),Wt(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){Wt(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=Wt(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){Wt(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){Wt(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const c=this._getLabelSizes(),h=c.widest.width,d=c.highest.height,u=ke(this.chart.width-h,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),h+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-jn(t.grid)-e.padding-Gn(t.title,this.chart.options.font),r=Math.sqrt(h*h+d*d),l=ve(Math.min(Math.asin(ke((c.highest.height+6)/o,-1,1)),Math.asin(ke(a/r,-1,1))-Math.asin(ke(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){Wt(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){Wt(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Gn(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=jn(n)+o):(t.height=this.maxHeight,t.width=jn(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=xe(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(a){const e=i.mirror?0:h*n.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:c*n.width+h*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,h,c)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,d=0;r?l?(h=s*t.width,d=i*e.height):(h=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?h=t.width:"inner"!==n&&(h=t.width/2,d=e.width/2),this.paddingLeft=Math.max((h-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-c+o)*this.width/(this.width-c),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){Wt(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)Rt(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Hn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],o=[];let a,r,l,c,h,d,u,p,f,g,m,b=0,x=0;for(a=0;a<e;++a){if(c=t[a].label,h=this._resolveTickFontOptions(a),i.font=d=h.string,u=s[d]=s[d]||{data:{},gc:[]},p=h.lineHeight,f=g=0,Rt(c)||Ft(c)){if(Ft(c))for(r=0,l=c.length;r<l;++r)m=c[r],Rt(m)||Ft(m)||(f=oi(i,u.data,u.gc,f,m),g+=p)}else f=oi(i,u.data,u.gc,f,c),g=p;n.push(f),o.push(g),b=Math.max(f,b),x=Math.max(g,x)}!function(t,e){jt(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(s,e);const v=n.indexOf(b),y=o.indexOf(x),_=t=>({width:n[t]||0,height:o[t]||0});return{first:_(0),last:_(e-1),widest:_(v),highest:_(y),widths:n,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return function(t){return ke(t,-32768,32767)}(this._alignToPixels?ri(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Pi(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Pi(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=xe(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o,border:a}=s,r=n.offset,l=this.isHorizontal(),c=this.ticks.length+(r?1:0),h=jn(n),d=[],u=a.setContext(this.getContext()),p=u.display?u.width:0,f=p/2,g=function(t){return ri(i,t,p)};let m,b,x,v,y,_,w,M,S,C,k,T;if("top"===o)m=g(this.bottom),_=this.bottom-h,M=m-f,C=g(t.top)+f,T=t.bottom;else if("bottom"===o)m=g(this.top),C=t.top,T=g(t.bottom)-f,_=m+f,M=this.top+h;else if("left"===o)m=g(this.right),y=this.right-h,w=m-f,S=g(t.left)+f,k=t.right;else if("right"===o)m=g(this.left),S=t.left,k=g(t.right)-f,y=m+f,w=this.left+h;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if($t(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}C=t.top,T=t.bottom,_=m+f,M=_+h}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if($t(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}y=m-f,w=y-h,S=t.left,k=t.right}const E=Nt(s.ticks.maxTicksLimit,c),P=Math.max(1,Math.ceil(c/E));for(b=0;b<c;b+=P){const t=this.getContext(b),e=n.setContext(t),s=a.setContext(t),o=e.lineWidth,c=e.color,h=s.dash||[],u=s.dashOffset,p=e.tickWidth,f=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=Wn(this,b,r),void 0!==x&&(v=ri(i,x,o),l?y=w=S=k=v:_=M=C=T=v,d.push({tx1:y,ty1:_,tx2:w,ty2:M,x1:S,y1:C,x2:k,y2:T,width:o,color:c,borderDash:h,borderDashOffset:u,tickWidth:p,tickColor:f,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=c,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:l,padding:c,mirror:h}=n,d=jn(i.grid),u=d+c,p=h?-c:u,f=-xe(this.labelRotation),g=[];let m,b,x,v,y,_,w,M,S,C,k,T,E="middle";if("top"===s)_=this.bottom-p,w=this._getXAxisLabelAlignment();else if("bottom"===s)_=this.top+p,w=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("x"===e){if("center"===s)_=(t.top+t.bottom)/2+u;else if($t(s)){const t=Object.keys(s)[0],e=s[t];_=this.chart.scales[t].getPixelForValue(e)+u}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if($t(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?E="top":"end"===r&&(E="bottom"));const P=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],v=x.label;const t=n.setContext(this.getContext(m));M=this.getPixelForTick(m)+n.labelOffset,S=this._resolveTickFontOptions(m),C=S.lineHeight,k=Ft(v)?v.length:1;const e=k/2,i=t.color,r=t.textStrokeColor,c=t.textStrokeWidth;let d,u=w;if(o?(y=M,"inner"===w&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),T="top"===s?"near"===l||0!==f?-k*C+C/2:"center"===l?-P.highest.height/2-e*C+C:-P.highest.height+C/2:"near"===l||0!==f?C/2:"center"===l?P.highest.height/2-e*C:P.highest.height-k*C,h&&(T*=-1),0===f||t.showLabelBackdrop||(y+=C/2*Math.sin(f))):(_=M,T=(1-k)*C/2),t.showLabelBackdrop){const e=ki(t.backdropPadding),i=P.heights[m],s=P.widths[m];let n=T-e.top,o=0-e.left;switch(E){case"middle":n-=i/2;break;case"bottom":n-=i}switch(w){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:v,font:S,textOffset:T,options:{rotation:f,color:i,strokeColor:r,strokeWidth:c,textAlign:u,textBaseline:E,translation:[y,_],backdrop:d}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-xe(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,c,h,d;this.isHorizontal()?(l=ri(t,this.left,o)-o/2,c=ri(t,this.right,a)+a/2,h=d=r):(h=ri(t,this.top,o)-o/2,d=ri(t,this.bottom,a)+a/2,l=c=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(l,h),e.lineTo(c,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&ui(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;mi(e,t.label,0,t.textOffset,s,i)}i&&pi(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=Ti(i.font),o=ki(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||$t(e)?(r+=o.bottom,Ft(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:l,titleY:c,maxWidth:h,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:l}=t,{chartArea:c,scales:h}=l;let d,u,p,f=0;const g=a-n,m=r-o;if(t.isHorizontal()){if(u=Fe(s,o,r),$t(i)){const t=Object.keys(i)[0],s=i[t];p=h[t].getPixelForValue(s)+g-e}else p="center"===i?(c.bottom+c.top)/2+g-e:Nn(t,i,e);d=r-o}else{if($t(i)){const t=Object.keys(i)[0],s=i[t];u=h[t].getPixelForValue(s)-m+e}else u="center"===i?(c.left+c.right)/2-m+e:Nn(t,i,e);p=Fe(s,a,n),f="left"===i?-ce:ce}return{titleX:u,titleY:p,maxWidth:d,rotation:f}}(this,r,e,a);mi(t,i.text,0,0,n,{color:i.color,maxWidth:h,rotation:d,textAlign:qn(a,e,s),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=Nt(t.grid&&t.grid.z,-1),s=Nt(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Yn.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return Ti(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Xn{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=Ut(Object.create(null),[i?ni.get(i):{},ni.get(e),t.defaults]);ni.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");ni.route(o,n,l,r)}))}(e,t.defaultRoutes);t.descriptors&&ni.describe(e,t.descriptors)}(t,o,i),this.override&&ni.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in ni[s]&&(delete ni[s][i],this.override&&delete Qe[i])}}class Un{constructor(){this.controllers=new Xn(Bs,"datasets",!0),this.elements=new Xn($n,"elements"),this.plugins=new Xn(Object,"plugins"),this.scales=new Xn(Yn,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):jt(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=te(t);Wt(i["before"+s],[],i),e[t](i),Wt(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var Kn=new Un;class Zn{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===Wt(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){Rt(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=Nt(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(Kn.plugins.items);for(let t=0;t<s.length;t++)i.push(Kn.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=Jn(s[e],n);null!==l&&o.push({plugin:r,options:Qn(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Jn(t,e){return e||!1!==t?!0===t?{}:t:null}function Qn(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function to(t,e){const i=ni.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function eo(t,e){if("x"===t||"y"===t||"r"===t)return t;var i;if(t=e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&eo(t[0].toLowerCase(),e))return t;throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`)}function io(t){const e=t.options||(t.options={});e.plugins=Nt(e.plugins,{}),e.scales=function(t,e){const i=Qe[t.type]||{scales:{}},s=e.scales||{},n=to(t.type,e),o=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!$t(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=eo(t,e),r=function(t,e){return t===e?"_index_":"_value_"}(a,n),l=i.scales||{};o[t]=Kt(Object.create(null),[{axis:a},e,l[a],l[r]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,a=i.indexAxis||to(n,e),r=(Qe[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),n=i[e+"AxisID"]||e;o[n]=o[n]||Object.create(null),Kt(o[n],[{axis:e},s[n],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Kt(e,[ni.scales[e.type],ni.scale])})),o}(t,e)}function so(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const no=new Map,oo=new Set;function ao(t,e){let i=no.get(t);return i||(i=e(),no.set(t,i),oo.add(i)),i}const ro=(t,e,i)=>{const s=Qt(e,i);void 0!==s&&t.add(s)};class lo{constructor(t){this._config=function(t){return(t=t||{}).data=so(t.data),io(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=so(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),io(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return ao(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return ao(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return ao(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return ao(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>ro(r,t,e)))),e.forEach((t=>ro(r,s,t))),e.forEach((t=>ro(r,Qe[n]||{},t))),e.forEach((t=>ro(r,ni,t))),e.forEach((t=>ro(r,ti,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),oo.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Qe[e]||{},ni.datasets[e]||{},{type:e},ni,ti]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=co(this._resolverCache,t,s);let r=o;if(function(t,e){const{isScriptable:i,isIndexable:s}=Di(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(ie(a)||ho(a))||o&&Ft(a))return!0}return!1}(o,e)){n.$shared=!1;r=Oi(o,i=ie(i)?i():i,this.createResolver(t,i,a))}for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=co(this._resolverCache,t,i);return $t(e)?Oi(n,e,void 0,s):n}}function co(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);if(!o){o={resolver:Li(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)}return o}const ho=t=>$t(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||ie(t[i])),!1);const uo=["top","bottom","left","right","chartArea"];function po(t,e){return"top"===t||"bottom"===t||-1===uo.indexOf(t)&&"x"===e}function fo(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function go(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),Wt(i&&i.onComplete,[t],e)}function mo(t){const e=t.chart,i=e.options.animation;Wt(i&&i.onProgress,[t],e)}function bo(t){return Zi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const xo={},vo=t=>{const e=bo(t);return Object.values(xo).filter((t=>t.canvas===e)).pop()};function yo(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class _o{static defaults=ni;static instances=xo;static overrides=Qe;static registry=Kn;static version="4.2.0";static getChart=vo;static register(...t){Kn.add(...t),wo()}static unregister(...t){Kn.remove(...t),wo()}constructor(t,e){const i=this.config=new lo(e),s=bo(t),n=vo(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas with ID '"+n.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Zi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?wn:Fn}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,l=r&&r.height,c=r&&r.width;this.id=zt(),this.ctx=a,this.canvas=r,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Zn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],xo[this.id]=this,a&&r?(Ms.listen(this,"complete",go),Ms.listen(this,"progress",mo),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return Rt(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Kn}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():as(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return li(this.canvas,this.ctx),this}stop(){return Ms.stop(this),this}resize(t,e){Ms.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,as(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),Wt(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){jt(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=eo(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),jt(n,(e=>{const n=e.options,o=n.id,a=eo(o,n),r=Nt(n.type,e.dtype);void 0!==n.position&&po(n.position,a)===po(e.dposition)||(n.position=e.dposition),s[o]=!0;let l=null;if(o in i&&i[o].type===r)l=i[o];else{l=new(Kn.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l}l.init(n,t)})),jt(s,((t,e)=>{t||delete i[e]})),jt(i,(t=>{yn.configure(this,t,t.options),yn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(fo("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||to(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Kn.getController(o),{datasetElementType:s,dataElementType:a}=ni.datasets[o];Object.assign(e,{dataElementType:Kn.getElement(a),datasetElementType:s&&Kn.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){jt(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||jt(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(fo("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){jt(this.scales,(t=>{yn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);se(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e){yo(t,s,"_removeElements"===i?-n:n)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!se(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;yn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],jt(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,ie(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Ms.has(this)?this.attached&&!Ms.running(this)&&Ms.start(this):(this.draw(),go({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&ui(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&pi(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return di(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=rn.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Pi(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);ee(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Ms.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),li(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete xo[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};jt(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){jt(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},jt(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!Gt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,Wt(n.onHover,[t,a,this],this),r&&Wt(n.onClick,[t,a,this],this));const c=!Gt(a,s);return(c||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,c}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function wo(){return jt(_o.instances,(t=>t._plugins.invalidate()))}function Mo(t,e,i,s){const n=function(t){return Mi(t,["outerStart","outerEnd","innerStart","innerEnd"])}(t.options.borderRadius),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return ke(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:ke(n.innerStart,0,a),innerEnd:ke(n.innerEnd,0,a)}}function So(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Co(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:c,innerRadius:h}=e,d=Math.max(e.outerRadius+s+i-c,0),u=h>0?h+s+i+c:0;let p=0;const f=n-l;if(s){const t=((h>0?h-s:0)+(d>0?d-s:0))/2;p=(f-(0!==t?f*t/(t+s):f))/2}const g=(f-Math.max(.001,f*d-i/ne)/d)/2,m=l+g+p,b=n-g-p,{outerStart:x,outerEnd:v,innerStart:y,innerEnd:_}=Mo(e,u,d,b-m),w=d-x,M=d-v,S=m+x/w,C=b-v/M,k=u+y,T=u+_,E=m+y/k,P=b-_/T;if(t.beginPath(),o){const e=(S+C)/2;if(t.arc(a,r,d,S,e),t.arc(a,r,d,e,C),v>0){const e=So(M,C,a,r);t.arc(e.x,e.y,v,C,b+ce)}const i=So(T,b,a,r);if(t.lineTo(i.x,i.y),_>0){const e=So(T,P,a,r);t.arc(e.x,e.y,_,b+ce,P+Math.PI)}const s=(b-_/u+(m+y/u))/2;if(t.arc(a,r,u,b-_/u,s,!0),t.arc(a,r,u,s,m+y/u,!0),y>0){const e=So(k,E,a,r);t.arc(e.x,e.y,y,E+Math.PI,m-ce)}const n=So(w,m,a,r);if(t.lineTo(n.x,n.y),x>0){const e=So(w,S,a,r);t.arc(e.x,e.y,x,m-ce,S)}}else{t.moveTo(a,r);const e=Math.cos(S)*d+a,i=Math.sin(S)*d+r;t.lineTo(e,i);const s=Math.cos(C)*d+a,n=Math.sin(C)*d+r;t.lineTo(s,n)}t.closePath()}function ko(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:c,borderJoinStyle:h}=l,d="inner"===l.borderAlign;if(!c)return;d?(t.lineWidth=2*c,t.lineJoin=h||"round"):(t.lineWidth=c,t.lineJoin=h||"bevel");let u=e.endAngle;if(o){Co(t,e,i,s,u,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(u=a+(r%oe||oe))}d&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let c=n/r;t.beginPath(),t.arc(o,a,r,s-c,i+c),l>n?(c=n/l,t.arc(o,a,l,i+c,s-c,!0)):t.arc(o,a,n,i+ce,s-ce),t.closePath(),t.clip()}(t,e,u),o||(Co(t,e,i,s,u,n),t.stroke())}function To(t,e,i=e){t.lineCap=Nt(i.borderCapStyle,e.borderCapStyle),t.setLineDash(Nt(i.borderDash,e.borderDash)),t.lineDashOffset=Nt(i.borderDashOffset,e.borderDashOffset),t.lineJoin=Nt(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=Nt(i.borderWidth,e.borderWidth),t.strokeStyle=Nt(i.borderColor,e.borderColor)}function Eo(t,e,i){t.lineTo(i.x,i.y)}function Po(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),c=Math.min(o,r),h=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:c<l&&!h?s+c-l:c-l}}function Lo(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:c}=Po(n,i,s),h=function(t){return t.stepped?fi:t.tension||"monotone"===t.cubicInterpolationMode?gi:Eo}(o);let d,u,p,{move:f=!0,reverse:g}=s||{};for(d=0;d<=c;++d)u=n[(r+(g?c-d:d))%a],u.skip||(f?(t.moveTo(u.x,u.y),f=!1):h(t,p,u,g,o.stepped),p=u);return l&&(u=n[(r+(g?c:0))%a],h(t,p,u,g,o.stepped)),!!l}function Oo(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=Po(n,i,s),{move:l=!0,reverse:c}=s||{};let h,d,u,p,f,g,m=0,b=0;const x=t=>(a+(c?r-t:t))%o,v=()=>{p!==f&&(t.lineTo(m,f),t.lineTo(m,p),t.lineTo(m,g))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),h=0;h<=r;++h){if(d=n[x(h)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<p?p=i:i>f&&(f=i),m=(b*m+e)/++b):(v(),t.lineTo(e,i),u=s,b=0,p=f=i),g=i}v()}function Do(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?Oo:Lo}const Ao="function"==typeof Path2D;function Io(t,e,i,s){Ao&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),To(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Do(e);for(const r of n)To(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}class zo extends $n{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Ki(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return vs(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=xs(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?hs:t.tension||"monotone"===t.cubicInterpolationMode?ds:cs}(i);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:h}=o[l],d=n[c],u=n[h];if(d===u){a.push(d);continue}const p=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);p[e]=t[e],a.push(p)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Do(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Do(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),Io(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Ro(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}function Fo(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,c,h,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),c=s-d,h=s+d):(d=o/2,r=i-d,l=i+d,c=Math.min(s,n),h=Math.max(s,n)),{left:r,top:c,right:l,bottom:h}}function $o(t,e,i,s){return t?0:ke(e,i,s)}function Bo(t){const e=Fo(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=Si(s);return{t:$o(n.top,o.top,0,i),r:$o(n.right,o.right,0,e),b:$o(n.bottom,o.bottom,0,i),l:$o(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=Ci(n),a=Math.min(e,i),r=t.borderSkipped,l=s||$t(n);return{topLeft:$o(!l||r.top||r.left,o.topLeft,0,a),topRight:$o(!l||r.top||r.right,o.topRight,0,a),bottomLeft:$o(!l||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:$o(!l||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}function Vo(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Fo(t,s);return a&&(n||Te(e,a.left,a.right))&&(o||Te(i,a.top,a.bottom))}function No(t,e){t.rect(e.x,e.y,e.w,e.h)}function Ho(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}var Wo=Object.freeze({__proto__:null,ArcElement:class extends $n{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=_e(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=Nt(h,r-a)>=oe||Ce(n,a,r),p=Te(o,l+d,c+d);return u&&p}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:l}=this.options,c=(s+n)/2,h=(o+a+l+r)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>oe?Math.floor(i/oe):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(ne,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){Co(t,e,i,s,l,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%oe||oe))}Co(t,e,i,s,l,n),t.fill()}(t,this,r,n,o),ko(t,this,r,n,o),t.restore()}},LineElement:zo,PointElement:class extends $n{static id="point";static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Ro(this,t,"x",e)}inYRange(t,e){return Ro(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!di(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,ci(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}},BarElement:class extends $n{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=Bo(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?vi:No;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,Ho(o,e,n)),t.clip(),a(t,Ho(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Ho(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Vo(this,t,e,i)}inXRange(t,e){return Vo(this,t,null,e)}inYRange(t,e){return Vo(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}});const jo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Go=jo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function qo(t){return jo[t%jo.length]}function Yo(t){return Go[t%Go.length]}function Xo(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof Xs?e=function(t,e){return t.backgroundColor=t.data.map((()=>qo(e++))),e}(i,e):n instanceof Us?e=function(t,e){return t.backgroundColor=t.data.map((()=>Yo(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=qo(e),t.backgroundColor=Yo(e),++e}(i,e))}}function Uo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Ko={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(Uo(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&Uo(o)))return;var a;const r=Xo(t);s.forEach(r)}};function Zo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Jo(t){t.data.datasets.forEach((t=>{Zo(t)}))}var Qo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Jo(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),l=o||e.data;if("y"===Ei([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const c=t.scales[r.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let{start:h,count:d}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(n=ke(Pe(e,o.axis,a).lo,0,i-1)),s=c?ke(Pe(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,l);if(d<=(i.threshold||4*s))return void Zo(e);let u;switch(Rt(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":u=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const c=e+i-1;let h,d,u,p,f,g=e;for(a[l++]=t[g],h=0;h<o-2;h++){let s,n=0,o=0;const c=Math.floor((h+1)*r)+1+e,m=Math.min(Math.floor((h+2)*r)+1,i)+e,b=m-c;for(s=c;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(h*r)+1+e,v=Math.min(Math.floor((h+1)*r)+1,i)+e,{x:y,y:_}=t[g];for(u=p=-1,s=x;s<v;s++)p=.5*Math.abs((y-n)*(t[s].y-_)-(y-t[s].x)*(o-_)),p>u&&(u=p,d=t[s],f=s);a[l++]=d,g=f}return a[l++]=t[c],a}(l,h,d,s,i);break;case"min-max":u=function(t,e,i,s){let n,o,a,r,l,c,h,d,u,p,f=0,g=0;const m=[],b=e+i-1,x=t[e].x,v=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/v*s,r=o.y;const e=0|a;if(e===l)r<u?(u=r,c=n):r>p&&(p=r,h=n),f=(g*f+o.x)/++g;else{const i=n-1;if(!Rt(c)&&!Rt(h)){const e=Math.min(c,h),s=Math.max(c,h);e!==d&&e!==i&&m.push({...t[e],x:f}),s!==d&&s!==i&&m.push({...t[s],x:f})}n>0&&i!==d&&m.push(t[i]),m.push(o),l=e,g=0,u=p=r,c=h=d=n}}return m}(l,h,d,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=u}))},destroy(t){Jo(t)}};function ta(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=Se(n),o=Se(o)),{property:t,start:n,end:o}}function ea(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function ia(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function sa(t,e){let i=[],s=!1;return Ft(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=ea(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new zo({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function na(t){return t&&!1!==t.fill}function oa(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!Bt(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function aa(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=Nt(i&&i.target,i);void 0===s&&(s=!!e.backgroundColor);if(!1===s||null===s)return!1;if(!0===s)return"origin";return s}(t);if($t(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return Bt(n)&&Math.floor(n)===n?function(t,e,i,s){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=s)return!1;return i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ra(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=la(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function la(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],c=a[e.end][i];if(Te(n,s,c)){r=n===s,l=n===c;break}}return{first:r,last:l,point:s}}class ca{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:oe},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function ha(t){const{chart:e,fill:i,line:s}=t;if(Bt(i))return function(t,e){const i=t.getDatasetMeta(e),s=i&&t.isDatasetVisible(e);return s?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(sa({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ra(n,a[t],r)}return new zo({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:$t(t)?t.value:e.getBaseValue(),s}(i,e,o),r=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new ca({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)r.push(e.getPointPositionForValue(t,a));return r}(t);return function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:$t(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(Bt(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof ca?n:sa(n,s)}function da(t,e,i){const s=ha(e),{line:n,scale:o,axis:a}=e,r=n.options,l=r.fill,c=r.backgroundColor,{above:h=c,below:d=c}=l||{};s&&n.points.length&&(ui(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(ua(t,s,a.top),pa(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),ua(t,s,a.bottom));pa(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:h,below:d,area:i,scale:o,axis:a}),pi(t))}function ua(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,c=n[s],h=n[ea(s,l,n)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,i),t.lineTo(c.x,c.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function pa(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=ea(s,r,n);const l=ta(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const c=xs(e,l);for(const e of c){const s=ta(i,o[e.start],o[e.end],e.loop),r=bs(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:ia(l,s,"start",Math.max)},end:{[i]:ia(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:c,end:h}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,fa(t,a,d&&ta(n,c,h)),t.beginPath();const u=!!i.pathSegment(t,e);let p;if(d){u?t.closePath():ga(t,s,h,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});p=u&&e,p||ga(t,s,c,n)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function fa(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function ga(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var ma={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof zo&&(l={visible:t.isDatasetVisible(a),index:a,fill:aa(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=oa(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&da(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;na(i)&&da(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;na(s)&&"beforeDatasetDraw"===i.drawTime&&da(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ba=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class xa extends $n{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=Wt(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=Ti(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=ba(i,n);let l,c;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,n,a,r)+10):(c=this.maxHeight,l=this._fitCols(o,s,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],c=s+a;let h=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-c;return this.legendItems.forEach(((t,p)=>{const f=i+e/2+n.measureText(t.text).width;(0===p||l[l.length-1]+f+2*a>o)&&(h+=c,l[l.length-(p>0?0:1)]=0,u+=c,d++),r[p]={left:0,top:u,row:d,width:f,height:s},l[l.length-1]+=f+a})),h}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let h=a,d=0,u=0,p=0,f=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e)));return e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;"string"!=typeof e.text&&(s=va(e,i));return s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>c&&(h+=d+a,l.push({width:d,height:u}),p+=d+a,f++,d=u=0),r[o]={left:p,top:u,col:f,width:g,height:m},d=Math.max(d,g),u+=m+a})),h+=d,l.push({width:d,height:u}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=us(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=Fe(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=Fe(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=Fe(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=Fe(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;ui(t,this),this._draw(),pi(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=ni.color,r=us(t.rtl,this.left,this.width),l=Ti(o.font),{padding:c}=o,h=l.size,d=h/2;let u;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=l.string;const{boxWidth:p,boxHeight:f,itemHeight:g}=ba(o,h),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:Fe(n,this.left+c,this.right-i[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:Fe(n,this.top+b+c,this.bottom-e[0].height),line:0},ps(this.ctx,t.textDirection);const x=g+c;this.legendItems.forEach(((v,y)=>{s.strokeStyle=v.fontColor,s.fillStyle=v.fontColor;const _=s.measureText(v.text).width,w=r.textAlign(v.textAlign||(v.textAlign=o.textAlign)),M=p+d+_;let S=u.x,C=u.y;r.setWidth(this.width),m?y>0&&S+M+c>this.right&&(C=u.y+=x,u.line++,S=u.x=Fe(n,this.left+c,this.right-i[u.line])):y>0&&C+x>this.bottom&&(S=u.x=S+e[u.line].width+c,u.line++,C=u.y=Fe(n,this.top+b+c,this.bottom-e[u.line].height));if(function(t,e,i){if(isNaN(p)||p<=0||isNaN(f)||f<0)return;s.save();const n=Nt(i.lineWidth,1);if(s.fillStyle=Nt(i.fillStyle,a),s.lineCap=Nt(i.lineCap,"butt"),s.lineDashOffset=Nt(i.lineDashOffset,0),s.lineJoin=Nt(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=Nt(i.strokeStyle,a),s.setLineDash(Nt(i.lineDash,[])),o.usePointStyle){const a={radius:f*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,p/2);hi(s,a,l,e+d,o.pointStyleWidth&&p)}else{const o=e+Math.max((h-f)/2,0),a=r.leftForLtr(t,p),l=Ci(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?vi(s,{x:a,y:o,w:p,h:f,radius:l}):s.rect(a,o,p,f),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(S),C,v),S=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(w,S+p+d,m?S+M:this.right,t.rtl),function(t,e,i){mi(s,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(S),C,v),m)u.x+=M+c;else if("string"!=typeof v.text){const t=l.lineHeight;u.y+=va(v,t)}else u.y+=x})),fs(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Ti(e.font),s=ki(e.padding);if(!e.display)return;const n=us(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let c,h=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),c=this.top+l,h=Fe(t.align,h,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+Fe(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=Fe(a,h,h+d);o.textAlign=n.textAlign(Re(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,mi(o,e.text,u,c,i)}_computeTitleHeight(){const t=this.options.title,e=Ti(t.font),i=ki(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(Te(t,this.left,this.right)&&Te(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],Te(t,s.left,s.left+s.width)&&Te(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&Wt(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&Wt(e.onHover,[t,i,this],this)}else i&&Wt(e.onClick,[t,i,this],this);var s,n}}function va(t,e){return e*(t.text?t.text.length+.5:0)}var ya={id:"legend",_element:xa,start(t,e,i){const s=t.legend=new xa({ctx:t.ctx,options:i,chart:t});yn.configure(t,s,i),yn.addBox(t,s)},stop(t){yn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;yn.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),c=ki(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:s||l.pointStyle,rotation:l.rotation,textAlign:n||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class _a extends $n{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=Ft(i.text)?i.text.length:1;this._padding=ki(i.padding);const n=s*Ti(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,c,h=0;return this.isHorizontal()?(l=Fe(a,i,n),c=e+t,r=n-i):("left"===o.position?(l=i+t,c=Fe(a,s,e),h=-.5*ne):(l=n-t,c=Fe(a,e,s),h=.5*ne),r=s-e),{titleX:l,titleY:c,maxWidth:r,rotation:h}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Ti(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);mi(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:Re(e.align),textBaseline:"middle",translation:[n,o]})}}var wa={id:"title",_element:_a,start(t,e,i){!function(t,e){const i=new _a({ctx:t.ctx,options:e,chart:t});yn.configure(t,i,e),yn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;yn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;yn.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Ma=new WeakMap;var Sa={id:"subtitle",start(t,e,i){const s=new _a({ctx:t.ctx,options:i,chart:t});yn.configure(t,s,i),yn.addBox(t,s),Ma.set(t,s)},stop(t){yn.removeBox(t,Ma.get(t)),Ma.delete(t)},beforeUpdate(t,e,i){const s=Ma.get(t);yn.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Ca={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=we(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function ka(t,e){return e&&(Ft(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ta(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Ea(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Pa(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=Ti(e.bodyFont),c=Ti(e.titleFont),h=Ti(e.footerFont),d=o.length,u=n.length,p=s.length,f=ki(e.padding);let g=f.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(b+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*c.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b){g+=p*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-p)*l.lineHeight+(b-1)*e.bodySpacing}u&&(g+=e.footerMarginTop+u*h.lineHeight+(u-1)*e.footerSpacing);let x=0;const v=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=c.string,jt(t.title,v),i.font=l.string,jt(t.beforeBody.concat(t.afterBody),v),x=e.displayColors?a+2+e.boxPadding:0,jt(s,(t=>{jt(t.before,v),jt(t.lines,v),jt(t.after,v)})),x=0,i.font=h.string,jt(t.footer,v),i.restore(),m+=f.width,{width:m,height:g}}function La(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let c="center";return"center"===s?c=n<=(r+l)/2?"left":"right":n<=o/2?c="left":n>=a-o/2&&(c="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(c,t,e,i)&&(c="center"),c}function Oa(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||La(t,e,i,s),yAlign:s}}function Da(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,c=n+o,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:p}=Ci(a);let f=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const g=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,c);return"center"===l?"left"===r?f+=c:"right"===r&&(f-=c):"left"===r?f-=Math.max(h,u)+n:"right"===r&&(f+=Math.max(d,p)+n),{x:ke(f,0,s.width-e.width),y:ke(g,0,s.height-e.height)}}function Aa(t,e,i){const s=ki(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Ia(t){return ka([],Ta(t))}function za(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Ra={beforeTitle:It,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:It,beforeBody:It,beforeLabel:It,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return Rt(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:It,afterBody:It,beforeFooter:It,footer:It,afterFooter:It};function Fa(t,e,i,s){const n=t[e].call(i,s);return void 0===n?Ra[e].call(i,s):n}class $a extends $n{static positioners=Ca;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Ts(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,Pi(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,s=Fa(i,"beforeTitle",this,t),n=Fa(i,"title",this,t),o=Fa(i,"afterTitle",this,t);let a=[];return a=ka(a,Ta(s)),a=ka(a,Ta(n)),a=ka(a,Ta(o)),a}getBeforeBody(t,e){return Ia(Fa(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return jt(t,(t=>{const e={before:[],lines:[],after:[]},n=za(i,t);ka(e.before,Ta(Fa(n,"beforeLabel",this,t))),ka(e.lines,Fa(n,"label",this,t)),ka(e.after,Ta(Fa(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Ia(Fa(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Fa(i,"beforeFooter",this,t),n=Fa(i,"footer",this,t),o=Fa(i,"afterFooter",this,t);let a=[];return a=ka(a,Ta(s)),a=ka(a,Ta(n)),a=ka(a,Ta(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Ea(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),jt(l,(e=>{const i=za(t.callbacks,e);s.push(Fa(i,"labelColor",this,e)),n.push(Fa(i,"labelPointStyle",this,e)),o.push(Fa(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=Ca[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Pa(this,i),a=Object.assign({},t,e),r=Oa(this.chart,i,a),l=Da(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:c,bottomRight:h}=Ci(a),{x:d,y:u}=t,{width:p,height:f}=e;let g,m,b,x,v,y;return"center"===n?(v=u+f/2,"left"===s?(g=d,m=g-o,x=v+o,y=v-o):(g=d+p,m=g+o,x=v-o,y=v+o),b=g):(m="left"===s?d+Math.max(r,c)+o:"right"===s?d+p-Math.max(l,h)-o:this.caretX,"top"===n?(x=u,v=x-o,g=m-o,b=m+o):(x=u+f,v=x+o,g=m+o,b=m-o),y=x),{x1:g,x2:m,x3:b,y1:x,y2:v,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=us(i.rtl,this.x,this.width);for(t.x=Aa(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Ti(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:l,boxPadding:c}=n,h=Ti(n.bodyFont),d=Aa(this,"left",n),u=s.x(d),p=r<h.lineHeight?(h.lineHeight-r)/2:0,f=e.y+p;if(n.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(u,l)+l/2,c=f+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,ci(t,e,i,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ci(t,e,i,c)}else{t.lineWidth=$t(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(u,l-c),i=s.leftForLtr(s.xPlus(u,1),l-c-2),a=Ci(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,vi(t,{x:e,y:f,w:l,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),vi(t,{x:i,y:f+1,w:l-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,f,l,r),t.strokeRect(e,f,l,r),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:c}=i,h=Ti(i.bodyFont);let d=h.lineHeight,u=0;const p=us(i.rtl,this.x,this.width),f=function(i){e.fillText(i,p.x(t.x+u),t.y+d/2),t.y+=d+n},g=p.textAlign(o);let m,b,x,v,y,_,w;for(e.textAlign=o,e.textBaseline="middle",e.font=h.string,t.x=Aa(this,g,i),e.fillStyle=i.bodyColor,jt(this.beforeBody,f),u=a&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,_=s.length;v<_;++v){for(m=s[v],b=this.labelTextColors[v],e.fillStyle=b,jt(m.before,f),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,v,p,i),d=Math.max(h.lineHeight,r)),y=0,w=x.length;y<w;++y)f(x[y]),d=h.lineHeight;jt(m.after,f)}u=0,d=h.lineHeight,jt(this.afterBody,f),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=us(i.rtl,this.x,this.width);for(t.x=Aa(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=Ti(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:c}=i,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:p}=Ci(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+h,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+c-p),e.quadraticCurveTo(a+l,r+c,a+l-p,r+c),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+c),e.quadraticCurveTo(a,r+c,a,r+c-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+h),e.quadraticCurveTo(a,r,a+h,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=Ca[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Pa(this,t),a=Object.assign({},i,this._size),r=Oa(e,t,a),l=Da(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ki(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),ps(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),fs(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!Gt(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!Gt(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=Ca[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var Ba={id:"tooltip",_element:$a,positioners:Ca,afterInit(t,e,i){i&&(t.tooltip=new $a({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Ra},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Va=Object.freeze({__proto__:null,Colors:Ko,Decimation:Qo,Filler:ma,Legend:ya,SubTitle:Sa,Title:wa,Tooltip:Ba});function Na(t,e,i,s){const n=t.indexOf(e);if(-1===n)return((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s);return n!==t.lastIndexOf(e)?i:n}function Ha(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function Wa(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:l,maxTicks:c,maxDigits:h,includeBounds:d}=t,u=n||1,p=c-1,{min:f,max:g}=e,m=!Rt(o),b=!Rt(a),x=!Rt(l),v=(g-f)/(h+1);let y,_,w,M,S=ge((g-f)/p/u)*u;if(S<1e-14&&!m&&!b)return[{value:f},{value:g}];M=Math.ceil(g/S)-Math.floor(f/S),M>p&&(S=ge(M*S/p/u)*u),Rt(r)||(y=Math.pow(10,r),S=Math.ceil(S*y)/y),"ticks"===s?(_=Math.floor(f/S)*S,w=Math.ceil(g/S)*S):(_=f,w=g),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,S/1e3)?(M=Math.round(Math.min((a-o)/S,c)),S=(a-o)/M,_=o,w=a):x?(_=m?o:_,w=b?a:w,M=l-1,S=(w-_)/M):(M=(w-_)/S,M=fe(M,Math.round(M),S/1e3)?Math.round(M):Math.ceil(M));const C=Math.max(ye(S),ye(_));y=Math.pow(10,Rt(r)?C:r),_=Math.round(_*y)/y,w=Math.round(w*y)/y;let k=0;for(m&&(d&&_!==o?(i.push({value:o}),_<o&&k++,fe(Math.round((_+k*S)*y)/y,o,ja(o,v,t))&&k++):_<o&&k++);k<M;++k)i.push({value:Math.round((_+k*S)*y)/y});return b&&d&&w!==a?i.length&&fe(i[i.length-1].value,a,ja(a,v,t))?i[i.length-1].value=a:i.push({value:a}):b&&w!==a||i.push({value:w}),i}function ja(t,e,{horizontal:i,minRotation:s}){const n=xe(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class Ga extends Yn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return Rt(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=pe(s),e=pe(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=Wa({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&be(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Ke(t,this.chart.options.locale,this.options.ticks.format)}}class qa extends Ga{static id="linear";static defaults={ticks:{callback:Je.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=Bt(t)?t:0,this.max=Bt(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=xe(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Ya=t=>Math.floor(ue(t)),Xa=(t,e)=>Math.pow(10,Ya(t)+e);function Ua(t){return 1===t/Math.pow(10,Ya(t))}function Ka(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}function Za(t,{min:e,max:i}){e=Vt(t.min,e);const s=[],n=Ya(e);let o=function(t,e){let i=Ya(e-t);for(;Ka(t,e,i)>10;)i++;for(;Ka(t,e,i)<10;)i--;return Math.min(i,Ya(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),l=n>o?Math.pow(10,n):0,c=Math.round((e-l)*a)/a,h=Math.floor((e-l)/r/10)*r*10;let d=Math.floor((c-h)/Math.pow(10,o)),u=Vt(t.min,Math.round((l+h+d*Math.pow(10,o))*a)/a);for(;u<i;)s.push({value:u,major:Ua(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((l+h+d*Math.pow(10,o))*a)/a;const p=Vt(t.max,u);return s.push({value:p,major:Ua(p),significand:d}),s}class Ja extends Yn{static id="logarithmic";static defaults={ticks:{callback:Je.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Ga.prototype.parse.apply(this,[t,e]);if(0!==i)return Bt(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=Bt(t)?Math.max(0,t):null,this.max=Bt(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!Bt(this._userMin)&&(this.min=t===Xa(this.min,0)?Xa(this.min,-1):Xa(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(Xa(i,-1)),o(Xa(s,1)))),i<=0&&n(Xa(s,-1)),s<=0&&o(Xa(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=Za({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&be(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Ke(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=ue(t),this._valueRange=ue(this.max)-ue(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(ue(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Qa(t){const e=t.ticks;if(e.display&&t.display){const t=ki(e.backdropPadding);return Nt(e.font&&e.font.size,ni.font.size)+t.height}return 0}function tr(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function er(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?ne/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),p=Ti(o.font),f=(l=t.ctx,c=p,h=Ft(h=t._pointLabels[d])?h:[h],{w:ai(l,c.string,h),h:h.length*c.lineHeight});s[d]=f;const g=Se(t.getIndexAngle(d)+r),m=Math.round(ve(g));ir(i,e,g,tr(m,u.x,f.w,0,180),tr(m,u.y,f.h,90,270))}var l,c,h;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=Qa(o)/2,r=t.drawingArea,l=o.pointLabels.centerPointLabels?ne/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],l),c=Math.round(ve(Se(n.angle+ce))),h=e[o],d=or(n.y,h.h,c),u=sr(c),p=nr(n.x,h.w,u);s.push({x:n.x,y:d,textAlign:u,left:p,top:d,right:p+h.w,bottom:d+h.h})}return s}(t,s,n)}function ir(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function sr(t){return 0===t||180===t?"center":t<180?"left":"right"}function nr(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function or(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function ar(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,oe);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class rr extends Ga{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Je.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback(t){return t},padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ki(Qa(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=Bt(t)&&!isNaN(t)?t:0,this.max=Bt(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Qa(this.options))}generateTickLabels(t){Ga.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=Wt(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?er(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return Se(t*(oe/(this._pointLabels.length||1))+xe(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(Rt(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(Rt(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Pi(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-ce+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),ar(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),o=Ti(e.font),{x:a,y:r,textAlign:l,left:c,top:h,right:d,bottom:u}=t._pointLabelItems[n],{backdropColor:p}=e;if(!Rt(p)){const t=Ci(e.borderRadius),s=ki(e.backdropPadding);i.fillStyle=p;const n=c-s.left,o=h-s.top,a=d-c+s.width,r=u-h+s.height;Object.values(t).some((t=>0!==t))?(i.beginPath(),vi(i,{x:n,y:o,w:a,h:r,radius:t}),i.fill()):i.fillRect(n,o,a,r)}mi(i,t._pointLabels[n],a,r+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),l=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),ar(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=Ti(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=ki(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}mi(t,s.label,0,-n,l,{color:r.color})})),t.restore()}drawTitle(){}}const lr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},cr=Object.keys(lr);function hr(t,e){return t-e}function dr(t,e){if(Rt(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),Bt(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!me(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function ur(t,e,i,s){const n=cr.length;for(let o=cr.indexOf(t);o<n-1;++o){const t=lr[cr[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return cr[o]}return cr[n-1]}function pr(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Ee(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function fr(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class gr extends Yn{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new Qs(t.adapters.date);s.init(e),Kt(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:dr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=Bt(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=Bt(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?ur(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=cr.length-1;o>=cr.indexOf(i);o--){const i=cr[o];if(lr[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return cr[i?cr.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=cr.indexOf(t)+1,i=cr.length;e<i;++e)if(lr[cr[e]].common)return cr[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),fr(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=ke(s,0,o),n=ke(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||ur(n.minUnit,e,i,this._getLabelCapacity(e)),a=Nt(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,l=me(r)||!0===r,c={};let h,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const p="data"===s.ticks.source&&this.getDataTimestamps();for(h=u,d=0;h<i;h=+t.add(h,a,o),d++)pr(c,h,p);return h!==i&&"ticks"!==s.bounds&&1!==d||pr(c,h,p),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return Wt(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,l=this._majorUnit,c=r&&a[r],h=l&&a[l],d=i[e],u=l&&h&&d&&d.major;return this._adapter.format(t,s||(u?h:c))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=xe(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,fr(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(dr(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Ae(t.sort(hr))}}function mr(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=Pe(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=Pe(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const c=n-s;return c?o+(a-o)*(e-s)/c:o}var br=Object.freeze({__proto__:null,CategoryScale:class extends Yn{static id="category";static defaults={ticks:{callback:Ha}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(Rt(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:ke(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:Na(i,t,Nt(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return Ha.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:qa,LogarithmicScale:Ja,RadialLinearScale:rr,TimeScale:gr,TimeSeriesScale:class extends gr{static id="timeseries";static defaults=gr.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=mr(e,this.min),this._tableRange=mr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,c;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)c=s[o+1],r=s[o-1],l=s[o],Math.round((c+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(mr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return mr(this._table,i*this._tableRange+this._minPos,!0)}}});const xr=[Ks,Wo,Va,br];_o.register(...xr);J.use([function({swiper:t,extendParams:e,on:i,emit:s}){function n(e){let i;return e&&(i=p(e),t.params.uniqueNavElements&&"string"==typeof e&&i.length>1&&1===t.$el.find(e).length&&(i=t.$el.find(e))),i}function o(e,i){const s=t.params.navigation;e&&e.length>0&&(e[i?"addClass":"removeClass"](s.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=i),t.params.watchOverflow&&t.enabled&&e[t.isLocked?"addClass":"removeClass"](s.lockClass))}function a(){if(t.params.loop)return;const{$nextEl:e,$prevEl:i}=t.navigation;o(i,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function r(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),s("navigationPrev"))}function l(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),s("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=Q(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;const i=n(e.nextEl),s=n(e.prevEl);i&&i.length>0&&i.on("click",l),s&&s.length>0&&s.on("click",r),Object.assign(t.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:s,prevEl:s&&s[0]}),t.enabled||(i&&i.addClass(e.lockClass),s&&s.addClass(e.lockClass))}function h(){const{$nextEl:e,$prevEl:i}=t.navigation;e&&e.length&&(e.off("click",l),e.removeClass(t.params.navigation.disabledClass)),i&&i.length&&(i.off("click",r),i.removeClass(t.params.navigation.disabledClass))}e({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},i("init",(()=>{!1===t.params.navigation.enabled?d():(c(),a())})),i("toEdge fromEdge lock unlock",(()=>{a()})),i("destroy",(()=>{h()})),i("enable disable",(()=>{const{$nextEl:e,$prevEl:i}=t.navigation;e&&e[t.enabled?"removeClass":"addClass"](t.params.navigation.lockClass),i&&i[t.enabled?"removeClass":"addClass"](t.params.navigation.lockClass)})),i("click",((e,i)=>{const{$nextEl:n,$prevEl:o}=t.navigation,a=i.target;if(t.params.navigation.hideOnClick&&!p(a).is(o)&&!p(a).is(n)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;n?e=n.hasClass(t.params.navigation.hiddenClass):o&&(e=o.hasClass(t.params.navigation.hiddenClass)),s(!0===e?"navigationShow":"navigationHide"),n&&n.toggleClass(t.params.navigation.hiddenClass),o&&o.toggleClass(t.params.navigation.hiddenClass)}}));const d=()=>{t.$el.addClass(t.params.navigation.navigationDisabledClass),h()};Object.assign(t.navigation,{enable:()=>{t.$el.removeClass(t.params.navigation.navigationDisabledClass),c(),a()},disable:d,update:a,init:c,destroy:h})},function({swiper:t,extendParams:e,on:i,emit:s}){const n="swiper-pagination";let o;e({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:t=>t,formatFractionTotal:t=>t,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,$el:null,bullets:[]};let a=0;function r(){return!t.params.pagination.el||!t.pagination.el||!t.pagination.$el||0===t.pagination.$el.length}function l(e,i){const{bulletActiveClass:s}=t.params.pagination;e[i]().addClass(`${s}-${i}`)[i]().addClass(`${s}-${i}-${i}`)}function c(){const e=t.rtl,i=t.params.pagination;if(r())return;const n=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,c=t.pagination.$el;let h;const d=t.params.loop?Math.ceil((n-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(h=Math.ceil((t.activeIndex-t.loopedSlides)/t.params.slidesPerGroup),h>n-1-2*t.loopedSlides&&(h-=n-2*t.loopedSlides),h>d-1&&(h-=d),h<0&&"bullets"!==t.params.paginationType&&(h=d+h)):h=void 0!==t.snapIndex?t.snapIndex:t.activeIndex||0,"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const s=t.pagination.bullets;let n,r,d;if(i.dynamicBullets&&(o=s.eq(0)[t.isHorizontal()?"outerWidth":"outerHeight"](!0),c.css(t.isHorizontal()?"width":"height",o*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==t.previousIndex&&(a+=h-(t.previousIndex-t.loopedSlides||0),a>i.dynamicMainBullets-1?a=i.dynamicMainBullets-1:a<0&&(a=0)),n=Math.max(h-a,0),r=n+(Math.min(s.length,i.dynamicMainBullets)-1),d=(r+n)/2),s.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map((t=>`${i.bulletActiveClass}${t}`)).join(" ")),c.length>1)s.each((t=>{const e=p(t),s=e.index();s===h&&e.addClass(i.bulletActiveClass),i.dynamicBullets&&(s>=n&&s<=r&&e.addClass(`${i.bulletActiveClass}-main`),s===n&&l(e,"prev"),s===r&&l(e,"next"))}));else{const e=s.eq(h),o=e.index();if(e.addClass(i.bulletActiveClass),i.dynamicBullets){const e=s.eq(n),a=s.eq(r);for(let t=n;t<=r;t+=1)s.eq(t).addClass(`${i.bulletActiveClass}-main`);if(t.params.loop)if(o>=s.length){for(let t=i.dynamicMainBullets;t>=0;t-=1)s.eq(s.length-t).addClass(`${i.bulletActiveClass}-main`);s.eq(s.length-i.dynamicMainBullets-1).addClass(`${i.bulletActiveClass}-prev`)}else l(e,"prev"),l(a,"next");else l(e,"prev"),l(a,"next")}}if(i.dynamicBullets){const n=Math.min(s.length,i.dynamicMainBullets+4),a=(o*n-o)/2-d*o,r=e?"right":"left";s.css(t.isHorizontal()?r:"top",`${a}px`)}}if("fraction"===i.type&&(c.find(tt(i.currentClass)).text(i.formatFractionCurrent(h+1)),c.find(tt(i.totalClass)).text(i.formatFractionTotal(d))),"progressbar"===i.type){let e;e=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const s=(h+1)/d;let n=1,o=1;"horizontal"===e?n=s:o=s,c.find(tt(i.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${n}) scaleY(${o})`).transition(t.params.speed)}"custom"===i.type&&i.renderCustom?(c.html(i.renderCustom(t,h+1,d)),s("paginationRender",c[0])):s("paginationUpdate",c[0]),t.params.watchOverflow&&t.enabled&&c[t.isLocked?"addClass":"removeClass"](i.lockClass)}function h(){const e=t.params.pagination;if(r())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,n=t.pagination.$el;let o="";if("bullets"===e.type){let s=t.params.loop?Math.ceil((i-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&!t.params.loop&&s>i&&(s=i);for(let i=0;i<s;i+=1)e.renderBullet?o+=e.renderBullet.call(t,i,e.bulletClass):o+=`<${e.bulletElement} class="${e.bulletClass}"></${e.bulletElement}>`;n.html(o),t.pagination.bullets=n.find(tt(e.bulletClass))}"fraction"===e.type&&(o=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`,n.html(o)),"progressbar"===e.type&&(o=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`,n.html(o)),"custom"!==e.type&&s("paginationRender",t.pagination.$el[0])}function d(){t.params.pagination=Q(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i=p(e.el);0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&i.length>1&&(i=t.$el.find(e.el),i.length>1&&(i=i.filter((e=>p(e).parents(".swiper")[0]===t.el)))),"bullets"===e.type&&e.clickable&&i.addClass(e.clickableClass),i.addClass(e.modifierClass+e.type),i.addClass(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.addClass(`${e.modifierClass}${e.type}-dynamic`),a=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.addClass(e.progressbarOppositeClass),e.clickable&&i.on("click",tt(e.bulletClass),(function(e){e.preventDefault();let i=p(this).index()*t.params.slidesPerGroup;t.params.loop&&(i+=t.loopedSlides),t.slideTo(i)})),Object.assign(t.pagination,{$el:i,el:i[0]}),t.enabled||i.addClass(e.lockClass))}function u(){const e=t.params.pagination;if(r())return;const i=t.pagination.$el;i.removeClass(e.hiddenClass),i.removeClass(e.modifierClass+e.type),i.removeClass(t.isHorizontal()?e.horizontalClass:e.verticalClass),t.pagination.bullets&&t.pagination.bullets.removeClass&&t.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&i.off("click",tt(e.bulletClass))}i("init",(()=>{!1===t.params.pagination.enabled?f():(d(),h(),c())})),i("activeIndexChange",(()=>{(t.params.loop||void 0===t.snapIndex)&&c()})),i("snapIndexChange",(()=>{t.params.loop||c()})),i("slidesLengthChange",(()=>{t.params.loop&&(h(),c())})),i("snapGridLengthChange",(()=>{t.params.loop||(h(),c())})),i("destroy",(()=>{u()})),i("enable disable",(()=>{const{$el:e}=t.pagination;e&&e[t.enabled?"removeClass":"addClass"](t.params.pagination.lockClass)})),i("lock unlock",(()=>{c()})),i("click",((e,i)=>{const n=i.target,{$el:o}=t.pagination;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&o&&o.length>0&&!p(n).hasClass(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&n===t.navigation.nextEl||t.navigation.prevEl&&n===t.navigation.prevEl))return;const e=o.hasClass(t.params.pagination.hiddenClass);s(!0===e?"paginationShow":"paginationHide"),o.toggleClass(t.params.pagination.hiddenClass)}}));const f=()=>{t.$el.addClass(t.params.pagination.paginationDisabledClass),t.pagination.$el&&t.pagination.$el.addClass(t.params.pagination.paginationDisabledClass),u()};Object.assign(t.pagination,{enable:()=>{t.$el.removeClass(t.params.pagination.paginationDisabledClass),t.pagination.$el&&t.pagination.$el.removeClass(t.params.pagination.paginationDisabledClass),d(),h(),c()},disable:f,render:h,update:c,init:d,destroy:u})}]),window.addEventListener("load",(function(){let t=document.querySelector(".header-menu"),e=t.querySelector(".header-menu__close");function i(){t.classList.remove("active"),document.body.classList.remove("is-menu-opened"),window.removeEventListener("click",s),window.removeEventListener("touchstart",s)}function s(t){t.target.classList.contains("header-menu")&&i()}document.querySelector(".header__hamburger").addEventListener("click",(function(){t.classList.add("active"),document.body.classList.add("is-menu-opened"),window.addEventListener("click",s),window.addEventListener("touchstart",s)})),e.addEventListener("click",i),e.addEventListener("touchstart",i),window.addEventListener("resize",(function(){t.classList.contains("active")&&window.innerWidth>998&&i()}));let n=document.querySelectorAll(".faq__item");if(n)for(let u=0;u<n.length;u++){let p=n[u];p.querySelector(".faq__answer");p.querySelector(".faq__question").addEventListener("click",(function(){p.classList.contains("opened")?p.classList.remove("opened"):p.classList.add("opened")}))}document.querySelectorAll(".product").forEach((t=>{if(t.querySelector(".product__form")){let e=t.querySelector(".js-product__button"),i=t.querySelector(".product__form"),s=t.querySelector(".product__add-all"),n=t.querySelector(".counter__input"),o=n.dataset.max;e.addEventListener("click",(function(){this.remove(),i.classList.add("opened")})),s.addEventListener("click",(()=>n.value=o))}})),document.querySelectorAll(".counter").forEach((t=>{let e=t.querySelector(".counter__input"),i=t.querySelector(".counter__inc"),s=t.querySelector(".counter__dec"),n=e.dataset.min,o=e.dataset.max;function a(t){isNaN(t)&&(t=n),e.value=Math.max(n,Math.min(t,o))}i.addEventListener("click",(function(){a(parseInt(e.value)+1)})),s.addEventListener("click",(function(){a(parseInt(e.value)-1)})),e.addEventListener("input",(function(){e.value=e.value.replace(/\D/g,"")})),e.addEventListener("change",(function(){a(parseInt(e.value))}))}));let o=document.querySelector(".products-options__payments");if(o){let f=o.querySelector(".products-options__payments-select"),g=o.querySelector(".products-options__payments-switcher"),m=o.querySelectorAll(".switcher__input");function b(){g.classList.remove("opened")}f.addEventListener("click",(function(){g.classList.contains("opened")?b():g.classList.add("opened")})),m.forEach((t=>{t.addEventListener("change",(function(){f.innerHTML=t.dataset.label,b()}))}))}let a=document.querySelector(".products-tabs");if(a){let x=a.querySelectorAll(".products-tabs__toggle");function v(t){document.getElementById(t).classList.add("active")}a.querySelector("products-tabs__toggle")||(x[0].classList.add("active"),v(x[0].dataset.targetId)),x.forEach((t=>{t.addEventListener("click",(function(){let e=this.dataset.targetId;document.getElementById(e).classList.contains("active")||(a.querySelector(".products-tabs__item.active").classList.remove("active"),a.querySelector(".products-tabs__toggle.active").classList.remove("active"),t.classList.add("active"),v(e))}))}))}let r=document.querySelectorAll("*[data-tooltip]");for(let y=0;y<r.length;y++)r[y].addEventListener("click",(function(){l(this)}));function l(t){t.classList.contains("active")?t.classList.remove("active"):t.classList.add("active")}const c=document.querySelectorAll(".select");for(let _=0;_<c.length;_++){let w=c[_].querySelector(".select__native"),M=c[_].querySelector(".select__custom"),S=M.querySelector(".select__custom-trigger"),C=M.querySelector(".select__custom-options"),k=Array.from(C.children),T=k.length,E=(S.getAttribute("data-value"),""),P=-1;function L(){if(M.classList.add("is-active"),M.setAttribute("aria-hidden",!1),E){D(k.findIndex((t=>t.getAttribute("data-value")===E)))}document.addEventListener("click",I),document.addEventListener("keydown",z)}function O(){M.classList.remove("is-active"),M.setAttribute("aria-hidden",!0),D(-1),document.removeEventListener("click",I),document.removeEventListener("keydown",z)}function D(t){const e=C.children[P],i=C.children[t];e&&e.classList.remove("isHover"),i&&i.classList.add("isHover"),P=t}function A(t,e){const i=E,s=C.querySelector(`[data-value="${i}"`),n=C.querySelector(`[data-value="${t}"`);s&&s.classList.remove("is-active"),n&&n.classList.add("is-active"),S.textContent=e,E=t}function I(t){!M.contains(t.target)&&O()}function z(t){if(40===t.keyCode&&P<T-1){t.preventDefault(),D(P+1)}if(38===t.keyCode&&P>0&&(t.preventDefault(),D(P-1)),13===t.keyCode||32===t.keyCode){t.preventDefault();const e=C.children[P],i=e&&e.getAttribute("data-value");i&&(w.value=i,A(i,e.textContent)),O()}27===t.keyCode&&O()}S.addEventListener("click",(t=>{!M.classList.contains("is-active")?L():O()})),w.addEventListener("change",(t=>{const e=t.target.value;A(e,C.querySelectorAll(`[data-value="${e}"]`)[0].textContent)})),k.forEach((function(t,e){t.addEventListener("click",(t=>{const e=t.target.getAttribute("data-value");w.value=e,A(e,t.target.textContent),O()})),t.addEventListener("mouseenter",(t=>{D(e)}))}))}let h=document.querySelectorAll(".js-editable");h&&h.forEach((t=>{let e=t.querySelectorAll("input"),i=t.querySelector(".js-editable-btn");e[0].addEventListener("click",(function(){if(!t.classList.contains("is-active")){t.classList.add("is-active"),i.classList.add("button");for(let t of e)t.readOnly=!1}})),i.addEventListener("click",(function(){if(t.classList.contains("is-active")){t.classList.remove("is-active"),i.classList.remove("button");for(let t of e)t.readOnly=!0}else{t.classList.add("is-active"),i.classList.add("button");for(let t of e)t.readOnly=!1}}))}));let d=document.querySelectorAll(".js-sort");if(d)for(let R=0;R<d.length;R++)d[R].addEventListener("click",(function(){if(!this.classList.contains("table__sort--state-2"))return this.classList.contains("table__sort--state-1")?(this.classList.remove("table__sort--state-1"),void this.classList.add("table__sort--state-2")):void this.classList.add("table__sort--state-1");this.classList.remove("table__sort--state-2")}));new J("#profile-balance",{initialSlide:1,slidesPerView:1,spaceBetween:20,allowTouchMove:!1,navigation:{nextEl:".balance-nav__btn--next",prevEl:".balance-nav__btn--prev"},pagination:{el:".swiper-pagination",clickable:!0}})}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,